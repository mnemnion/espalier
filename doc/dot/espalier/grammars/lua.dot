digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 321"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-100"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 codeblock_6 section_7 section_8}
{rank=same; header_2 prose_3 prose_4 prose_5 codeblock_6 section_7 section_8}

header_2 [label="1 : A Grammar For Lua"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

codeblock_6 [label="code block 12-69"]

section_7 [label="section: 72-89"]

section_8 [label="section: 101-286"]


// END RANK section_1

header_2 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* A Grammar For Lua"]
// END RANK header_2

prose_3 -> { raw_10}
{rank=same; raw_10}

raw_10 [label="raw"]


// END RANK prose_3

raw_10 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

While the most important grammar for pegylator is pegylator itself, it's
time to make a Lua language parser.
"]
// END RANK raw_10

prose_4 -> { raw_12}
{rank=same; raw_12}

raw_12 [label="raw"]


// END RANK prose_4

raw_12 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The hard work is done on this, it's a matter of translation into the
Pegylator paradigm.
"]
// END RANK raw_12

prose_5 -> { raw_14}
{rank=same; raw_14}

raw_14 [label="raw"]


// END RANK prose_5

raw_14 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
While this a hell of a lot of work, the complete BNF of Lua is available,
and reproduced here.
"]
// END RANK raw_14

codeblock_6 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="chunk ::= {stat [`;´]} [laststat [`;´]]

   block ::= chunk

   stat ::=  varlist `=´ explist |
       functioncall |
       do block end |
       while exp do block end |
       repeat block until exp |
       if exp then block {elseif exp then block} [else block] end |
       for Name `=´ exp `,´ exp [`,´ exp] do block end |
       for namelist in explist do block end |
       function funcname funcbody |
       local function Name funcbody |
       local namelist [`=´ explist]

   laststat ::= return [explist] | break

   funcname ::= Name {`.´ Name} [`:´ Name]

   varlist ::= var {`,´ var}

   var ::=  Name | prefixexp `[´ exp `]´ | prefixexp `.´ Name

   namelist ::= Name {`,´ Name}

   explist ::= {exp `,´} exp

   exp ::=  nil | false | true | Number | String | `...´ | function |
       prefixexp | tableconstructor | exp binop exp | unop exp

   prefixexp ::= var | functioncall | `(´ exp `)´

   functioncall ::=  prefixexp args | prefixexp `:´ Name args

   args ::=  `(´ [explist] `)´ | tableconstructor | String

   function ::= function funcbody

   funcbody ::= `(´ [parlist] `)´ block end

   parlist ::= namelist [`,´ `...´] | `...´

   tableconstructor ::= `{´ [fieldlist] `}´

   fieldlist ::= field {fieldsep field} [fieldsep]

   field ::= `[´ exp `]´ `=´ exp | Name `=´ exp | exp

   fieldsep ::= `,´ | `;´

   binop ::= `+´ | `-´ | `*´ | `/´ | `^´ | `%´ | `..´ |
       `<´ | `<=´ | `>´ | `>=´ | `==´ | `~=´ |
       and | or

   unop ::= `-´ | not | `#´"]
// END RANK codeblock_6

section_7 -> { header_17 prose_18 section_19 section_20}
{rank=same; header_17 prose_18 section_19 section_20}

header_17 [label="2 : Implementation"]

prose_18 [label="prose"]

section_19 [label="section: 77-89"]

section_20 [label="section: 90-100"]


// END RANK section_7

header_17 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Implementation"]
// END RANK header_17

prose_18 -> { raw_22}
{rank=same; raw_22}

raw_22 [label="raw"]


// END RANK prose_18

raw_22 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Let's try it.

"]
// END RANK raw_22

section_19 -> { header_24 prose_25 codeblock_26}
{rank=same; header_24 prose_25 codeblock_26}

header_24 [label="3 : Imports"]

prose_25 [label="prose"]

codeblock_26 [label="code block 79-87"]


// END RANK section_19

header_24 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Imports"]
// END RANK header_24

prose_25 -> { raw_28}
{rank=same; raw_28}

raw_28 [label="raw"]


// END RANK prose_25

raw_28 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_28

codeblock_26 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Node    =  require \"espalier/node\"
local Grammar =  require \"espalier/grammar\"
local L       =  require \"espalier/elpatt\"

local P, R, E, V, S    =  L.P, L.R, L.E, L.V, L.S

local lex     =  require \"espalier/lexemes\""]
// END RANK codeblock_26

section_20 -> { header_31 prose_32 prose_33 prose_34 prose_35}
{rank=same; header_31 prose_32 prose_33 prose_34 prose_35}

header_31 [label="3 : lua_fn"]

prose_32 [label="prose"]

prose_33 [label="prose"]

prose_34 [label="prose"]

prose_35 [label="prose"]


// END RANK section_20

header_31 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** lua_fn"]
// END RANK header_31

prose_32 -> { raw_37}
{rank=same; raw_37}

raw_37 [label="raw"]


// END RANK prose_32

raw_37 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is provided to the Grammar engine to create a Lua parser.
"]
// END RANK raw_37

prose_33 -> { raw_39}
{rank=same; raw_39}

raw_39 [label="raw"]


// END RANK prose_33

raw_39 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- #Todo this being a 5.1 grammar, need to add goto statements.
"]
// END RANK raw_39

prose_34 -> { raw_41}
{rank=same; raw_41}

raw_41 [label="raw"]


// END RANK prose_34

raw_41 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- #Todo add the whitespace
"]
// END RANK raw_41

prose_35 -> { raw_43 prespace_44 literal_45 raw_46}
{rank=same; raw_43 prespace_44 literal_45 raw_46}

raw_43 [label="raw"]

prespace_44 [label="prespace"]

literal_45 [label="literal"]

raw_46 [label="raw"]


// END RANK prose_35

raw_43 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- #Todo add precedence parsing of"]
// END RANK raw_43

prespace_44 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_44

literal_45 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="exp"]
// END RANK literal_45

raw_46 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
// END RANK raw_46

section_8 -> { header_51 prose_52 structure_53 prose_54 codeblock_55 section_56 section_57 section_58}
{rank=same; header_51 prose_52 structure_53 prose_54 codeblock_55 section_56 section_57 section_58}

header_51 [label="2 : The Grammar of the Lua Language"]

prose_52 [label="prose"]

structure_53 [label="structure"]

prose_54 [label="prose"]

codeblock_55 [label="code block 112-123"]

section_56 [label="section: 126-166"]

section_57 [label="section: 167-275"]

section_58 [label="section: 287-321"]


// END RANK section_8

header_51 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** The Grammar of the Lua Language"]
// END RANK header_51

prose_52 -> { raw_60 prespace_61 literal_62 raw_63}
{rank=same; raw_60 prespace_61 literal_62 raw_63}

raw_60 [label="raw"]

prespace_61 [label="prespace"]

literal_62 [label="literal"]

raw_63 [label="raw"]


// END RANK prose_52

raw_60 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A Lua program consists of one or more"]
// END RANK raw_60

prespace_61 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_61

literal_62 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label="chunks"]
// END RANK literal_62

raw_63 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which are
anonymous functions.
"]
// END RANK raw_63

structure_53 -> { hashline_68}
{rank=same; hashline_68}

hashline_68 [label="hashline"]


// END RANK structure_53

hashline_68 -> { hashtag_69}
{rank=same; hashtag_69}

hashtag_69 [label="hashtag"]


// END RANK hashline_68

hashtag_69 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="NB"]
// END RANK hashtag_69

prose_54 -> { raw_71 prespace_72 literal_73 raw_74}
{rank=same; raw_71 prespace_72 literal_73 raw_74}

raw_71 [label="raw"]

prespace_72 [label="prespace"]

literal_73 [label="literal"]

raw_74 [label="raw"]


// END RANK prose_54

raw_71 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
we don't use them in bridge, so we're just defining that as"]
// END RANK raw_71

prespace_72 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_72

literal_73 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="P"]
// END RANK literal_73

raw_74 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_74

codeblock_55 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local _do, _end, _then = P\"do\", P\"end\", P\"then\"

local function lua_fn(ENV)
   local K = P -- this is a hack

   START \"lua\"

   lua   = V\"chunk\"^1
   chunk = (V\"stat\" * P\";\"^0) * (V\"laststat\"^0 * P\";\"^0)^-1
   block = V\"chunk\""]
// END RANK codeblock_55

section_56 -> { header_80 prose_81 prose_82 codeblock_83}
{rank=same; header_80 prose_81 prose_82 codeblock_83}

header_80 [label="3 : Statement"]

prose_81 [label="prose"]

prose_82 [label="prose"]

codeblock_83 [label="code block 134-164"]


// END RANK section_56

header_80 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Statement"]
// END RANK header_80

prose_81 -> { raw_85}
{rank=same; raw_85}

raw_85 [label="raw"]


// END RANK prose_81

raw_85 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Lua is a statement-oriented language in which expressions are
a special case.
"]
// END RANK raw_85

prose_82 -> { raw_87 prespace_88 literal_89 raw_90 prespace_91 literal_92 raw_93 prespace_94 literal_95 raw_96}
{rank=same; raw_87 prespace_88 literal_89 raw_90 prespace_91 literal_92 raw_93 prespace_94 literal_95 raw_96}

raw_87 [label="raw"]

prespace_88 [label="prespace"]

literal_89 [label="literal"]

raw_90 [label="raw"]

prespace_91 [label="prespace"]

literal_92 [label="literal"]

raw_93 [label="raw"]

prespace_94 [label="prespace"]

literal_95 [label="literal"]

raw_96 [label="raw"]


// END RANK prose_82

raw_87 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Thus"]
// END RANK raw_87

prespace_88 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_88

literal_89 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label="2 + 3"]
// END RANK literal_89

raw_90 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is not a valid Lua program, whereas"]
// END RANK raw_90

prespace_91 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_91

literal_92 -> leaf_102
leaf_102  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return 2 + 3"]
// END RANK literal_92

raw_93 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
is, and is equivalent to"]
// END RANK raw_93

prespace_94 -> leaf_104
leaf_104  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_94

literal_95 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label="(function() return 2 + 3 end)()"]
// END RANK literal_95

raw_96 -> leaf_106
leaf_106  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_96

codeblock_83 -> leaf_107
leaf_107  [color=Gray,shape=rectangle,fontname=Inconsolata,label="   stat  = V\"varlist\" * P\"=\" * V\"explist\" +
           V\"functioncall\" +
           _do * V\"block\" * _end +
           P\"while\" * V\"exp\" * _do * V\"block\" * _end +
           P\"repeat\" * V\"block\" * P\"until\" * _end +
           P\"if\" * V\"exp\" * _then * V\"block\" *
              ( P\"elseif\" * V\"exp\" * _then * V\"block\" )^0 *
              ( P\"else\" * V\"block\" )^-1 * _end +
           P\"for\" * V\"Name\" * P\"=\" * V\"exp\" * P\",\" * V\"exp\" *
              ( P\",\" * V\"exp\" )^-1 * _do * V\"block\" * _end +
           P\"for\" * V\"namelist\" * P\"in\" * V\"explist\" * _do *
              V\"block\" * _end +
           P\"function\" * V\"funcname\" * V\"funcbody\" +
           P\"local\" * P\"function\" * V\"Name\" * V\"funcbody\" +
           P\"local\" * V\"namelist\" * ( P\"=\" * V\"explist\" )^-1

   laststat = P\"return\" * V\"explist\"^-1 + P\"break\"

   funcname = V\"Name\" * ( P\".\" * V\"Name\" )^0 * ( P\":\" * V\"Name\" )

   varlist  = V\"var\" * ( P\",\" * V\"var\")^0

   var      = V\"Name\"
            + V\"prefixexp\" * P\"[\" * V\"exp\" * P\"]\"
            + V\"prefixexp\" * \".\" * V\"Name\"

   namelist = V\"Name\" * ( V\"exp\" * \",\")^0 * V\"exp\"

   explist  = (V\"exp\" * P\",\")^0 * V\"exp\""]
// END RANK codeblock_83

section_57 -> { header_108 prose_109 codeblock_110 prose_111 section_112}
{rank=same; header_108 prose_109 codeblock_110 prose_111 section_112}

header_108 [label="3 : Expressions"]

prose_109 [label="prose"]

codeblock_110 [label="code block 169-265"]

prose_111 [label="prose"]

section_112 [label="section: 276-286"]


// END RANK section_57

header_108 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Expressions"]
// END RANK header_108

prose_109 -> { raw_114}
{rank=same; raw_114}

raw_114 [label="raw"]


// END RANK prose_109

raw_114 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_114

codeblock_110 -> leaf_116
leaf_116  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- Let's come up with a syntax that does not use left recursion
  -- (only listing changes to Lua 5.1 extended BNF syntax)
  -- value ::= nil | false | true | Number | String | '...' | function |
  --           tableconstructor | functioncall | var | '(' exp ')'
  -- exp ::= unop exp | value [binop exp]
  -- prefix ::= '(' exp ')' | Name
  -- index ::= '[' exp ']' | '.' Name
  -- call ::= args | ':' Name args
  -- suffix ::= call | index
  -- var ::= prefix {suffix} index | Name
  -- functioncall ::= prefix {suffix} call

  -- Something that represents a value (or many values)
  value = K \"nil\" +
          K \"false\" +
          K \"true\" +
          V \"Number\" +
          V \"String\" +
          P \"...\" +
          V \"func\" +
          V \"tableconstructor\" +
          V \"functioncall\" +
          V \"var\" +
          P \"(\" * V \"space\" * V \"exp\" * V \"space\" * P \")\";

  -- An expression operates on values to produce a new value or is a value
  exp = V \"unop\" * V \"space\" * V \"exp\" +
        V \"value\" * (V \"space\" * V \"binop\" * V \"space\" * V \"exp\")^-1;

  -- Index and Call
  index = P \"[\" * V \"space\" * V \"exp\" * V \"space\" * P \"]\" +
          P \".\" * V \"space\" * V \"Name\";
  call = V \"args\" +
         P \":\" * V \"space\" * V \"Name\" * V \"space\" * V \"args\";

  -- A Prefix is a the leftmost side of a var(iable) or functioncall
  prefix = P \"(\" * V \"space\" * V \"exp\" * V \"space\" * P \")\" +
           V \"Name\";
  -- A Suffix is a Call or Index
  suffix = V \"call\" +
           V \"index\";

  var = V \"prefix\" * (V \"space\" * V \"suffix\" * #(V \"space\" * V \"suffix\"))^0 *
            V \"space\" * V \"index\" +
        V \"Name\";
  functioncall = V \"prefix\" *
                     (V \"space\" * V \"suffix\" * #(V \"space\" * V \"suffix\"))^0 *
                 V \"space\" * V \"call\";

  explist = V \"exp\" * (V \"space\" * P \",\" * V \"space\" * V \"exp\")^0;

  args = P \"(\" * V \"space\" * (V \"explist\" * V \"space\")^-1 * P \")\" +
         V \"tableconstructor\" +
         V \"String\";

  func = K \"function\" * V \"space\" * V \"funcbody\";

  funcbody = P \"(\" * V \"space\" * (V \"parlist\" * V \"space\")^-1 * P \")\" *
                 V \"space\" *  V \"block\" * V \"space\" * K \"end\";

  parlist = V \"namelist\" * (V \"space\" * P \",\" * V \"space\" * P \"...\")^-1 +
            P \"...\";

  tableconstructor = P \"{\" * V \"space\" * (V \"fieldlist\" * V \"space\")^-1 * P \"}\";

  fieldlist = V \"field\" * (V \"space\" * V \"fieldsep\" * V \"space\" * V \"field\")^0
                  * (V \"space\" * V \"fieldsep\")^-1;

  field = P \"[\" * V \"space\" * V \"exp\" * V \"space\" * P \"]\" * V \"space\" * P \"=\" *
              V \"space\" * V \"exp\" +
          V \"Name\" * V \"space\" * P \"=\" * V \"space\" * V \"exp\" +
          V \"exp\";

  fieldsep = P \",\" +
             P \";\";

  binop = K \"and\" + -- match longest token sequences first
          K \"or\" +
          P \"..\" +
          P \"<=\" +
          P \">=\" +
          P \"==\" +
          P \"~=\" +
          P \"+\" +
          P \"-\" +
          P \"*\" +
          P \"/\" +
          P \"^\" +
          P \"%\" +
          P \"<\" +
          P \">\";

  unop = P \"-\" +
         P \"#\" +
         K \"not\";"]
// END RANK codeblock_110

prose_111 -> { raw_117 link_118 raw_119}
{rank=same; raw_117 link_118 raw_119}

raw_117 [label="raw"]

link_118 [label="link"]

raw_119 [label="raw"]


// END RANK prose_111

raw_117 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The "]
// END RANK raw_117

link_118 -> { anchortext_121 url_122}
{rank=same; anchortext_121 url_122}

anchortext_121 [label="anchortext"]

url_122 [label="url"]


// END RANK link_118

anchortext_121 -> leaf_123
leaf_123  [color=Gray,shape=rectangle,fontname=Inconsolata,label="LPEG manual"]
// END RANK anchortext_121

url_122 -> leaf_124
leaf_124  [color=Gray,shape=rectangle,fontname=Inconsolata,label="http://www.inf.puc-rio.br/~roberto/lpeg/#ex"]
// END RANK url_122

raw_119 -> leaf_125
leaf_125  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" has an
arithmetic parser so I can just use that.

"]
// END RANK raw_119

section_112 -> { header_126 prose_127 codeblock_128}
{rank=same; header_126 prose_127 codeblock_128}

header_126 [label="4 : Base Lexemes"]

prose_127 [label="prose"]

codeblock_128 [label="code block 278-285"]


// END RANK section_112

header_126 -> leaf_129
leaf_129  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Base Lexemes"]
// END RANK header_126

prose_127 -> { raw_130}
{rank=same; raw_130}

raw_130 [label="raw"]


// END RANK prose_127

raw_130 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_130

codeblock_128 -> leaf_132
leaf_132  [color=Gray,shape=rectangle,fontname=Inconsolata,label="   Name      = lex.lua.symbol
   String    = lex.lua.string
   Number    = lex.lua.number
   Comment   = lex.lua.comment
   space     = lex.lua.WS
end"]
// END RANK codeblock_128

section_58 -> { header_133 prose_134 prose_135 prose_136 prose_137 codeblock_138}
{rank=same; header_133 prose_134 prose_135 prose_136 prose_137 codeblock_138}

header_133 [label="3 : Afterword"]

prose_134 [label="prose"]

prose_135 [label="prose"]

prose_136 [label="prose"]

prose_137 [label="prose"]

codeblock_138 [label="code block 304-306"]


// END RANK section_58

header_133 -> leaf_139
leaf_139  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Afterword"]
// END RANK header_133

prose_134 -> { raw_140}
{rank=same; raw_140}

raw_140 [label="raw"]


// END RANK prose_134

raw_140 -> leaf_141
leaf_141  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

So there's a first-pass at a literal transcription of the Lua 5.1 spec into
LPEG/espalier format.
"]
// END RANK raw_140

prose_135 -> { raw_142 prespace_143 literal_144 raw_145 prespace_146 literal_147 raw_148}
{rank=same; raw_142 prespace_143 literal_144 raw_145 prespace_146 literal_147 raw_148}

raw_142 [label="raw"]

prespace_143 [label="prespace"]

literal_144 [label="literal"]

raw_145 [label="raw"]

prespace_146 [label="prespace"]

literal_147 [label="literal"]

raw_148 [label="raw"]


// END RANK prose_135

raw_142 -> leaf_149
leaf_149  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There's bound to be some spelling errors in there, such as a"]
// END RANK raw_142

prespace_143 -> leaf_150
leaf_150  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_143

literal_144 -> leaf_151
leaf_151  [color=Gray,shape=rectangle,fontname=Inconsolata,label="+"]
// END RANK literal_144

raw_145 -> leaf_152
leaf_152  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" where I
meant"]
// END RANK raw_145

prespace_146 -> leaf_153
leaf_153  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_146

literal_147 -> leaf_154
leaf_154  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*"]
// END RANK literal_147

raw_148 -> leaf_155
leaf_155  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", but in writing out the spec I'm fairly sure I won't need to
rewrite terms to compensate for direct left recursion.
"]
// END RANK raw_148

prose_136 -> { raw_156 prespace_157 literal_158 raw_159 prespace_160 literal_161 raw_162 prespace_163 literal_164 raw_165}
{rank=same; raw_156 prespace_157 literal_158 raw_159 prespace_160 literal_161 raw_162 prespace_163 literal_164 raw_165}

raw_156 [label="raw"]

prespace_157 [label="prespace"]

literal_158 [label="literal"]

raw_159 [label="raw"]

prespace_160 [label="prespace"]

literal_161 [label="literal"]

raw_162 [label="raw"]

prespace_163 [label="prespace"]

literal_164 [label="literal"]

raw_165 [label="raw"]


// END RANK prose_136

raw_156 -> leaf_166
leaf_166  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I do need to add whitespace,"]
// END RANK raw_156

prespace_157 -> leaf_167
leaf_167  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_157

literal_158 -> leaf_168
leaf_168  [color=Gray,shape=rectangle,fontname=Inconsolata,label="goto"]
// END RANK literal_158

raw_159 -> leaf_169
leaf_169  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" statements and labels, and get"]
// END RANK raw_159

prespace_160 -> leaf_170
leaf_170  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_160

literal_161 -> leaf_171
leaf_171  [color=Gray,shape=rectangle,fontname=Inconsolata,label="espalier"]
// END RANK literal_161

raw_162 -> leaf_172
leaf_172  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
running in"]
// END RANK raw_162

prespace_163 -> leaf_173
leaf_173  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_163

literal_164 -> leaf_174
leaf_174  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_164

raw_165 -> leaf_175
leaf_175  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which isn't happening yet due to remaining problems with
the modules system.
"]
// END RANK raw_165

prose_137 -> { raw_176 prespace_177 literal_178 raw_179 prespace_180 literal_181 raw_182 prespace_183 literal_184 raw_185}
{rank=same; raw_176 prespace_177 literal_178 raw_179 prespace_180 literal_181 raw_182 prespace_183 literal_184 raw_185}

raw_176 [label="raw"]

prespace_177 [label="prespace"]

literal_178 [label="literal"]

raw_179 [label="raw"]

prespace_180 [label="prespace"]

literal_181 [label="literal"]

raw_182 [label="raw"]

prespace_183 [label="prespace"]

literal_184 [label="literal"]

raw_185 [label="raw"]


// END RANK prose_137

raw_176 -> leaf_186
leaf_186  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We also need to borrow our existing definitions for things like"]
// END RANK raw_176

prespace_177 -> leaf_187
leaf_187  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_177

literal_178 -> leaf_188
leaf_188  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Name"]
// END RANK literal_178

raw_179 -> leaf_189
leaf_189  [color=Gray,shape=rectangle,fontname=Inconsolata,label="s,"]
// END RANK raw_179

prespace_180 -> leaf_190
leaf_190  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_180

literal_181 -> leaf_191
leaf_191  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Number"]
// END RANK literal_181

raw_182 -> leaf_192
leaf_192  [color=Gray,shape=rectangle,fontname=Inconsolata,label="s, and"]
// END RANK raw_182

prespace_183 -> leaf_193
leaf_193  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_183

literal_184 -> leaf_194
leaf_194  [color=Gray,shape=rectangle,fontname=Inconsolata,label="String"]
// END RANK literal_184

raw_185 -> leaf_195
leaf_195  [color=Gray,shape=rectangle,fontname=Inconsolata,label="s, but that's a simple copy-paste job.

"]
// END RANK raw_185

codeblock_138 -> leaf_196
leaf_196  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return Grammar(lua_fn)"]
// END RANK codeblock_138


}
