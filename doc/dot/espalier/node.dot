digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 658"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-624"]


// END RANK doc_0

section_1 -> { header_2 prose_3 section_4 section_5 section_6 section_7 section_8 section_9}
{rank=same; header_2 prose_3 section_4 section_5 section_6 section_7 section_8 section_9}

header_2 [label="1 : Node"]

prose_3 [label="prose"]

section_4 [label="section: 8-17"]

section_5 [label="section: 18-37"]

section_6 [label="section: 38-54"]

section_7 [label="section: 55-66"]

section_8 [label="section: 67-586"]

section_9 [label="section: 625-648"]


// END RANK section_1

header_2 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Node"]
// END RANK header_2

prose_3 -> { raw_11 link_12 raw_13}
{rank=same; raw_11 link_12 raw_13}

raw_11 [label="raw"]

link_12 [label="link"]

raw_13 [label="raw"]


// END RANK prose_3

raw_11 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


  The Node class implements an abstract syntax tree, in collaboration with
the "]
// END RANK raw_11

link_12 -> { anchortext_15 url_16}
{rank=same; anchortext_15 url_16}

anchortext_15 [label="anchortext"]

url_16 [label="url"]


// END RANK link_12

anchortext_15 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Grammar class"]
// END RANK anchortext_15

url_16 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="hts://~/grammar.orb"]
// END RANK url_16

raw_13 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and lpeg more generally.

"]
// END RANK raw_13

section_4 -> { header_20 prose_21 codeblock_22}
{rank=same; header_20 prose_21 codeblock_22}

header_20 [label="4 : asserts"]

prose_21 [label="prose"]

codeblock_22 [label="code block 10-15"]


// END RANK section_4

header_20 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** asserts"]
// END RANK header_20

prose_21 -> { raw_24}
{rank=same; raw_24}

raw_24 [label="raw"]


// END RANK prose_21

raw_24 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_24

codeblock_22 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local yield = assert(coroutine.yield, \"uses coroutines\")
local wrap = assert(coroutine.wrap)
local sub, find = assert(string.sub, \"uses string\"), assert(string.find)
local setmeta, getmeta = assert(setmetatable), assert(getmetatable)"]
// END RANK codeblock_22

section_5 -> { header_27 prose_28 codeblock_29 codeblock_30}
{rank=same; header_27 prose_28 codeblock_29 codeblock_30}

header_27 [label="4 : requires"]

prose_28 [label="prose"]

codeblock_29 [label="code block 20-24"]

codeblock_30 [label="code block 28-35"]


// END RANK section_5

header_27 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** requires"]
// END RANK header_27

prose_28 -> { raw_32}
{rank=same; raw_32}

raw_32 [label="raw"]


// END RANK prose_28

raw_32 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_32

codeblock_29 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local s = require \"singletons\" . status ()
local a = require \"anterm\"
local dot = require \"espalier/dot\""]
// END RANK codeblock_29

codeblock_30 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="   -- ergo
   --[[
   local html = require \"espalier/html\"
   local css  = require \"espalier/css\"
   local portal = require \"espalier/portal\"
   --]]"]
// END RANK codeblock_30

section_6 -> { header_36 prose_37 codeblock_38 prose_39 prose_40}
{rank=same; header_36 prose_37 codeblock_38 prose_39 prose_40}

header_36 [label="2 : Node metatable"]

prose_37 [label="prose"]

codeblock_38 [label="code block 43-47"]

prose_39 [label="prose"]

prose_40 [label="prose"]


// END RANK section_6

header_36 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Node metatable"]
// END RANK header_36

prose_37 -> { raw_42}
{rank=same; raw_42}

raw_42 [label="raw"]


// END RANK prose_37

raw_42 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The Node metatable is the root table for any Node, all of which should
subclass through [[Node:inherit()][hts://~/node#node:inherit()]].
"]
// END RANK raw_42

codeblock_38 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Node = {}
Node.__index = Node
Node.isNode = Node"]
// END RANK codeblock_38

prose_39 -> { raw_45 prespace_46 literal_47 raw_48}
{rank=same; raw_45 prespace_46 literal_47 raw_48}

raw_45 [label="raw"]

prespace_46 [label="prespace"]

literal_47 [label="literal"]

raw_48 [label="raw"]


// END RANK prose_39

raw_45 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
we would now say"]
// END RANK raw_45

prespace_46 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_46

literal_47 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Node = meta {}"]
// END RANK literal_47

raw_48 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_48

prose_40 -> { raw_53 prespace_54 literal_55 raw_56 prespace_57 literal_58 raw_59 prespace_60 literal_61 raw_62}
{rank=same; raw_53 prespace_54 literal_55 raw_56 prespace_57 literal_58 raw_59 prespace_60 literal_61 raw_62}

raw_53 [label="raw"]

prespace_54 [label="prespace"]

literal_55 [label="literal"]

raw_56 [label="raw"]

prespace_57 [label="prespace"]

literal_58 [label="literal"]

raw_59 [label="raw"]

prespace_60 [label="prespace"]

literal_61 [label="literal"]

raw_62 [label="raw"]


// END RANK prose_40

raw_53 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The"]
// END RANK raw_53

prespace_54 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_54

literal_55 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label="isNode"]
// END RANK literal_55

raw_56 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is a quirk of the"]
// END RANK raw_56

prespace_57 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_57

literal_58 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Node"]
// END RANK literal_58

raw_59 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" arcy, being distinct from"]
// END RANK raw_59

prespace_60 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_60

literal_61 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="idEst"]
// END RANK literal_61

raw_62 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for
orthogonality.

"]
// END RANK raw_62

section_7 -> { header_73 prose_74 prose_75 prose_76}
{rank=same; header_73 prose_74 prose_75 prose_76}

header_73 [label="2 : Fields"]

prose_74 [label="prose"]

prose_75 [label="prose"]

prose_76 [label="prose"]


// END RANK section_7

header_73 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Fields"]
// END RANK header_73

prose_74 -> { raw_78}
{rank=same; raw_78}

raw_78 [label="raw"]


// END RANK prose_74

raw_78 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

   - id :  A string naming the Node.
           This is identical to the name of the pattern that recognizes
           or captures it.
"]
// END RANK raw_78

prose_75 -> { raw_80}
{rank=same; raw_80}

raw_80 [label="raw"]


// END RANK prose_75

raw_80 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
           This is never set on Node itself, and Grammar will fail to
           produce a Node which lacks this flag.
"]
// END RANK raw_80

prose_76 -> { raw_82 prespace_83 literal_84 raw_85}
{rank=same; raw_82 prespace_83 literal_84 raw_85}

raw_82 [label="raw"]

prespace_83 [label="prespace"]

literal_84 [label="literal"]

raw_85 [label="raw"]


// END RANK prose_76

raw_82 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
   - isNode :  A boolean, always"]
// END RANK raw_82

prespace_83 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_83

literal_84 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="true"]
// END RANK literal_84

raw_85 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="/truthy.

"]
// END RANK raw_85

section_8 -> { header_90 prose_91 section_92 section_93 section_94 section_95 section_96 section_97 section_98 section_99 section_100 section_101 section_102}
{rank=same; header_90 prose_91 section_92 section_93 section_94 section_95 section_96 section_97 section_98 section_99 section_100 section_101 section_102}

header_90 [label="2 : Methods"]

prose_91 [label="prose"]

section_92 [label="section: 70-84"]

section_93 [label="section: 85-133"]

section_94 [label="section: 134-244"]

section_95 [label="section: 260-267"]

section_96 [label="section: 282-292"]

section_97 [label="section: 293-312"]

section_98 [label="section: 313-339"]

section_99 [label="section: 362-518"]

section_100 [label="section: 536-554"]

section_101 [label="section: 555-586"]

section_102 [label="section: 587-612"]


// END RANK section_8

header_90 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Methods"]
// END RANK header_90

prose_91 -> { raw_104}
{rank=same; raw_104}

raw_104 [label="raw"]


// END RANK prose_91

raw_104 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
// END RANK raw_104

section_92 -> { header_106 prose_107 prose_108 codeblock_109}
{rank=same; header_106 prose_107 prose_108 codeblock_109}

header_106 [label="4 : toLua"]

prose_107 [label="prose"]

prose_108 [label="prose"]

codeblock_109 [label="code block 78-82"]


// END RANK section_92

header_106 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** toLua"]
// END RANK header_106

prose_107 -> { raw_111}
{rank=same; raw_111}

raw_111 [label="raw"]


// END RANK prose_107

raw_111 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is not a general method in any sense, it's here as a backstop
while I build out Clu.
"]
// END RANK raw_111

prose_108 -> { raw_113}
{rank=same; raw_113}

raw_113 [label="raw"]


// END RANK prose_108

raw_113 -> leaf_114
leaf_114  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'm going to call it an important root method: it says, in plain English,
that a bare Node cannot be simply converted to Lua.
"]
// END RANK raw_113

codeblock_109 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Node.toLua(node)
  s:halt(\"No toLua method for \" .. node.id)
end"]
// END RANK codeblock_109

section_93 -> { header_116 prose_117 prose_118 codeblock_119 codeblock_120}
{rank=same; header_116 prose_117 prose_118 codeblock_119 codeblock_120}

header_116 [label="3 : Visualizer"]

prose_117 [label="prose"]

prose_118 [label="prose"]

codeblock_119 [label="code block 94-125"]

codeblock_120 [label="code block 127-131"]


// END RANK section_93

header_116 -> leaf_121
leaf_121  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Visualizer"]
// END RANK header_116

prose_117 -> { raw_122}
{rank=same; raw_122}

raw_122 [label="raw"]


// END RANK prose_117

raw_122 -> leaf_123
leaf_123  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This gives us a nice, tree-shaped printout of an entire Node.
"]
// END RANK raw_122

prose_118 -> { raw_124}
{rank=same; raw_124}

raw_124 [label="raw"]


// END RANK prose_118

raw_124 -> leaf_125
leaf_125  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We're less disciplined than we should be about up-assigning this to
inherited Node classes.
"]
// END RANK raw_124

codeblock_119 -> leaf_126
leaf_126  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Node.toString(node, depth)
   local depth = depth or 0
   local phrase = \"\"
   phrase = (\"  \"):rep(depth) .. a.bright(node.id) .. \"    \"
      .. a.cyan(node.first) .. \"-\" .. a.cyan(node.last)
   if node[1] then
      local extra = \"    \"
      if Node.len(node) > 56 then
         --  Truncate in the middle
         local span = Node.span(node)
         local pre, post = sub(span, 1, 26), sub(span, -26, -1)
         extra = extra .. a.dim(pre) .. a.bright(\"………\") .. a.dim(post)
         extra = extra:gsub(\"\\n\", \"◼︎\")
      else
         extra = extra .. a.dim(Node.span(node):gsub(\"\\n\", \"◼︎\"))
      end
      phrase = phrase .. extra .. \"\\n\"
      for _,v in ipairs(node) do
         if (v.isNode) then
            phrase = phrase .. Node.toString(v, depth + 1)
         end
      end
   else
      local val = node.str:sub(node.first, node.last)
                          :gsub(\" \", a.clear() .. a.dim(\"_\") .. a.green())
      val = a.green(val)
      phrase = phrase .. \"    \" .. val  .. \"\\n\"
   end
   return phrase
end"]
// END RANK codeblock_119

codeblock_120 -> leaf_127
leaf_127  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Node.__repr(node, phrase, c)
   return tostring(node)
end"]
// END RANK codeblock_120

section_94 -> { header_128 prose_129 prose_130 section_131 section_132 section_133 section_134 section_135}
{rank=same; header_128 prose_129 prose_130 section_131 section_132 section_133 section_134 section_135}

header_128 [label="3 : Metrics"]

prose_129 [label="prose"]

prose_130 [label="prose"]

section_131 [label="section: 141-151"]

section_132 [label="section: 152-180"]

section_133 [label="section: 181-228"]

section_134 [label="section: 229-244"]

section_135 [label="section: 245-259"]


// END RANK section_94

header_128 -> leaf_136
leaf_136  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Metrics"]
// END RANK header_128

prose_129 -> { raw_137}
{rank=same; raw_137}

raw_137 [label="raw"]


// END RANK prose_129

raw_137 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

These retrieve various general properties of the Node.
"]
// END RANK raw_137

prose_130 -> { raw_139}
{rank=same; raw_139}

raw_139 [label="raw"]


// END RANK prose_130

raw_139 -> leaf_140
leaf_140  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The focus has been on correctness over speed.

"]
// END RANK raw_139

section_131 -> { header_141 prose_142 codeblock_143}
{rank=same; header_141 prose_142 codeblock_143}

header_141 [label="4 : node:span()"]

prose_142 [label="prose"]

codeblock_143 [label="code block 145-149"]


// END RANK section_131

header_141 -> leaf_144
leaf_144  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** node:span()"]
// END RANK header_141

prose_142 -> { raw_145 prespace_146 literal_147 raw_148}
{rank=same; raw_145 prespace_146 literal_147 raw_148}

raw_145 [label="raw"]

prespace_146 [label="prespace"]

literal_147 [label="literal"]

raw_148 [label="raw"]


// END RANK prose_142

raw_145 -> leaf_149
leaf_149  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_145

prespace_146 -> leaf_150
leaf_150  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_146

literal_147 -> leaf_151
leaf_151  [color=Gray,shape=rectangle,fontname=Inconsolata,label="node:span()"]
// END RANK literal_147

raw_148 -> leaf_152
leaf_152  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" returns a substring across the span of the Node.
"]
// END RANK raw_148

codeblock_143 -> leaf_153
leaf_153  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Node.span(node)
   return sub(node.str, node.first, node.last)
end"]
// END RANK codeblock_143

section_132 -> { header_154 prose_155 prose_156 prose_157 codeblock_158 prose_159 codeblock_160 prose_161 codeblock_162}
{rank=same; header_154 prose_155 prose_156 prose_157 codeblock_158 prose_159 codeblock_160 prose_161 codeblock_162}

header_154 [label="4 : node:len()"]

prose_155 [label="prose"]

prose_156 [label="prose"]

prose_157 [label="prose"]

codeblock_158 [label="code block 160-164"]

prose_159 [label="prose"]

codeblock_160 [label="code block 168-172"]

prose_161 [label="prose"]

codeblock_162 [label="code block 176-178"]


// END RANK section_132

header_154 -> leaf_163
leaf_163  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** node:len()"]
// END RANK header_154

prose_155 -> { raw_164}
{rank=same; raw_164}

raw_164 [label="raw"]


// END RANK prose_155

raw_164 -> leaf_165
leaf_165  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

ahh, the pleasure of indexing by one.
"]
// END RANK raw_164

prose_156 -> { prespace_166 literal_167 raw_168 prespace_169 literal_170 raw_171}
{rank=same; prespace_166 literal_167 raw_168 prespace_169 literal_170 raw_171}

prespace_166 [label="prespace"]

literal_167 [label="literal"]

raw_168 [label="raw"]

prespace_169 [label="prespace"]

literal_170 [label="literal"]

raw_171 [label="raw"]


// END RANK prose_156

prespace_166 -> leaf_172
leaf_172  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_166

literal_167 -> leaf_173
leaf_173  [color=Gray,shape=rectangle,fontname=Inconsolata,label="node:len()"]
// END RANK literal_167

raw_168 -> leaf_174
leaf_174  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" gives the"]
// END RANK raw_168

prespace_169 -> leaf_175
leaf_175  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_169

literal_170 -> leaf_176
leaf_176  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#node"]
// END RANK literal_170

raw_171 -> leaf_177
leaf_177  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and I think we can just add that as a synonym.
"]
// END RANK raw_171

prose_157 -> { raw_178}
{rank=same; raw_178}

raw_178 [label="raw"]


// END RANK prose_157

raw_178 -> leaf_179
leaf_179  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
hmm.
"]
// END RANK raw_178

codeblock_158 -> leaf_180
leaf_180  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Node.len(node)
    return 1 + node.last - node.first
end"]
// END RANK codeblock_158

prose_159 -> { raw_181}
{rank=same; raw_181}

raw_181 [label="raw"]


// END RANK prose_159

raw_181 -> leaf_182
leaf_182  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Hence
"]
// END RANK raw_181

codeblock_160 -> leaf_183
leaf_183  [color=Gray,shape=rectangle,fontname=Inconsolata,label="fn Node.len(node)
   -> @last - @first
end"]
// END RANK codeblock_160

prose_161 -> { raw_184}
{rank=same; raw_184}

raw_184 [label="raw"]


// END RANK prose_161

raw_184 -> leaf_185
leaf_185  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
yes, we can:
"]
// END RANK raw_184

codeblock_162 -> leaf_186
leaf_186  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Node.__len = Node.len"]
// END RANK codeblock_162

section_133 -> { header_187 prose_188 structure_189 prose_190 prose_191 prose_192 prose_193 prose_194 codeblock_195}
{rank=same; header_187 prose_188 structure_189 prose_190 prose_191 prose_192 prose_193 prose_194 codeblock_195}

header_187 [label="4 : Node:gap(node)"]

prose_188 [label="prose"]

structure_189 [label="structure"]

prose_190 [label="prose"]

prose_191 [label="prose"]

prose_192 [label="prose"]

prose_193 [label="prose"]

prose_194 [label="prose"]

codeblock_195 [label="code block 206-226"]


// END RANK section_133

header_187 -> leaf_196
leaf_196  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Node:gap(node)"]
// END RANK header_187

prose_188 -> { raw_197}
{rank=same; raw_197}

raw_197 [label="raw"]


// END RANK prose_188

raw_197 -> leaf_198
leaf_198  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_197

structure_189 -> { hashline_199}
{rank=same; hashline_199}

hashline_199 [label="hashline"]


// END RANK structure_189

hashline_199 -> { hashtag_200}
{rank=same; hashtag_200}

hashtag_200 [label="hashtag"]


// END RANK hashline_199

hashtag_200 -> leaf_201
leaf_201  [color=Gray,shape=rectangle,fontname=Inconsolata,label="NB"]
// END RANK hashtag_200

prose_190 -> { prespace_202 literal_203 raw_204 prespace_205 literal_206 raw_207 prespace_208 literal_209 raw_210 prespace_211 literal_212 raw_213 prespace_214 literal_215 raw_216 prespace_217 bold_218 raw_219}
{rank=same; prespace_202 literal_203 raw_204 prespace_205 literal_206 raw_207 prespace_208 literal_209 raw_210 prespace_211 literal_212 raw_213 prespace_214 literal_215 raw_216 prespace_217 bold_218 raw_219}

prespace_202 [label="prespace"]

literal_203 [label="literal"]

raw_204 [label="raw"]

prespace_205 [label="prespace"]

literal_206 [label="literal"]

raw_207 [label="raw"]

prespace_208 [label="prespace"]

literal_209 [label="literal"]

raw_210 [label="raw"]

prespace_211 [label="prespace"]

literal_212 [label="literal"]

raw_213 [label="raw"]

prespace_214 [label="prespace"]

literal_215 [label="literal"]

raw_216 [label="raw"]

prespace_217 [label="prespace"]

bold_218 [label="bold"]

raw_219 [label="raw"]


// END RANK prose_190

prespace_202 -> leaf_220
leaf_220  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_202

literal_203 -> leaf_221
leaf_221  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Node.gap(left, right)"]
// END RANK literal_203

raw_204 -> leaf_222
leaf_222  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" compares the"]
// END RANK raw_204

prespace_205 -> leaf_223
leaf_223  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_205

literal_206 -> leaf_224
leaf_224  [color=Gray,shape=rectangle,fontname=Inconsolata,label="last"]
// END RANK literal_206

raw_207 -> leaf_225
leaf_225  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" field of the"]
// END RANK raw_207

prespace_208 -> leaf_226
leaf_226  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_208

literal_209 -> leaf_227
leaf_227  [color=Gray,shape=rectangle,fontname=Inconsolata,label="left"]
// END RANK literal_209

raw_210 -> leaf_228
leaf_228  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" parameter
with the"]
// END RANK raw_210

prespace_211 -> leaf_229
leaf_229  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_211

literal_212 -> leaf_230
leaf_230  [color=Gray,shape=rectangle,fontname=Inconsolata,label="first"]
// END RANK literal_212

raw_213 -> leaf_231
leaf_231  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" field of the"]
// END RANK raw_213

prespace_214 -> leaf_232
leaf_232  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_214

literal_215 -> leaf_233
leaf_233  [color=Gray,shape=rectangle,fontname=Inconsolata,label="right"]
// END RANK literal_215

raw_216 -> leaf_234
leaf_234  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" parameter,"]
// END RANK raw_216

prespace_217 -> leaf_235
leaf_235  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_217

bold_218 -> leaf_236
leaf_236  [color=Gray,shape=rectangle,fontname=Inconsolata,label="if"]
// END RANK bold_218

raw_219 -> leaf_237
leaf_237  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" this is greater than
0.
"]
// END RANK raw_219

prose_191 -> { raw_238 prespace_239 literal_240 raw_241 prespace_242 literal_243 raw_244 prespace_245 literal_246 raw_247 prespace_248 literal_249 raw_250 prespace_251 literal_252 raw_253}
{rank=same; raw_238 prespace_239 literal_240 raw_241 prespace_242 literal_243 raw_244 prespace_245 literal_246 raw_247 prespace_248 literal_249 raw_250 prespace_251 literal_252 raw_253}

raw_238 [label="raw"]

prespace_239 [label="prespace"]

literal_240 [label="literal"]

raw_241 [label="raw"]

prespace_242 [label="prespace"]

literal_243 [label="literal"]

raw_244 [label="raw"]

prespace_245 [label="prespace"]

literal_246 [label="literal"]

raw_247 [label="raw"]

prespace_248 [label="prespace"]

literal_249 [label="literal"]

raw_250 [label="raw"]

prespace_251 [label="prespace"]

literal_252 [label="literal"]

raw_253 [label="raw"]


// END RANK prose_191

raw_238 -> leaf_254
leaf_254  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If it is negative,"]
// END RANK raw_238

prespace_239 -> leaf_255
leaf_255  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_239

literal_240 -> leaf_256
leaf_256  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Node.gap"]
// END RANK literal_240

raw_241 -> leaf_257
leaf_257  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" attempts to measure the"]
// END RANK raw_241

prespace_242 -> leaf_258
leaf_258  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_242

literal_243 -> leaf_259
leaf_259  [color=Gray,shape=rectangle,fontname=Inconsolata,label="first"]
// END RANK literal_243

raw_244 -> leaf_260
leaf_260  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" field of the"]
// END RANK raw_244

prespace_245 -> leaf_261
leaf_261  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_245

literal_246 -> leaf_262
leaf_262  [color=Gray,shape=rectangle,fontname=Inconsolata,label="right"]
// END RANK literal_246

raw_247 -> leaf_263
leaf_263  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" parameter against the"]
// END RANK raw_247

prespace_248 -> leaf_264
leaf_264  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_248

literal_249 -> leaf_265
leaf_265  [color=Gray,shape=rectangle,fontname=Inconsolata,label="last"]
// END RANK literal_249

raw_250 -> leaf_266
leaf_266  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" field of the"]
// END RANK raw_250

prespace_251 -> leaf_267
leaf_267  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_251

literal_252 -> leaf_268
leaf_268  [color=Gray,shape=rectangle,fontname=Inconsolata,label="left"]
// END RANK literal_252

raw_253 -> leaf_269
leaf_269  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" parameter.
"]
// END RANK raw_253

prose_192 -> { raw_270 prespace_271 bold_272 raw_273}
{rank=same; raw_270 prespace_271 bold_272 raw_273}

raw_270 [label="raw"]

prespace_271 [label="prespace"]

bold_272 [label="bold"]

raw_273 [label="raw"]


// END RANK prose_192

raw_270 -> leaf_274
leaf_274  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If this is a natural number we return the"]
// END RANK raw_270

prespace_271 -> leaf_275
leaf_275  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_271

bold_272 -> leaf_276
leaf_276  [color=Gray,shape=rectangle,fontname=Inconsolata,label="negation"]
// END RANK bold_272

raw_273 -> leaf_277
leaf_277  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" of this value.  If both
should prove to be positive, we halt.
"]
// END RANK raw_273

prose_193 -> { raw_278 prespace_279 literal_280 raw_281}
{rank=same; raw_278 prespace_279 literal_280 raw_281}

raw_278 [label="raw"]

prespace_279 [label="prespace"]

literal_280 [label="literal"]

raw_281 [label="raw"]


// END RANK prose_193

raw_278 -> leaf_282
leaf_282  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
No effort is made to check that the"]
// END RANK raw_278

prespace_279 -> leaf_283
leaf_283  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_279

literal_280 -> leaf_284
leaf_284  [color=Gray,shape=rectangle,fontname=Inconsolata,label="str"]
// END RANK literal_280

raw_281 -> leaf_285
leaf_285  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" field matches between nodes unless
we have an error, in which case it could prove helpful for diagnosis.
"]
// END RANK raw_281

prose_194 -> { raw_286}
{rank=same; raw_286}

raw_286 [label="raw"]


// END RANK prose_194

raw_286 -> leaf_287
leaf_287  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Indeed such a check would be a disaster in streams or other sort of
piecewise parse.  Which will require implementation in and of itself, but
in the meantime...
"]
// END RANK raw_286

codeblock_195 -> leaf_288
leaf_288  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Node.gap(left, right)
  assert(left.last, \"no left.last\")
  assert(right.first, \"no right.first\")
  assert(right.last, \"no right.last\")
  assert(left.first, \"no left.first\")
  if left.first >= right.last then
    local left, right = right, left
  elseif left.last > right.first then
    s:halt(\"overlapping regions or str issue\")
  end
  local gap = left
  if gap >= 0 then
    return gap
  else
    s:halt(\"some kind of situation where gap is \" .. tostring(gap))
  end

  return nil
end"]
// END RANK codeblock_195

section_134 -> { header_289 prose_290 prose_291 codeblock_292}
{rank=same; header_289 prose_290 prose_291 codeblock_292}

header_289 [label="4 : node:dotLabel()"]

prose_290 [label="prose"]

prose_291 [label="prose"]

codeblock_292 [label="code block 238-242"]


// END RANK section_134

header_289 -> leaf_293
leaf_293  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** node:dotLabel()"]
// END RANK header_289

prose_290 -> { raw_294}
{rank=same; raw_294}

raw_294 [label="raw"]


// END RANK prose_290

raw_294 -> leaf_295
leaf_295  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This provides a label for dot files.
"]
// END RANK raw_294

prose_291 -> { raw_296 prespace_297 literal_298 raw_299}
{rank=same; raw_296 prespace_297 literal_298 raw_299}

raw_296 [label="raw"]

prespace_297 [label="prespace"]

literal_298 [label="literal"]

raw_299 [label="raw"]


// END RANK prose_291

raw_296 -> leaf_300
leaf_300  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Perhaps over-specialized.  We might prefer a"]
// END RANK raw_296

prespace_297 -> leaf_301
leaf_301  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_297

literal_298 -> leaf_302
leaf_302  [color=Gray,shape=rectangle,fontname=Inconsolata,label="node:label()"]
// END RANK literal_298

raw_299 -> leaf_303
leaf_303  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for generality
and call it when constructing labile trees.
"]
// END RANK raw_299

codeblock_292 -> leaf_304
leaf_304  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Node.dotLabel(node)
  return node.id
end"]
// END RANK codeblock_292

section_135 -> { header_305 prose_306 prose_307 codeblock_308 prose_309}
{rank=same; header_305 prose_306 prose_307 codeblock_308 prose_309}

header_305 [label="4 : node:label()"]

prose_306 [label="prose"]

prose_307 [label="prose"]

codeblock_308 [label="code block 251-255"]

prose_309 [label="prose"]


// END RANK section_135

header_305 -> leaf_310
leaf_310  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** node:label()"]
// END RANK header_305

prose_306 -> { raw_311}
{rank=same; raw_311}

raw_311 [label="raw"]


// END RANK prose_306

raw_311 -> leaf_312
leaf_312  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A synonym, then. But a heritable one, you see.
"]
// END RANK raw_311

prose_307 -> { prespace_313 literal_314 raw_315}
{rank=same; prespace_313 literal_314 raw_315}

prespace_313 [label="prespace"]

literal_314 [label="literal"]

raw_315 [label="raw"]


// END RANK prose_307

prespace_313 -> leaf_316
leaf_316  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_313

literal_314 -> leaf_317
leaf_317  [color=Gray,shape=rectangle,fontname=Inconsolata,label="id"]
// END RANK literal_314

raw_315 -> leaf_318
leaf_318  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" being generic, and genre being all we have at the root:
"]
// END RANK raw_315

codeblock_308 -> leaf_319
leaf_319  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Node.label(node)
   return node.id
end"]
// END RANK codeblock_308

prose_309 -> { raw_320}
{rank=same; raw_320}

raw_320 [label="raw"]


// END RANK prose_309

raw_320 -> leaf_321
leaf_321  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Worth writing twice.

"]
// END RANK raw_320

section_95 -> { header_322 prose_323 prose_324 section_325}
{rank=same; header_322 prose_323 prose_324 section_325}

header_322 [label="3 : Backstops"]

prose_323 [label="prose"]

prose_324 [label="prose"]

section_325 [label="section: 268-281"]


// END RANK section_95

header_322 -> leaf_326
leaf_326  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Backstops"]
// END RANK header_322

prose_323 -> { raw_327}
{rank=same; raw_327}

raw_327 [label="raw"]


// END RANK prose_323

raw_327 -> leaf_328
leaf_328  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The backstops prevent malformed parsing of some key format transitions.
"]
// END RANK raw_327

prose_324 -> { raw_329}
{rank=same; raw_329}

raw_329 [label="raw"]


// END RANK prose_324

raw_329 -> leaf_330
leaf_330  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
They also provide a paradigm for writing more of same for language-specific
cases.

"]
// END RANK raw_329

section_325 -> { header_331 prose_332 codeblock_333}
{rank=same; header_331 prose_332 codeblock_333}

header_331 [label="4 : node:toMarkdown()"]

prose_332 [label="prose"]

codeblock_333 [label="code block 272-280"]


// END RANK section_325

header_331 -> leaf_334
leaf_334  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** node:toMarkdown()"]
// END RANK header_331

prose_332 -> { raw_335}
{rank=same; raw_335}

raw_335 [label="raw"]


// END RANK prose_332

raw_335 -> leaf_336
leaf_336  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This provides a literal string if called on a leaf node and otherwise halts.
"]
// END RANK raw_335

codeblock_333 -> leaf_337
leaf_337  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Node.toMarkdown(node)
  if not node[1] then
    return sub(node.str, node.first, node.last)
  else
    s:halt(\"no toMarkdown for \" .. node.id)
  end
end"]
// END RANK codeblock_333

section_96 -> { header_338 prose_339 codeblock_340}
{rank=same; header_338 prose_339 codeblock_340}

header_338 [label="3 : node:dot(node)"]

prose_339 [label="prose"]

codeblock_340 [label="code block 286-290"]


// END RANK section_96

header_338 -> leaf_341
leaf_341  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** node:dot(node)"]
// END RANK header_338

prose_339 -> { raw_342 prespace_343 literal_344 raw_345}
{rank=same; raw_342 prespace_343 literal_344 raw_345}

raw_342 [label="raw"]

prespace_343 [label="prespace"]

literal_344 [label="literal"]

raw_345 [label="raw"]


// END RANK prose_339

raw_342 -> leaf_346
leaf_346  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Generates a entire"]
// END RANK raw_342

prespace_343 -> leaf_347
leaf_347  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_343

literal_344 -> leaf_348
leaf_348  [color=Gray,shape=rectangle,fontname=Inconsolata,label="dot"]
// END RANK literal_344

raw_345 -> leaf_349
leaf_349  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" node.
"]
// END RANK raw_345

codeblock_340 -> leaf_350
leaf_350  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Node.dot(node)
  return dot.dot(node)
end"]
// END RANK codeblock_340

section_97 -> { header_351 prose_352 prose_353 codeblock_354}
{rank=same; header_351 prose_352 prose_353 codeblock_354}

header_351 [label="3 : node:toValue()"]

prose_352 [label="prose"]

prose_353 [label="prose"]

codeblock_354 [label="code block 299-310"]


// END RANK section_97

header_351 -> leaf_355
leaf_355  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** node:toValue()"]
// END RANK header_351

prose_352 -> { raw_356}
{rank=same; raw_356}

raw_356 [label="raw"]


// END RANK prose_352

raw_356 -> leaf_357
leaf_357  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Sometimes you want the value of a Node.
"]
// END RANK raw_356

prose_353 -> { raw_358}
{rank=same; raw_358}

raw_358 [label="raw"]


// END RANK prose_353

raw_358 -> leaf_359
leaf_359  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
So you call this:
"]
// END RANK raw_358

codeblock_354 -> leaf_360
leaf_360  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Node.toValue(node)
  if node.__VALUE then
    return node.__VALUE
  end
  if node.str then
    return node.str:sub(node.first,node.last)
  else
    s:halt(\"no str on node \" .. node.id)
  end
end"]
// END RANK codeblock_354

section_98 -> { header_361 prose_362 section_363 section_364}
{rank=same; header_361 prose_362 section_363 section_364}

header_361 [label="3 : Iterators"]

prose_362 [label="prose"]

section_363 [label="section: 318-339"]

section_364 [label="section: 340-361"]


// END RANK section_98

header_361 -> leaf_365
leaf_365  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Iterators"]
// END RANK header_361

prose_362 -> { raw_366}
{rank=same; raw_366}

raw_366 [label="raw"]


// END RANK prose_362

raw_366 -> leaf_367
leaf_367  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Traversal may be done several ways.

"]
// END RANK raw_366

section_363 -> { header_368 prose_369 codeblock_370}
{rank=same; header_368 prose_369 codeblock_370}

header_368 [label="4 : Node.walkPost"]

prose_369 [label="prose"]

codeblock_370 [label="code block 322-337"]


// END RANK section_363

header_368 -> leaf_371
leaf_371  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Node.walkPost"]
// END RANK header_368

prose_369 -> { raw_372}
{rank=same; raw_372}

raw_372 [label="raw"]


// END RANK prose_369

raw_372 -> leaf_373
leaf_373  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Depth-first iterator, postfix
"]
// END RANK raw_372

codeblock_370 -> leaf_374
leaf_374  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Node.walkPost(node)
    local function traverse(ast)
        if not ast.isNode then return nil end

        for _, v in ipairs(ast) do
            if type(v) == 'table' and v.isNode then
              traverse(v)
            end
        end
        yield(ast)
    end

    return wrap(function() traverse(node) end)
end"]
// END RANK codeblock_370

section_364 -> { header_375 prose_376 codeblock_377}
{rank=same; header_375 prose_376 codeblock_377}

header_375 [label="4 : Node.walk"]

prose_376 [label="prose"]

codeblock_377 [label="code block 344-359"]


// END RANK section_364

header_375 -> leaf_378
leaf_378  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Node.walk"]
// END RANK header_375

prose_376 -> { raw_379}
{rank=same; raw_379}

raw_379 [label="raw"]


// END RANK prose_376

raw_379 -> leaf_380
leaf_380  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Presearch iterator.  This is the default.
"]
// END RANK raw_379

codeblock_377 -> leaf_381
leaf_381  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Node.walk(node)
  local function traverse(ast)
    if not ast.isNode then return nil end
    yield(ast)
    for _, v in ipairs(ast) do
      if type(v) == 'table' and v.isNode then
        traverse(v)
      end
    end
  end

  return wrap(function() traverse(node) end)
end
"]
// END RANK codeblock_377

section_99 -> { header_382 prose_383 section_384 section_385 section_386 section_387 section_388}
{rank=same; header_382 prose_383 section_384 section_385 section_386 section_387 section_388}

header_382 [label="3 : Selection"]

prose_383 [label="prose"]

section_384 [label="section: 367-406"]

section_385 [label="section: 407-425"]

section_386 [label="section: 426-475"]

section_387 [label="section: 476-518"]

section_388 [label="section: 519-535"]


// END RANK section_99

header_382 -> leaf_389
leaf_389  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Selection"]
// END RANK header_382

prose_383 -> { raw_390}
{rank=same; raw_390}

raw_390 [label="raw"]


// END RANK prose_383

raw_390 -> leaf_391
leaf_391  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

We are frequently in search of a subset of Nodes:

"]
// END RANK raw_390

section_384 -> { header_392 prose_393 codeblock_394}
{rank=same; header_392 prose_393 codeblock_394}

header_392 [label="4 : Node.select(node, pred)"]

prose_393 [label="prose"]

codeblock_394 [label="code block 373-404"]


// END RANK section_384

header_392 -> leaf_395
leaf_395  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Node.select(node, pred)"]
// END RANK header_392

prose_393 -> { raw_396 prespace_397 literal_398 raw_399 prespace_400 literal_401 raw_402}
{rank=same; raw_396 prespace_397 literal_398 raw_399 prespace_400 literal_401 raw_402}

raw_396 [label="raw"]

prespace_397 [label="prespace"]

literal_398 [label="literal"]

raw_399 [label="raw"]

prespace_400 [label="prespace"]

literal_401 [label="literal"]

raw_402 [label="raw"]


// END RANK prose_393

raw_396 -> leaf_403
leaf_403  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Takes the Node and walks it, yielding the Nodes which match the predicate."]
// END RANK raw_396

prespace_397 -> leaf_404
leaf_404  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_397

literal_398 -> leaf_405
leaf_405  [color=Gray,shape=rectangle,fontname=Inconsolata,label="pred"]
// END RANK literal_398

raw_399 -> leaf_406
leaf_406  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is either a string, which matches to"]
// END RANK raw_399

prespace_400 -> leaf_407
leaf_407  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_400

literal_401 -> leaf_408
leaf_408  [color=Gray,shape=rectangle,fontname=Inconsolata,label="id"]
// END RANK literal_401

raw_402 -> leaf_409
leaf_409  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", or a function, which takes
a Node and returns true or false on some premise.
"]
// END RANK raw_402

codeblock_394 -> leaf_410
leaf_410  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Node.select(node, pred)
   local function qualifies(node, pred)
      if type(pred) == 'string' then
         if type(node) == 'table'
          and node.id and node.id == pred then
            return true
         else
            return false
         end
      elseif type(pred) == 'function' then
         return pred(node)
      else
         s:halt(\"cannot select on predicate of type \" .. type(pred))
      end
   end

   local function traverse(ast)
      -- breadth first
      if qualifies(ast, pred) then
         yield(ast)
      end
      if ast.isNode then
         for _, v in ipairs(ast) do
            traverse(v)
         end
      end
   end

   return wrap(function() traverse(node) end)
end"]
// END RANK codeblock_394

section_385 -> { header_411 prose_412 codeblock_413}
{rank=same; header_411 prose_412 codeblock_413}

header_411 [label="4 : Node.tokens(node)"]

prose_412 [label="prose"]

codeblock_413 [label="code block 411-423"]


// END RANK section_385

header_411 -> leaf_414
leaf_414  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Node.tokens(node)"]
// END RANK header_411

prose_412 -> { raw_415}
{rank=same; raw_415}

raw_415 [label="raw"]


// END RANK prose_412

raw_415 -> leaf_416
leaf_416  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Iterator returning all captured values as strings.
"]
// END RANK raw_415

codeblock_413 -> leaf_417
leaf_417  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Node.tokens(node)
  local function traverse(ast)
    for node in Node.walk(ast) do
      if not node[1] then
        yield(node:toValue())
      end
    end
  end

  return wrap(function() traverse(node) end)
end"]
// END RANK codeblock_413

section_386 -> { header_418 prose_419 prose_420 prose_421 codeblock_422}
{rank=same; header_418 prose_419 prose_420 prose_421 codeblock_422}

header_418 [label="4 : Node.lines(node)"]

prose_419 [label="prose"]

prose_420 [label="prose"]

prose_421 [label="prose"]

codeblock_422 [label="code block 436-473"]


// END RANK section_386

header_418 -> leaf_423
leaf_423  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Node.lines(node)"]
// END RANK header_418

prose_419 -> { raw_424 prespace_425 literal_426 raw_427}
{rank=same; raw_424 prespace_425 literal_426 raw_427}

raw_424 [label="raw"]

prespace_425 [label="prespace"]

literal_426 [label="literal"]

raw_427 [label="raw"]


// END RANK prose_419

raw_424 -> leaf_428
leaf_428  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A memoized iterator returning"]
// END RANK raw_424

prespace_425 -> leaf_429
leaf_429  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_425

literal_426 -> leaf_430
leaf_430  [color=Gray,shape=rectangle,fontname=Inconsolata,label="str"]
// END RANK literal_426

raw_427 -> leaf_431
leaf_431  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" one line at a time.
"]
// END RANK raw_427

prose_420 -> { raw_432}
{rank=same; raw_432}

raw_432 [label="raw"]


// END RANK prose_420

raw_432 -> leaf_433
leaf_433  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Newlines are not included.
"]
// END RANK raw_432

prose_421 -> { raw_434 prespace_435 literal_436 raw_437 prespace_438 literal_439 raw_440}
{rank=same; raw_434 prespace_435 literal_436 raw_437 prespace_438 literal_439 raw_440}

raw_434 [label="raw"]

prespace_435 [label="prespace"]

literal_436 [label="literal"]

raw_437 [label="raw"]

prespace_438 [label="prespace"]

literal_439 [label="literal"]

raw_440 [label="raw"]


// END RANK prose_421

raw_434 -> leaf_441
leaf_441  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In addition, the first"]
// END RANK raw_434

prespace_435 -> leaf_442
leaf_442  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_435

literal_436 -> leaf_443
leaf_443  [color=Gray,shape=rectangle,fontname=Inconsolata,label="node:lines()"]
// END RANK literal_436

raw_437 -> leaf_444
leaf_444  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" traversal builds up
a source map subsequently used by"]
// END RANK raw_437

prespace_438 -> leaf_445
leaf_445  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_438

literal_439 -> leaf_446
leaf_446  [color=Gray,shape=rectangle,fontname=Inconsolata,label="node:atLine(pos)"]
// END RANK literal_439

raw_440 -> leaf_447
leaf_447  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" to
return the line and column of a given position.
"]
// END RANK raw_440

codeblock_422 -> leaf_448
leaf_448  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Node.lines(node)
  local function yieldLines(node, linum)
     for _, str in ipairs(node.__lines) do
        yield(str)
      end
  end

  if node.__lines then
     return wrap(function ()
                    yieldLines(node)
                 end)
  else
     node.__lines = {}
  end

  local function buildLines(str)
      if str == nil then
        return nil
      end
      local rest = \"\"
      local first, last = find(str, \"\\n\")
      if first == nil then
        return nil
      else
        local line = sub(str, 1, first - 1) -- no newline
        rest       = sub(str, last + 1)    -- skip newline
        node.__lines[#node.__lines + 1] = line
        yield(line)
      end
      buildLines(rest)
  end

  return wrap(function ()
            buildLines(node.str)
         end)
end"]
// END RANK codeblock_422

section_387 -> { header_449 prose_450 prose_451 prose_452 prose_453 prose_454 codeblock_455}
{rank=same; header_449 prose_450 prose_451 prose_452 prose_453 prose_454 codeblock_455}

header_449 [label="4 : Node.linePos(node, position)"]

prose_450 [label="prose"]

prose_451 [label="prose"]

prose_452 [label="prose"]

prose_453 [label="prose"]

prose_454 [label="prose"]

codeblock_455 [label="code block 491-516"]


// END RANK section_387

header_449 -> leaf_456
leaf_456  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Node.linePos(node, position)"]
// END RANK header_449

prose_450 -> { raw_457}
{rank=same; raw_457}

raw_457 [label="raw"]


// END RANK prose_450

raw_457 -> leaf_458
leaf_458  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Returns the line and column given a position.
"]
// END RANK raw_457

prose_451 -> { raw_459}
{rank=same; raw_459}

raw_459 [label="raw"]


// END RANK prose_451

raw_459 -> leaf_460
leaf_460  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This currently builds up the line array.
"]
// END RANK raw_459

prose_452 -> { raw_461}
{rank=same; raw_461}

raw_461 [label="raw"]


// END RANK prose_452

raw_461 -> leaf_462
leaf_462  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- [ ]  #todo  Optimal Node.linePos().
"]
// END RANK raw_461

prose_453 -> { raw_463 prespace_464 literal_465 raw_466}
{rank=same; raw_463 prespace_464 literal_465 raw_466}

raw_463 [label="raw"]

prespace_464 [label="prespace"]

literal_465 [label="literal"]

raw_466 [label="raw"]


// END RANK prose_453

raw_463 -> leaf_467
leaf_467  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
       This needs to be more optimal; it should use"]
// END RANK raw_463

prespace_464 -> leaf_468
leaf_468  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_464

literal_465 -> leaf_469
leaf_469  [color=Gray,shape=rectangle,fontname=Inconsolata,label="string.find"]
// END RANK literal_465

raw_466 -> leaf_470
leaf_470  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" to
       build up a memoized collection of start and end points and
       never break up the string directly.
"]
// END RANK raw_466

prose_454 -> { raw_471}
{rank=same; raw_471}

raw_471 [label="raw"]


// END RANK prose_454

raw_471 -> leaf_472
leaf_472  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
       At least we're only paying the price once, but Node is supposed
       to be lazy about slicing strings, and this is eager.
"]
// END RANK raw_471

codeblock_455 -> leaf_473
leaf_473  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Node.linePos(node, position)
   if not node.__lines then
      for _ in node:lines() do
        -- nothing, this generates the line map
      end
   end
   local offset = 0
   local position = position
   local linum = nil
   for i, v in ipairs(node.__lines) do
       linum = i
       local len = #v + 1 -- for nl
       local offset = offset + len
       if offset > position then
          return linum, position
       elseif offset == position then
          return linum, len
       else
          position = position - #v - 1
       end
   end
   -- this position is off the end of the string
   return nil, \"exceeds #str\", - offset  -- I think that's the best 3rd value?
end"]
// END RANK codeblock_455

section_388 -> { header_474 prose_475 prose_476 codeblock_477}
{rank=same; header_474 prose_475 prose_476 codeblock_477}

header_474 [label="4 : Node.lastLeaf(node)"]

prose_475 [label="prose"]

prose_476 [label="prose"]

codeblock_477 [label="code block 525-533"]


// END RANK section_388

header_474 -> leaf_478
leaf_478  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Node.lastLeaf(node)"]
// END RANK header_474

prose_475 -> { raw_479}
{rank=same; raw_479}

raw_479 [label="raw"]


// END RANK prose_475

raw_479 -> leaf_480
leaf_480  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Returns the last leaf of the node.
"]
// END RANK raw_479

prose_476 -> { raw_481}
{rank=same; raw_481}

raw_481 [label="raw"]


// END RANK prose_476

raw_481 -> leaf_482
leaf_482  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Useful to check for terminal errors, for stop-on-error parsing.
"]
// END RANK raw_481

codeblock_477 -> leaf_483
leaf_483  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Node.lastLeaf(node)
  if #node == 0 then
    return node
  else
    return Node.lastLeaf(node[#node])
  end
end"]
// END RANK codeblock_477

section_100 -> { header_484 prose_485 prose_486 codeblock_487}
{rank=same; header_484 prose_485 prose_486 codeblock_487}

header_484 [label="3 : Collectors"]

prose_485 [label="prose"]

prose_486 [label="prose"]

codeblock_487 [label="code block 543-552"]


// END RANK section_100

header_484 -> leaf_488
leaf_488  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Collectors"]
// END RANK header_484

prose_485 -> { raw_489}
{rank=same; raw_489}

raw_489 [label="raw"]


// END RANK prose_485

raw_489 -> leaf_490
leaf_490  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

These return an array of all results.
"]
// END RANK raw_489

prose_486 -> { raw_491}
{rank=same; raw_491}

raw_491 [label="raw"]


// END RANK prose_486

raw_491 -> leaf_492
leaf_492  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- [ ] #todo  Add a Forest class to provide the iterator interface for
             the return arrays of this class.
"]
// END RANK raw_491

codeblock_487 -> leaf_493
leaf_493  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Node.gather(node, pred)
  local gathered = {}
  for ast in node:select(pred) do
    gathered[#gathered + 1] = ast
  end

  return gathered
end"]
// END RANK codeblock_487

section_101 -> { header_494 prose_495 codeblock_496}
{rank=same; header_494 prose_495 codeblock_496}

header_494 [label="3 : Validation"]

prose_495 [label="prose"]

codeblock_496 [label="code block 560-584"]


// END RANK section_101

header_494 -> leaf_497
leaf_497  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Validation"]
// END RANK header_494

prose_495 -> { raw_498}
{rank=same; raw_498}

raw_498 [label="raw"]


// END RANK prose_495

raw_498 -> leaf_499
leaf_499  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This checks that a Node, including all its children, meets the social
contract of Node behavior.
"]
// END RANK raw_498

codeblock_496 -> leaf_500
leaf_500  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
function Node.isValid(node)
  assert(node.isNode == Node, \"isNode flag must be Node metatable, id: \"
         .. node.id .. \" \" .. tostring(node))
  assert(node.first, \"node must have first\")
  assert(type(node.first) == \"number\", \"node.first must be of type number\")
  assert(node.last, \"node must have last\")
  assert(type(node.last) == \"number\", \"node.last must be of type number\")
  assert(node.str, \"node must have str\")
  assert(type(node.str) == \"string\"
         or node.str.isPhrase, \"str must be string or phrase\")
  assert(node.parent and node.parent.isNode == Node, \"node must have parent\")
  assert(type(node:span()) == \"string\", \"span() must yield string\")
  return true
end

function Node.validate(node)
  for twig in node:walk() do
    twig:isValid()
  end
  return true
end
"]
// END RANK codeblock_496

section_102 -> { header_501 prose_502 section_503 section_504}
{rank=same; header_501 prose_502 section_503 section_504}

header_501 [label="3 : Subclassing and construction"]

prose_502 [label="prose"]

section_503 [label="section: 593-612"]

section_504 [label="section: 613-624"]


// END RANK section_102

header_501 -> leaf_505
leaf_505  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Subclassing and construction"]
// END RANK header_501

prose_502 -> { raw_506 prespace_507 literal_508 raw_509}
{rank=same; raw_506 prespace_507 literal_508 raw_509}

raw_506 [label="raw"]

prespace_507 [label="prespace"]

literal_508 [label="literal"]

raw_509 [label="raw"]


// END RANK prose_502

raw_506 -> leaf_510
leaf_510  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

These methods are used to construct specific Nodes, whether at"]
// END RANK raw_506

prespace_507 -> leaf_511
leaf_511  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_507

literal_508 -> leaf_512
leaf_512  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_508

raw_509 -> leaf_513
leaf_513  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or
within a given Grammar.

"]
// END RANK raw_509

section_503 -> { header_514 prose_515 prose_516 codeblock_517 prose_518}
{rank=same; header_514 prose_515 prose_516 codeblock_517 prose_518}

header_514 [label="4 : Node:inherit()"]

prose_515 [label="prose"]

prose_516 [label="prose"]

codeblock_517 [label="code block 600-608"]

prose_518 [label="prose"]


// END RANK section_503

header_514 -> leaf_519
leaf_519  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Node:inherit()"]
// END RANK header_514

prose_515 -> { raw_520 prespace_521 literal_522 raw_523 prespace_524 literal_525 raw_526 prespace_527 literal_528 raw_529}
{rank=same; raw_520 prespace_521 literal_522 raw_523 prespace_524 literal_525 raw_526 prespace_527 literal_528 raw_529}

raw_520 [label="raw"]

prespace_521 [label="prespace"]

literal_522 [label="literal"]

raw_523 [label="raw"]

prespace_524 [label="prespace"]

literal_525 [label="literal"]

raw_526 [label="raw"]

prespace_527 [label="prespace"]

literal_528 [label="literal"]

raw_529 [label="raw"]


// END RANK prose_515

raw_520 -> leaf_530
leaf_530  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This does the familiar single-inheritance with inlined"]
// END RANK raw_520

prespace_521 -> leaf_531
leaf_531  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_521

literal_522 -> leaf_532
leaf_532  [color=Gray,shape=rectangle,fontname=Inconsolata,label="__index"]
// END RANK literal_522

raw_523 -> leaf_533
leaf_533  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ing, returning
both"]
// END RANK raw_523

prespace_524 -> leaf_534
leaf_534  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_524

literal_525 -> leaf_535
leaf_535  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Meta"]
// END RANK literal_525

raw_526 -> leaf_536
leaf_536  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_526

prespace_527 -> leaf_537
leaf_537  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_527

literal_528 -> leaf_538
leaf_538  [color=Gray,shape=rectangle,fontname=Inconsolata,label="meta"]
// END RANK literal_528

raw_529 -> leaf_539
leaf_539  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_529

prose_516 -> { raw_540}
{rank=same; raw_540}

raw_540 [label="raw"]


// END RANK prose_516

raw_540 -> leaf_541
leaf_541  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's easier to read than to describe:
"]
// END RANK raw_540

codeblock_517 -> leaf_542
leaf_542  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Node.inherit(node)
  local Meta = setmeta({}, node)
  Meta.__index = Meta
  local meta = setmeta({}, Meta)
  meta.__index = meta
  return Meta, meta
end"]
// END RANK codeblock_517

prose_518 -> { raw_543 link_544 raw_545}
{rank=same; raw_543 link_544 raw_545}

raw_543 [label="raw"]

link_544 [label="link"]

raw_545 [label="raw"]


// END RANK prose_518

raw_543 -> leaf_546
leaf_546  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
And best understood on the "]
// END RANK raw_543

link_544 -> { anchortext_547 url_548}
{rank=same; anchortext_547 url_548}

anchortext_547 [label="anchortext"]

url_548 [label="url"]


// END RANK link_544

anchortext_547 -> leaf_549
leaf_549  [color=Gray,shape=rectangle,fontname=Inconsolata,label="consumer side"]
// END RANK anchortext_547

url_548 -> leaf_550
leaf_550  [color=Gray,shape=rectangle,fontname=Inconsolata,label="hts://~/grammar.orb#tk"]
// END RANK url_548

raw_545 -> leaf_551
leaf_551  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".

"]
// END RANK raw_545

section_504 -> { header_552 prose_553 codeblock_554}
{rank=same; header_552 prose_553 codeblock_554}

header_552 [label="4 : Node:export(mod, constructor)"]

prose_553 [label="prose"]

codeblock_554 [label="code block 617-622"]


// END RANK section_504

header_552 -> leaf_555
leaf_555  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Node:export(mod, constructor)"]
// END RANK header_552

prose_553 -> { raw_556}
{rank=same; raw_556}

raw_556 [label="raw"]


// END RANK prose_553

raw_556 -> leaf_557
leaf_557  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This prepares a Node for incorporation into a Grammar.
"]
// END RANK raw_556

codeblock_554 -> leaf_558
leaf_558  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Node.export(_, mod, constructor)
  mod.__call = constructor
  return setmeta({}, mod)
end"]
// END RANK codeblock_554

section_9 -> { header_559 prose_560 prose_561 prose_562 section_563 section_564}
{rank=same; header_559 prose_560 prose_561 prose_562 section_563 section_564}

header_559 [label="2 : Node Instances"]

prose_560 [label="prose"]

prose_561 [label="prose"]

prose_562 [label="prose"]

section_563 [label="section: 636-648"]

section_564 [label="section: 649-658"]


// END RANK section_9

header_559 -> leaf_565
leaf_565  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Node Instances"]
// END RANK header_559

prose_560 -> { raw_566}
{rank=same; raw_566}

raw_566 [label="raw"]


// END RANK prose_560

raw_566 -> leaf_567
leaf_567  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  To be a Node, indexed elements of the Array portion must also be
Nodes.
"]
// END RANK raw_566

prose_561 -> { raw_568}
{rank=same; raw_568}

raw_568 [label="raw"]


// END RANK prose_561

raw_568 -> leaf_569
leaf_569  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If there are no children of the Node, it is considered to be a leaf node.
"]
// END RANK raw_568

prose_562 -> { raw_570}
{rank=same; raw_570}

raw_570 [label="raw"]


// END RANK prose_562

raw_570 -> leaf_571
leaf_571  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Most of the Node library will fail to halt, and probably blow stack, if
cyclic Node graphs are made.  The Grammar class will not do this to you.

"]
// END RANK raw_570

section_563 -> { header_572 prose_573 prose_574}
{rank=same; header_572 prose_573 prose_574}

header_572 [label="3 : Fields"]

prose_573 [label="prose"]

prose_574 [label="prose"]


// END RANK section_563

header_572 -> leaf_575
leaf_575  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Fields"]
// END RANK header_572

prose_573 -> { raw_576}
{rank=same; raw_576}

raw_576 [label="raw"]


// END RANK prose_573

raw_576 -> leaf_577
leaf_577  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  There are invariant fields a Node is also expected to have, they are:
"]
// END RANK raw_576

prose_574 -> { raw_578 prespace_579 literal_580 raw_581 prespace_582 literal_583 raw_584 prespace_585 literal_586 raw_587 prespace_588 literal_589 raw_590}
{rank=same; raw_578 prespace_579 literal_580 raw_581 prespace_582 literal_583 raw_584 prespace_585 literal_586 raw_587 prespace_588 literal_589 raw_590}

raw_578 [label="raw"]

prespace_579 [label="prespace"]

literal_580 [label="literal"]

raw_581 [label="raw"]

prespace_582 [label="prespace"]

literal_583 [label="literal"]

raw_584 [label="raw"]

prespace_585 [label="prespace"]

literal_586 [label="literal"]

raw_587 [label="raw"]

prespace_588 [label="prespace"]

literal_589 [label="literal"]

raw_590 [label="raw"]


// END RANK prose_574

raw_578 -> leaf_591
leaf_591  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - first    :  Index into"]
// END RANK raw_578

prespace_579 -> leaf_592
leaf_592  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_579

literal_580 -> leaf_593
leaf_593  [color=Gray,shape=rectangle,fontname=Inconsolata,label="str"]
// END RANK literal_580

raw_581 -> leaf_594
leaf_594  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" which begins the span.
  - last     :  Index into"]
// END RANK raw_581

prespace_582 -> leaf_595
leaf_595  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_582

literal_583 -> leaf_596
leaf_596  [color=Gray,shape=rectangle,fontname=Inconsolata,label="str"]
// END RANK literal_583

raw_584 -> leaf_597
leaf_597  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" which ends the span.
  - str      :  The string of which the Node spans part or the whole, or
                a Phrase of same.
  - isPhrase :  Equals"]
// END RANK raw_584

prespace_585 -> leaf_598
leaf_598  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_585

literal_586 -> leaf_599
leaf_599  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Phrase"]
// END RANK literal_586

raw_587 -> leaf_600
leaf_600  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" iff str is a Phrase.
  - parent   :  A Node, which may be a self-reference for a root node.
  - isNode   :  This equals to"]
// END RANK raw_587

prespace_588 -> leaf_601
leaf_601  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_588

literal_589 -> leaf_602
leaf_602  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Node"]
// END RANK literal_589

raw_590 -> leaf_603
leaf_603  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".

"]
// END RANK raw_590

section_564 -> { header_604 prose_605 codeblock_606}
{rank=same; header_604 prose_605 codeblock_606}

header_604 [label="3 : Other fields"]

prose_605 [label="prose"]

codeblock_606 [label="code block 653-655"]


// END RANK section_564

header_604 -> leaf_607
leaf_607  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Other fields"]
// END RANK header_604

prose_605 -> { raw_608}
{rank=same; raw_608}

raw_608 [label="raw"]


// END RANK prose_605

raw_608 -> leaf_609
leaf_609  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  In principle, anything at all.
"]
// END RANK raw_608

codeblock_606 -> leaf_610
leaf_610  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return Node"]
// END RANK codeblock_606


}
