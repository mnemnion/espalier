digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 510"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-451"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 section_5 section_6 section_7 section_8}
{rank=same; header_2 prose_3 prose_4 section_5 section_6 section_7 section_8}

header_2 [label="1 : Grammar Module"]

prose_3 [label="prose"]

prose_4 [label="prose"]

section_5 [label="section: 9-26"]

section_6 [label="section: 37-163"]

section_7 [label="section: 353-430"]

section_8 [label="section: 452-510"]


// END RANK section_1

header_2 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Grammar Module"]
// END RANK header_2

prose_3 -> { raw_10}
{rank=same; raw_10}

raw_10 [label="raw"]


// END RANK prose_3

raw_10 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


The grammar module returns one function, which generates a grammar.
"]
// END RANK raw_10

prose_4 -> { raw_12}
{rank=same; raw_12}

raw_12 [label="raw"]


// END RANK prose_4

raw_12 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This document is a good candidate for a more strictly literate approach.

"]
// END RANK raw_12

section_5 -> { header_14 prose_15 prose_16 prose_17 prose_18 prose_19 prose_20 section_21}
{rank=same; header_14 prose_15 prose_16 prose_17 prose_18 prose_19 prose_20 section_21}

header_14 [label="2 : Introduction"]

prose_15 [label="prose"]

prose_16 [label="prose"]

prose_17 [label="prose"]

prose_18 [label="prose"]

prose_19 [label="prose"]

prose_20 [label="prose"]

section_21 [label="section: 27-36"]


// END RANK section_5

header_14 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Introduction"]
// END RANK header_14

prose_15 -> { raw_23 prespace_24 bold_25 raw_26}
{rank=same; raw_23 prespace_24 bold_25 raw_26}

raw_23 [label="raw"]

prespace_24 [label="prespace"]

bold_25 [label="bold"]

raw_26 [label="raw"]


// END RANK prose_15

raw_23 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This module is in a very real sense a"]
// END RANK raw_23

prespace_24 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_24

bold_25 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="duet"]
// END RANK bold_25

raw_26 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_26

prose_16 -> { raw_31 prespace_32 literal_33 raw_34}
{rank=same; raw_31 prespace_32 literal_33 raw_34}

raw_31 [label="raw"]

prespace_32 [label="prespace"]

literal_33 [label="literal"]

raw_34 [label="raw"]


// END RANK prose_16

raw_31 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It is an adaptation, refinement, extension, of Phillipe Janda's work,"]
// END RANK raw_31

prespace_32 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_32

literal_33 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="luaepnf"]
// END RANK literal_33

raw_34 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label=":
"]
// END RANK raw_34

prose_17 -> { prespace_39 bold_40 raw_41}
{rank=same; prespace_39 bold_40 raw_41}

prespace_39 [label="prespace"]

bold_40 [label="bold"]

raw_41 [label="raw"]


// END RANK prose_17

prespace_39 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_39

bold_40 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="[[luaepnf][http://siffiejoe.github.io/lua-luaepnf/]]"]
// END RANK bold_40

raw_41 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_41

prose_18 -> { raw_45 prespace_46 literal_47 raw_48}
{rank=same; raw_45 prespace_46 literal_47 raw_48}

raw_45 [label="raw"]

prespace_46 [label="prespace"]

literal_47 [label="literal"]

raw_48 [label="raw"]


// END RANK prose_18

raw_45 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
While"]
// END RANK raw_45

prespace_46 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_46

literal_47 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_47

raw_48 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is based on a repl by Tim Caswell, that is a case of taking a
sketch and painting a picture.
"]
// END RANK raw_48

prose_19 -> { raw_53}
{rank=same; raw_53}

raw_53 [label="raw"]


// END RANK prose_19

raw_53 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Many difficult aspects of this algorithm are found directly in the source
material upon which this is based.
"]
// END RANK raw_53

prose_20 -> { raw_55}
{rank=same; raw_55}

raw_55 [label="raw"]


// END RANK prose_20

raw_55 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Don Phillipe has my thanks, and my fervent hope that he enjoys what follows.

"]
// END RANK raw_55

section_21 -> { header_57 prose_58 prose_59 prose_60}
{rank=same; header_57 prose_58 prose_59 prose_60}

header_57 [label="4 : Aside to the Knuthian camp"]

prose_58 [label="prose"]

prose_59 [label="prose"]

prose_60 [label="prose"]


// END RANK section_21

header_57 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Aside to the Knuthian camp"]
// END RANK header_57

prose_58 -> { raw_62}
{rank=same; raw_62}

raw_62 [label="raw"]


// END RANK prose_58

raw_62 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

I have written a semi-literate boostrap.
"]
// END RANK raw_62

prose_59 -> { raw_64}
{rank=same; raw_64}

raw_64 [label="raw"]


// END RANK prose_59

raw_64 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I make no apology for this.  Cleaning what follows into a literate order is
a tractable problem.
"]
// END RANK raw_64

prose_60 -> { raw_66}
{rank=same; raw_66}

raw_66 [label="raw"]


// END RANK prose_60

raw_66 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In the meantime, let us build a Grammar from parts.

"]
// END RANK raw_66

section_6 -> { header_68 prose_69 prose_70 prose_71 section_72 section_73 section_74 section_75}
{rank=same; header_68 prose_69 prose_70 prose_71 section_72 section_73 section_74 section_75}

header_68 [label="2 : Return Parameters of the Grammar Function"]

prose_69 [label="prose"]

prose_70 [label="prose"]

prose_71 [label="prose"]

section_72 [label="section: 48-76"]

section_73 [label="section: 77-101"]

section_74 [label="section: 102-142"]

section_75 [label="section: 164-218"]


// END RANK section_6

header_68 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Return Parameters of the Grammar Function"]
// END RANK header_68

prose_69 -> { raw_77}
{rank=same; raw_77}

raw_77 [label="raw"]


// END RANK prose_69

raw_77 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This function takes two parameters, namely:
"]
// END RANK raw_77

prose_70 -> { raw_79 prespace_80 literal_81 raw_82}
{rank=same; raw_79 prespace_80 literal_81 raw_82}

raw_79 [label="raw"]

prespace_80 [label="prespace"]

literal_81 [label="literal"]

raw_82 [label="raw"]


// END RANK prose_70

raw_79 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - grammar_template :  A function with one parameter, which must be"]
// END RANK raw_79

prespace_80 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_80

literal_81 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="_ENV"]
// END RANK literal_81

raw_82 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
  - metas :  A map with keys of string and values of Node subclass
             constructors.
"]
// END RANK raw_82

prose_71 -> { raw_87}
{rank=same; raw_87}

raw_87 [label="raw"]


// END RANK prose_71

raw_87 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Both of these are reasonably complex.

"]
// END RANK raw_87

section_72 -> { header_89 prose_90 prose_91 prose_92 prose_93 prose_94 prose_95 prose_96 prose_97}
{rank=same; header_89 prose_90 prose_91 prose_92 prose_93 prose_94 prose_95 prose_96 prose_97}

header_89 [label="3 : grammar_template"]

prose_90 [label="prose"]

prose_91 [label="prose"]

prose_92 [label="prose"]

prose_93 [label="prose"]

prose_94 [label="prose"]

prose_95 [label="prose"]

prose_96 [label="prose"]

prose_97 [label="prose"]


// END RANK section_72

header_89 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** grammar_template"]
// END RANK header_89

prose_90 -> { raw_99 prespace_100 literal_101 raw_102 prespace_103 literal_104 raw_105}
{rank=same; raw_99 prespace_100 literal_101 raw_102 prespace_103 literal_104 raw_105}

raw_99 [label="raw"]

prespace_100 [label="prespace"]

literal_101 [label="literal"]

raw_102 [label="raw"]

prespace_103 [label="prespace"]

literal_104 [label="literal"]

raw_105 [label="raw"]


// END RANK prose_90

raw_99 -> leaf_106
leaf_106  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The internal function"]
// END RANK raw_99

prespace_100 -> leaf_107
leaf_107  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_100

literal_101 -> leaf_108
leaf_108  [color=Gray,shape=rectangle,fontname=Inconsolata,label="define"]
// END RANK literal_101

raw_102 -> leaf_109
leaf_109  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" creates a custom environment variable, neatly
sidestepping Lua's pedantic insistance on prepending"]
// END RANK raw_102

prespace_103 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_103

literal_104 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local"]
// END RANK literal_104

raw_105 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" to all values of
significance.
"]
// END RANK raw_105

prose_91 -> { raw_113}
{rank=same; raw_113}

raw_113 [label="raw"]


// END RANK prose_91

raw_113 -> leaf_114
leaf_114  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
More relevantly, it constructs a full grammar, which will return a table of
type Node.
"]
// END RANK raw_113

prose_92 -> { raw_115 prespace_116 literal_117 raw_118}
{rank=same; raw_115 prespace_116 literal_117 raw_118}

raw_115 [label="raw"]

prespace_116 [label="prespace"]

literal_117 [label="literal"]

raw_118 [label="raw"]


// END RANK prose_92

raw_115 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If you stick to"]
// END RANK raw_115

prespace_116 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_116

literal_117 -> leaf_121
leaf_121  [color=Gray,shape=rectangle,fontname=Inconsolata,label="lpeg"]
// END RANK literal_117

raw_118 -> leaf_122
leaf_122  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" patterns, as you should, all array values will be of
Node.  Captures will interpolate various other sorts of Lua values, which will
induce halting in some places and silently corrupt execution in others.
"]
// END RANK raw_118

prose_93 -> { raw_123 link_124 raw_125}
{rank=same; raw_123 link_124 raw_125}

raw_123 [label="raw"]

link_124 [label="link"]

raw_125 [label="raw"]


// END RANK prose_93

raw_123 -> leaf_126
leaf_126  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The "]
// END RANK raw_123

link_124 -> { anchortext_127 url_128}
{rank=same; anchortext_127 url_128}

anchortext_127 [label="anchortext"]

url_128 [label="url"]


// END RANK link_124

anchortext_127 -> leaf_129
leaf_129  [color=Gray,shape=rectangle,fontname=Inconsolata,label="elpatt module"]
// END RANK anchortext_127

url_128 -> leaf_130
leaf_130  [color=Gray,shape=rectangle,fontname=Inconsolata,label="hts://~/elpatt.orb"]
// END RANK url_128

raw_125 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is intended to provide those
patterns which are allowed in Grammars, while expanding the scope of some
favorites to properly respect utf-8 and otherwise behave.
"]
// END RANK raw_125

prose_94 -> { raw_132 link_133 raw_134}
{rank=same; raw_132 link_133 raw_134}

raw_132 [label="raw"]

link_133 [label="link"]

raw_134 [label="raw"]


// END RANK prose_94

raw_132 -> leaf_135
leaf_135  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There are examples of the format in the "]
// END RANK raw_132

link_133 -> { anchortext_136 url_137}
{rank=same; anchortext_136 url_137}

anchortext_136 [label="anchortext"]

url_137 [label="url"]


// END RANK link_133

anchortext_136 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label="spec module"]
// END RANK anchortext_136

url_137 -> leaf_139
leaf_139  [color=Gray,shape=rectangle,fontname=Inconsolata,label="hts://~/spec.orb"]
// END RANK url_137

raw_134 -> leaf_140
leaf_140  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_134

prose_95 -> { raw_141}
{rank=same; raw_141}

raw_141 [label="raw"]


// END RANK prose_95

raw_141 -> leaf_142
leaf_142  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Also included are two functions:
"]
// END RANK raw_141

prose_96 -> { raw_143}
{rank=same; raw_143}

raw_143 [label="raw"]


// END RANK prose_96

raw_143 -> leaf_144
leaf_144  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  START :  a string which must be the same as the starting rule.
  -  SUPPRESS :  either a string or an array of strings. These rules will be
                 removed from the Node.
"]
// END RANK raw_143

prose_97 -> { raw_145}
{rank=same; raw_145}

raw_145 [label="raw"]


// END RANK prose_97

raw_145 -> leaf_146
leaf_146  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The use of ALL-CAPS was Phillipe Janda's convention, I agree that it reads
well in this singular instance.

"]
// END RANK raw_145

section_73 -> { header_147 prose_148 prose_149 prose_150 prose_151 prose_152 prose_153}
{rank=same; header_147 prose_148 prose_149 prose_150 prose_151 prose_152 prose_153}

header_147 [label="3 : metas"]

prose_148 [label="prose"]

prose_149 [label="prose"]

prose_150 [label="prose"]

prose_151 [label="prose"]

prose_152 [label="prose"]

prose_153 [label="prose"]


// END RANK section_73

header_147 -> leaf_154
leaf_154  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** metas"]
// END RANK header_147

prose_148 -> { raw_155}
{rank=same; raw_155}

raw_155 [label="raw"]


// END RANK prose_148

raw_155 -> leaf_156
leaf_156  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  By default a node will inherit from the Node class.  If you want custom
behavior, you must pass in a table of metatable constructors.
"]
// END RANK raw_155

prose_149 -> { raw_157 prespace_158 literal_159 raw_160 prespace_161 literal_162 raw_163 prespace_164 literal_165 raw_166 prespace_167 literal_168 raw_169}
{rank=same; raw_157 prespace_158 literal_159 raw_160 prespace_161 literal_162 raw_163 prespace_164 literal_165 raw_166 prespace_167 literal_168 raw_169}

raw_157 [label="raw"]

prespace_158 [label="prespace"]

literal_159 [label="literal"]

raw_160 [label="raw"]

prespace_161 [label="prespace"]

literal_162 [label="literal"]

raw_163 [label="raw"]

prespace_164 [label="prespace"]

literal_165 [label="literal"]

raw_166 [label="raw"]

prespace_167 [label="prespace"]

literal_168 [label="literal"]

raw_169 [label="raw"]


// END RANK prose_149

raw_157 -> leaf_170
leaf_170  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
That's a fairly specific beast.  Any rule defined above will have an"]
// END RANK raw_157

prespace_158 -> leaf_171
leaf_171  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_158

literal_159 -> leaf_172
leaf_172  [color=Gray,shape=rectangle,fontname=Inconsolata,label="id"]
// END RANK literal_159

raw_160 -> leaf_173
leaf_173  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
corresonding to the name of the rule.  Unless"]
// END RANK raw_160

prespace_161 -> leaf_174
leaf_174  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_161

literal_162 -> leaf_175
leaf_175  [color=Gray,shape=rectangle,fontname=Inconsolata,label="SUPPRESS"]
// END RANK literal_162

raw_163 -> leaf_176
leaf_176  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ed, this will become
a Node.  If the"]
// END RANK raw_163

prespace_164 -> leaf_177
leaf_177  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_164

literal_165 -> leaf_178
leaf_178  [color=Gray,shape=rectangle,fontname=Inconsolata,label="metas"]
// END RANK literal_165

raw_166 -> leaf_179
leaf_179  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" parameter has a key corresponding to"]
// END RANK raw_166

prespace_167 -> leaf_180
leaf_180  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_167

literal_168 -> leaf_181
leaf_181  [color=Gray,shape=rectangle,fontname=Inconsolata,label="id"]
// END RANK literal_168

raw_169 -> leaf_182
leaf_182  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", then it
must return a function taking two parameters:
"]
// END RANK raw_169

prose_150 -> { raw_183 prespace_184 literal_185 raw_186 prespace_187 literal_188 raw_189}
{rank=same; raw_183 prespace_184 literal_185 raw_186 prespace_187 literal_188 raw_189}

raw_183 [label="raw"]

prespace_184 [label="prespace"]

literal_185 [label="literal"]

raw_186 [label="raw"]

prespace_187 [label="prespace"]

literal_188 [label="literal"]

raw_189 [label="raw"]


// END RANK prose_150

raw_183 -> leaf_190
leaf_190  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
   - node :  The node under construction, which under normal circumstances
             will already have the"]
// END RANK raw_183

prespace_184 -> leaf_191
leaf_191  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_184

literal_185 -> leaf_192
leaf_192  [color=Gray,shape=rectangle,fontname=Inconsolata,label="first"]
// END RANK literal_185

raw_186 -> leaf_193
leaf_193  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_186

prespace_187 -> leaf_194
leaf_194  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_187

literal_188 -> leaf_195
leaf_195  [color=Gray,shape=rectangle,fontname=Inconsolata,label="last"]
// END RANK literal_188

raw_189 -> leaf_196
leaf_196  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" fields.
   - str  :  The entire str the grammar is parsing.
"]
// END RANK raw_189

prose_151 -> { raw_197}
{rank=same; raw_197}

raw_197 [label="raw"]


// END RANK prose_151

raw_197 -> leaf_198
leaf_198  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Which must return that same node, decorated in whatever fashion is
appropriate.
"]
// END RANK raw_197

prose_152 -> { raw_199 prespace_200 literal_201 raw_202 prespace_203 literal_204 raw_205}
{rank=same; raw_199 prespace_200 literal_201 raw_202 prespace_203 literal_204 raw_205}

raw_199 [label="raw"]

prespace_200 [label="prespace"]

literal_201 [label="literal"]

raw_202 [label="raw"]

prespace_203 [label="prespace"]

literal_204 [label="literal"]

raw_205 [label="raw"]


// END RANK prose_152

raw_199 -> leaf_206
leaf_206  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The node will not have a metatable at this point, and the function must attach
a metatable with"]
// END RANK raw_199

prespace_200 -> leaf_207
leaf_207  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_200

literal_201 -> leaf_208
leaf_208  [color=Gray,shape=rectangle,fontname=Inconsolata,label="__index"]
// END RANK literal_201

raw_202 -> leaf_209
leaf_209  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" equal to some table which itself has the"]
// END RANK raw_202

prespace_203 -> leaf_210
leaf_210  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_203

literal_204 -> leaf_211
leaf_211  [color=Gray,shape=rectangle,fontname=Inconsolata,label="__index"]
// END RANK literal_204

raw_205 -> leaf_212
leaf_212  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Node as some recursive backstop.
"]
// END RANK raw_205

prose_153 -> { raw_213 prespace_214 italic_215 raw_216}
{rank=same; raw_213 prespace_214 italic_215 raw_216}

raw_213 [label="raw"]

prespace_214 [label="prespace"]

italic_215 [label="italic"]

raw_216 [label="raw"]


// END RANK prose_153

raw_213 -> leaf_217
leaf_217  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
You might say the return value must"]
// END RANK raw_213

prespace_214 -> leaf_218
leaf_218  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_214

italic_215 -> leaf_219
leaf_219  [color=Gray,shape=rectangle,fontname=Inconsolata,label="inherit"]
// END RANK italic_215

raw_216 -> leaf_220
leaf_220  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" from Node, if we were using
a language that did that sort of thing.

"]
// END RANK raw_216

section_74 -> { header_221 prose_222 prose_223 prose_224 prose_225 section_226 section_227 section_228}
{rank=same; header_221 prose_222 prose_223 prose_224 prose_225 section_226 section_227 section_228}

header_221 [label="3 : requires"]

prose_222 [label="prose"]

prose_223 [label="prose"]

prose_224 [label="prose"]

prose_225 [label="prose"]

section_226 [label="section: 117-125"]

section_227 [label="section: 126-142"]

section_228 [label="section: 143-163"]


// END RANK section_74

header_221 -> leaf_229
leaf_229  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** requires"]
// END RANK header_221

prose_222 -> { raw_230 prespace_231 literal_232 raw_233 prespace_234 literal_235 raw_236}
{rank=same; raw_230 prespace_231 literal_232 raw_233 prespace_234 literal_235 raw_236}

raw_230 [label="raw"]

prespace_231 [label="prespace"]

literal_232 [label="literal"]

raw_233 [label="raw"]

prespace_234 [label="prespace"]

literal_235 [label="literal"]

raw_236 [label="raw"]


// END RANK prose_222

raw_230 -> leaf_237
leaf_237  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


- [X] #todo  Note the require strings below, which prevent this from
             being a usable library, because"]
// END RANK raw_230

prespace_231 -> leaf_238
leaf_238  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_231

literal_232 -> leaf_239
leaf_239  [color=Gray,shape=rectangle,fontname=Inconsolata,label="node"]
// END RANK literal_232

raw_233 -> leaf_240
leaf_240  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" not"]
// END RANK raw_233

prespace_234 -> leaf_241
leaf_241  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_234

literal_235 -> leaf_242
leaf_242  [color=Gray,shape=rectangle,fontname=Inconsolata,label="lpegnode"]
// END RANK literal_235

raw_236 -> leaf_243
leaf_243  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_236

prose_223 -> { raw_244 prespace_245 literal_246 raw_247 prespace_248 literal_249 raw_250}
{rank=same; raw_244 prespace_245 literal_246 raw_247 prespace_248 literal_249 raw_250}

raw_244 [label="raw"]

prespace_245 [label="prespace"]

literal_246 [label="literal"]

raw_247 [label="raw"]

prespace_248 [label="prespace"]

literal_249 [label="literal"]

raw_250 [label="raw"]


// END RANK prose_223

raw_244 -> leaf_251
leaf_251  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
             The problem is almost a philosophical one, and it's what I'm
             setting out to solve with"]
// END RANK raw_244

prespace_245 -> leaf_252
leaf_252  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_245

literal_246 -> leaf_253
leaf_253  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
// END RANK literal_246

raw_247 -> leaf_254
leaf_254  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_247

prespace_248 -> leaf_255
leaf_255  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_248

literal_249 -> leaf_256
leaf_256  [color=Gray,shape=rectangle,fontname=Inconsolata,label="manifest"]
// END RANK literal_249

raw_250 -> leaf_257
leaf_257  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_250

prose_224 -> { raw_258 prespace_259 literal_260 raw_261}
{rank=same; raw_258 prespace_259 literal_260 raw_261}

raw_258 [label="raw"]

prespace_259 [label="prespace"]

literal_260 [label="literal"]

raw_261 [label="raw"]


// END RANK prose_224

raw_258 -> leaf_262
leaf_262  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
             In the meantime,"]
// END RANK raw_258

prespace_259 -> leaf_263
leaf_263  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_259

literal_260 -> leaf_264
leaf_264  [color=Gray,shape=rectangle,fontname=Inconsolata,label="lpegnode"]
// END RANK literal_260

raw_261 -> leaf_265
leaf_265  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" has one consumer. Let's keep it
             happy.
"]
// END RANK raw_261

prose_225 -> { raw_266 prespace_267 literal_268 raw_269}
{rank=same; raw_266 prespace_267 literal_268 raw_269}

raw_266 [label="raw"]

prespace_267 [label="prespace"]

literal_268 [label="literal"]

raw_269 [label="raw"]


// END RANK prose_225

raw_266 -> leaf_270
leaf_270  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
             I'm renaming it"]
// END RANK raw_266

prespace_267 -> leaf_271
leaf_271  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_267

literal_268 -> leaf_272
leaf_272  [color=Gray,shape=rectangle,fontname=Inconsolata,label="espalier"]
// END RANK literal_268

raw_269 -> leaf_273
leaf_273  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" anyway.

"]
// END RANK raw_269

section_226 -> { header_274 prose_275 codeblock_276}
{rank=same; header_274 prose_275 codeblock_276}

header_274 [label="5 : status"]

prose_275 [label="prose"]

codeblock_276 [label="code block 119-123"]


// END RANK section_226

header_274 -> leaf_277
leaf_277  [color=Gray,shape=rectangle,fontname=Inconsolata,label="***** status"]
// END RANK header_274

prose_275 -> { raw_278}
{rank=same; raw_278}

raw_278 [label="raw"]


// END RANK prose_275

raw_278 -> leaf_279
leaf_279  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_278

codeblock_276 -> leaf_280
leaf_280  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local s = require \"singletons\" . status ()
s.verbose = false
s.angry   = false"]
// END RANK codeblock_276

section_227 -> { header_281 prose_282 codeblock_283 prose_284}
{rank=same; header_281 prose_282 codeblock_283 prose_284}

header_281 [label="4 : requires, contd."]

prose_282 [label="prose"]

codeblock_283 [label="code block 128-136"]

prose_284 [label="prose"]


// END RANK section_227

header_281 -> leaf_285
leaf_285  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** requires, contd."]
// END RANK header_281

prose_282 -> { raw_286}
{rank=same; raw_286}

raw_286 [label="raw"]


// END RANK prose_282

raw_286 -> leaf_287
leaf_287  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_286

codeblock_283 -> leaf_288
leaf_288  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"
local a = require \"anterm\"

local Node = require \"espalier/node\"
local elpatt = require \"espalier/elpatt\"

local DROP = elpatt.DROP"]
// END RANK codeblock_283

prose_284 -> { raw_289}
{rank=same; raw_289}

raw_289 [label="raw"]


// END RANK prose_284

raw_289 -> leaf_290
leaf_290  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's the kind of thing I'd like to automate.

"]
// END RANK raw_289

section_228 -> { header_291 prose_292 codeblock_293}
{rank=same; header_291 prose_292 codeblock_293}

header_291 [label="4 : asserts"]

prose_292 [label="prose"]

codeblock_293 [label="code block 145-161"]


// END RANK section_228

header_291 -> leaf_294
leaf_294  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** asserts"]
// END RANK header_291

prose_292 -> { raw_295}
{rank=same; raw_295}

raw_295 [label="raw"]


// END RANK prose_292

raw_295 -> leaf_296
leaf_296  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_295

codeblock_293 -> leaf_297
leaf_297  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local assert = assert
local string, io = assert( string ), assert( io )
local remove = assert(table.remove)
local VER = string.sub( assert( _VERSION ), -4 )
local _G = assert( _G )
local error = assert( error )
local pairs = assert( pairs )
local next = assert( next )
local type = assert( type )
local tostring = assert( tostring )
local setmeta = assert( setmetatable )
if VER == \" 5.1\" then
   local setfenv = assert( setfenv )
   local getfenv = assert( getfenv )
end"]
// END RANK codeblock_293

section_75 -> { header_298 prose_299 codeblock_300 prose_301 prose_302 prose_303 section_304 section_305}
{rank=same; header_298 prose_299 codeblock_300 prose_301 prose_302 prose_303 section_304 section_305}

header_298 [label="3 : make_ast_node"]

prose_299 [label="prose"]

codeblock_300 [label="code block 168-170"]

prose_301 [label="prose"]

prose_302 [label="prose"]

prose_303 [label="prose"]

section_304 [label="section: 188-218"]

section_305 [label="section: 219-352"]


// END RANK section_75

header_298 -> leaf_306
leaf_306  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** make_ast_node"]
// END RANK header_298

prose_299 -> { raw_307}
{rank=same; raw_307}

raw_307 [label="raw"]


// END RANK prose_299

raw_307 -> leaf_308
leaf_308  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This takes a lot of parameters and does a lot of things.
"]
// END RANK raw_307

codeblock_300 -> leaf_309
leaf_309  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function make_ast_node(id, first, t, last, str, metas, offset)"]
// END RANK codeblock_300

prose_301 -> { raw_310 prespace_311 literal_312 raw_313 prespace_314 literal_315 raw_316 prespace_317 literal_318 raw_319 prespace_320 literal_321 raw_322 prespace_323 literal_324 raw_325}
{rank=same; raw_310 prespace_311 literal_312 raw_313 prespace_314 literal_315 raw_316 prespace_317 literal_318 raw_319 prespace_320 literal_321 raw_322 prespace_323 literal_324 raw_325}

raw_310 [label="raw"]

prespace_311 [label="prespace"]

literal_312 [label="literal"]

raw_313 [label="raw"]

prespace_314 [label="prespace"]

literal_315 [label="literal"]

raw_316 [label="raw"]

prespace_317 [label="prespace"]

literal_318 [label="literal"]

raw_319 [label="raw"]

prespace_320 [label="prespace"]

literal_321 [label="literal"]

raw_322 [label="raw"]

prespace_323 [label="prespace"]

literal_324 [label="literal"]

raw_325 [label="raw"]


// END RANK prose_301

raw_310 -> leaf_326
leaf_326  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- Parameters:
  - id      :  'string' naming the Node
  - first   :  'number' of the first byte of"]
// END RANK raw_310

prespace_311 -> leaf_327
leaf_327  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_311

literal_312 -> leaf_328
leaf_328  [color=Gray,shape=rectangle,fontname=Inconsolata,label="str"]
// END RANK literal_312

raw_313 -> leaf_329
leaf_329  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - t       :  'table' capture of grammatical information
  - last    :  'number' of the last byte of"]
// END RANK raw_313

prespace_314 -> leaf_330
leaf_330  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_314

literal_315 -> leaf_331
leaf_331  [color=Gray,shape=rectangle,fontname=Inconsolata,label="str"]
// END RANK literal_315

raw_316 -> leaf_332
leaf_332  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - str     :  'string' being parsed
  - metas   :  'table' of Node-inherited metatables (complex)
  - offset  :  'number' of optional offset.  This would be provided if
               e.g. byte 1 of"]
// END RANK raw_316

prespace_317 -> leaf_333
leaf_333  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_317

literal_318 -> leaf_334
leaf_334  [color=Gray,shape=rectangle,fontname=Inconsolata,label="str"]
// END RANK literal_318

raw_319 -> leaf_335
leaf_335  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is actually byte 255 of a larger
              "]
// END RANK raw_319

prespace_320 -> leaf_336
leaf_336  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_320

literal_321 -> leaf_337
leaf_337  [color=Gray,shape=rectangle,fontname=Inconsolata,label="str"]
// END RANK literal_321

raw_322 -> leaf_338
leaf_338  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  Normally"]
// END RANK raw_322

prespace_323 -> leaf_339
leaf_339  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_323

literal_324 -> leaf_340
leaf_340  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_324

raw_325 -> leaf_341
leaf_341  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_325

prose_302 -> { prespace_342 literal_343 raw_344 prespace_345 literal_346 raw_347 prespace_348 literal_349 raw_350}
{rank=same; prespace_342 literal_343 raw_344 prespace_345 literal_346 raw_347 prespace_348 literal_349 raw_350}

prespace_342 [label="prespace"]

literal_343 [label="literal"]

raw_344 [label="raw"]

prespace_345 [label="prespace"]

literal_346 [label="literal"]

raw_347 [label="raw"]

prespace_348 [label="prespace"]

literal_349 [label="literal"]

raw_350 [label="raw"]


// END RANK prose_302

prespace_342 -> leaf_351
leaf_351  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_342

literal_343 -> leaf_352
leaf_352  [color=Gray,shape=rectangle,fontname=Inconsolata,label="first"]
// END RANK literal_343

raw_344 -> leaf_353
leaf_353  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
// END RANK raw_344

prespace_345 -> leaf_354
leaf_354  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_345

literal_346 -> leaf_355
leaf_355  [color=Gray,shape=rectangle,fontname=Inconsolata,label="last"]
// END RANK literal_346

raw_347 -> leaf_356
leaf_356  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_347

prespace_348 -> leaf_357
leaf_357  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_348

literal_349 -> leaf_358
leaf_358  [color=Gray,shape=rectangle,fontname=Inconsolata,label="offset"]
// END RANK literal_349

raw_350 -> leaf_359
leaf_359  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" follow Wirth indexing conventions.
"]
// END RANK raw_350

prose_303 -> { raw_360}
{rank=same; raw_360}

raw_360 [label="raw"]


// END RANK prose_303

raw_360 -> leaf_361
leaf_361  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Because of course they do.

"]
// END RANK raw_360

section_304 -> { header_362 prose_363 prose_364 codeblock_365}
{rank=same; header_362 prose_363 prose_364 codeblock_365}

header_362 [label="4 : setup values and metatables"]

prose_363 [label="prose"]

prose_364 [label="prose"]

codeblock_365 [label="code block 198-216"]


// END RANK section_304

header_362 -> leaf_366
leaf_366  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** setup values and metatables"]
// END RANK header_362

prose_363 -> { raw_367 link_368 raw_369 prespace_370 literal_371 raw_372}
{rank=same; raw_367 link_368 raw_369 prespace_370 literal_371 raw_372}

raw_367 [label="raw"]

link_368 [label="link"]

raw_369 [label="raw"]

prespace_370 [label="prespace"]

literal_371 [label="literal"]

raw_372 [label="raw"]


// END RANK prose_363

raw_367 -> leaf_373
leaf_373  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  As "]
// END RANK raw_367

link_368 -> { anchortext_374 url_375}
{rank=same; anchortext_374 url_375}

anchortext_374 [label="anchortext"]

url_375 [label="url"]


// END RANK link_368

anchortext_374 -> leaf_376
leaf_376  [color=Gray,shape=rectangle,fontname=Inconsolata,label="covered elsewhere"]
// END RANK anchortext_374

url_375 -> leaf_377
leaf_377  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
// END RANK url_375

raw_369 -> leaf_378
leaf_378  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", we accept three varieties of
metatable verb.  An ordinary table is assigned; a table with"]
// END RANK raw_369

prespace_370 -> leaf_379
leaf_379  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_370

literal_371 -> leaf_380
leaf_380  [color=Gray,shape=rectangle,fontname=Inconsolata,label="__call"]
// END RANK literal_371

raw_372 -> leaf_381
leaf_381  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is
called, as is an ordinary function.
"]
// END RANK raw_372

prose_364 -> { raw_382 prespace_383 literal_384 raw_385 prespace_386 literal_387 raw_388 prespace_389 literal_390 raw_391}
{rank=same; raw_382 prespace_383 literal_384 raw_385 prespace_386 literal_387 raw_388 prespace_389 literal_390 raw_391}

raw_382 [label="raw"]

prespace_383 [label="prespace"]

literal_384 [label="literal"]

raw_385 [label="raw"]

prespace_386 [label="prespace"]

literal_387 [label="literal"]

raw_388 [label="raw"]

prespace_389 [label="prespace"]

literal_390 [label="literal"]

raw_391 [label="raw"]


// END RANK prose_364

raw_382 -> leaf_392
leaf_392  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The latter two are expected to return the original table, now a descendent
of"]
// END RANK raw_382

prespace_383 -> leaf_393
leaf_393  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_383

literal_384 -> leaf_394
leaf_394  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Node"]
// END RANK literal_384

raw_385 -> leaf_395
leaf_395  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  This need not have an"]
// END RANK raw_385

prespace_386 -> leaf_396
leaf_396  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_386

literal_387 -> leaf_397
leaf_397  [color=Gray,shape=rectangle,fontname=Inconsolata,label="id"]
// END RANK literal_387

raw_388 -> leaf_398
leaf_398  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" field which is the same as the"]
// END RANK raw_388

prespace_389 -> leaf_399
leaf_399  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_389

literal_390 -> leaf_400
leaf_400  [color=Gray,shape=rectangle,fontname=Inconsolata,label="id"]
// END RANK literal_390

raw_391 -> leaf_401
leaf_401  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
parameter.
"]
// END RANK raw_391

codeblock_365 -> leaf_402
leaf_402  [color=Gray,shape=rectangle,fontname=Inconsolata,label="   local offset = offset or 0
   t.first = first + offset
   t.last  = last + offset - 1 -- [sic]
   t.str   = str
   if metas[id] then
      local meta = metas[id]
      if type(meta) == \"function\" or meta.__call then
        t = metas[id](t, str)
      else
        t = setmeta(t, meta)
      end
      assert(t.id, \"no id on Node\")
   else
      t.id = id
      setmeta(t, { __index = Node,
                   __tostring = Node.toString })
   end"]
// END RANK codeblock_365

section_305 -> { header_403 prose_404 structure_405 prose_406 prose_407 prose_408 prose_409 prose_410 prose_411 prose_412 prose_413 prose_414 prose_415 prose_416 prose_417 prose_418 codeblock_419 prose_420 prose_421 codeblock_422}
{rank=same; header_403 prose_404 structure_405 prose_406 prose_407 prose_408 prose_409 prose_410 prose_411 prose_412 prose_413 prose_414 prose_415 prose_416 prose_417 prose_418 codeblock_419 prose_420 prose_421 codeblock_422}

header_403 [label="4 : DROP"]

prose_404 [label="prose"]

structure_405 [label="structure"]

prose_406 [label="prose"]

prose_407 [label="prose"]

prose_408 [label="prose"]

prose_409 [label="prose"]

prose_410 [label="prose"]

prose_411 [label="prose"]

prose_412 [label="prose"]

prose_413 [label="prose"]

prose_414 [label="prose"]

prose_415 [label="prose"]

prose_416 [label="prose"]

prose_417 [label="prose"]

prose_418 [label="prose"]

codeblock_419 [label="code block 269-273"]

prose_420 [label="prose"]

prose_421 [label="prose"]

codeblock_422 [label="code block 279-350"]


// END RANK section_305

header_403 -> leaf_423
leaf_423  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** DROP"]
// END RANK header_403

prose_404 -> { raw_424}
{rank=same; raw_424}

raw_424 [label="raw"]


// END RANK prose_404

raw_424 -> leaf_425
leaf_425  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_424

structure_405 -> { hashline_426}
{rank=same; hashline_426}

hashline_426 [label="hashline"]


// END RANK structure_405

hashline_426 -> { hashtag_427}
{rank=same; hashtag_427}

hashtag_427 [label="hashtag"]


// END RANK hashline_426

hashtag_427 -> leaf_428
leaf_428  [color=Gray,shape=rectangle,fontname=Inconsolata,label="NB"]
// END RANK hashtag_427

prose_406 -> { raw_429 prespace_430 literal_431 raw_432}
{rank=same; raw_429 prespace_430 literal_431 raw_432}

raw_429 [label="raw"]

prespace_430 [label="prespace"]

literal_431 [label="literal"]

raw_432 [label="raw"]


// END RANK prose_406

raw_429 -> leaf_433
leaf_433  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
frequently in real languages. In a"]
// END RANK raw_429

prespace_430 -> leaf_434
leaf_434  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_430

literal_431 -> leaf_435
leaf_435  [color=Gray,shape=rectangle,fontname=Inconsolata,label="(typical lisp expression)"]
// END RANK literal_431

raw_432 -> leaf_436
leaf_436  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" we don't need
the parentheses and would like our span not to include them.
"]
// END RANK raw_432

prose_407 -> { raw_437 prespace_438 literal_439 raw_440 prespace_441 literal_442 raw_443 prespace_444 literal_445 raw_446}
{rank=same; raw_437 prespace_438 literal_439 raw_440 prespace_441 literal_442 raw_443 prespace_444 literal_445 raw_446}

raw_437 [label="raw"]

prespace_438 [label="prespace"]

literal_439 [label="literal"]

raw_440 [label="raw"]

prespace_441 [label="prespace"]

literal_442 [label="literal"]

raw_443 [label="raw"]

prespace_444 [label="prespace"]

literal_445 [label="literal"]

raw_446 [label="raw"]


// END RANK prose_407

raw_437 -> leaf_447
leaf_447  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We could use a pattern like"]
// END RANK raw_437

prespace_438 -> leaf_448
leaf_448  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_438

literal_439 -> leaf_449
leaf_449  [color=Gray,shape=rectangle,fontname=Inconsolata,label="V\"formwrap\""]
// END RANK literal_439

raw_440 -> leaf_450
leaf_450  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and then SUPPRESS"]
// END RANK raw_440

prespace_441 -> leaf_451
leaf_451  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_441

literal_442 -> leaf_452
leaf_452  [color=Gray,shape=rectangle,fontname=Inconsolata,label="formwrap"]
// END RANK literal_442

raw_443 -> leaf_453
leaf_453  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", but
this is less eloquent than"]
// END RANK raw_443

prespace_444 -> leaf_454
leaf_454  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_444

literal_445 -> leaf_455
leaf_455  [color=Gray,shape=rectangle,fontname=Inconsolata,label="D(P\"(\") * V\"form\" *  D(P\")\")"]
// END RANK literal_445

raw_446 -> leaf_456
leaf_456  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_446

prose_408 -> { raw_457 prespace_458 literal_459 raw_460}
{rank=same; raw_457 prespace_458 literal_459 raw_460}

raw_457 [label="raw"]

prespace_458 [label="prespace"]

literal_459 [label="literal"]

raw_460 [label="raw"]


// END RANK prose_408

raw_457 -> leaf_461
leaf_461  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Which is admittedly hard to look at.  We prefer the form"]
// END RANK raw_457

prespace_458 -> leaf_462
leaf_462  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_458

literal_459 -> leaf_463
leaf_463  [color=Gray,shape=rectangle,fontname=Inconsolata,label="D(pal) * V\"form\" * D(par)"]
// END RANK literal_459

raw_460 -> leaf_464
leaf_464  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for this reason among others.
"]
// END RANK raw_460

prose_409 -> { raw_465 prespace_466 literal_467 raw_468 prespace_469 bold_470 raw_471}
{rank=same; raw_465 prespace_466 literal_467 raw_468 prespace_469 bold_470 raw_471}

raw_465 [label="raw"]

prespace_466 [label="prespace"]

literal_467 [label="literal"]

raw_468 [label="raw"]

prespace_469 [label="prespace"]

bold_470 [label="bold"]

raw_471 [label="raw"]


// END RANK prose_409

raw_465 -> leaf_472
leaf_472  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The algorithm moves from the right to the left, because"]
// END RANK raw_465

prespace_466 -> leaf_473
leaf_473  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_466

literal_467 -> leaf_474
leaf_474  [color=Gray,shape=rectangle,fontname=Inconsolata,label="table.remove(t)"]
// END RANK literal_467

raw_468 -> leaf_475
leaf_475  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
is"]
// END RANK raw_468

prespace_469 -> leaf_476
leaf_476  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_469

bold_470 -> leaf_477
leaf_477  [color=Gray,shape=rectangle,fontname=Inconsolata,label="O(1)"]
// END RANK bold_470

raw_471 -> leaf_478
leaf_478  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" so we can strip any amount of rightward droppage first.  It is
correspondingly more expensive to strip middle drops, and most expensive
to strip leftmost drops.
"]
// END RANK raw_471

prose_410 -> { raw_479 prespace_480 literal_481 raw_482}
{rank=same; raw_479 prespace_480 literal_481 raw_482}

raw_479 [label="raw"]

prespace_480 [label="prespace"]

literal_481 [label="literal"]

raw_482 [label="raw"]


// END RANK prose_410

raw_479 -> leaf_483
leaf_483  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
More importantly, if we counted up, we'd be tracking"]
// END RANK raw_479

prespace_480 -> leaf_484
leaf_484  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_480

literal_481 -> leaf_485
leaf_485  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#t"]
// END RANK literal_481

raw_482 -> leaf_486
leaf_486  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", a moving target.
Counting to 1 neatly prevents this.
"]
// END RANK raw_482

prose_411 -> { raw_487}
{rank=same; raw_487}

raw_487 [label="raw"]


// END RANK prose_411

raw_487 -> leaf_488
leaf_488  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
   -  [ ] #Todo :Faster:
"]
// END RANK raw_487

prose_412 -> { raw_489}
{rank=same; raw_489}

raw_489 [label="raw"]


// END RANK prose_412

raw_489 -> leaf_490
leaf_490  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
     -  This algorithm, as we discussed, goes quadratic toward the left side.
        The correct way to go is if we see any drop, flip a dirty bit, and
        compact upward.
"]
// END RANK raw_489

prose_413 -> { raw_491 prespace_492 literal_493 raw_494}
{rank=same; raw_491 prespace_492 literal_493 raw_494}

raw_491 [label="raw"]

prespace_492 [label="prespace"]

literal_493 [label="literal"]

raw_494 [label="raw"]


// END RANK prose_413

raw_491 -> leaf_495
leaf_495  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
     -  More to the point, the mere inclusion of this much"]
// END RANK raw_491

prespace_492 -> leaf_496
leaf_496  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_492

literal_493 -> leaf_497
leaf_497  [color=Gray,shape=rectangle,fontname=Inconsolata,label="s:"]
// END RANK literal_493

raw_494 -> leaf_498
leaf_498  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" slows the
        algorithm to an utter crawl. The concatenations happen anyway, to
        pass the string into the status module.
"]
// END RANK raw_494

prose_414 -> { raw_499}
{rank=same; raw_499}

raw_499 [label="raw"]


// END RANK prose_414

raw_499 -> leaf_500
leaf_500  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
        This is probably 10x the cost in real work.
"]
// END RANK raw_499

prose_415 -> { raw_501}
{rank=same; raw_501}

raw_501 [label="raw"]


// END RANK prose_415

raw_501 -> leaf_502
leaf_502  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
        Why am I doing it in such a dumb way? This is a literate programming
        environment, and I'm building a language with templates and macros
        and other useful access to state at compile time.
"]
// END RANK raw_501

prose_416 -> { raw_503}
{rank=same; raw_503}

raw_503 [label="raw"]


// END RANK prose_416

raw_503 -> leaf_504
leaf_504  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
        That's two ways to remove the verbosity and other printfs when they
        aren't wanted.  Better to simulate the correct behavior until I can
        provide it.
"]
// END RANK raw_503

prose_417 -> { raw_505}
{rank=same; raw_505}

raw_505 [label="raw"]


// END RANK prose_417

raw_505 -> leaf_506
leaf_506  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
anyway back to our program
"]
// END RANK raw_505

prose_418 -> { raw_507}
{rank=same; raw_507}

raw_507 [label="raw"]


// END RANK prose_418

raw_507 -> leaf_508
leaf_508  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The parent of the first node is always itself:
"]
// END RANK raw_507

codeblock_419 -> leaf_509
leaf_509  [color=Gray,shape=rectangle,fontname=Inconsolata,label="   if not t.parent then
      t.parent = t
   end"]
// END RANK codeblock_419

prose_420 -> { raw_510 prespace_511 literal_512 raw_513}
{rank=same; raw_510 prespace_511 literal_512 raw_513}

raw_510 [label="raw"]

prespace_511 [label="prespace"]

literal_512 [label="literal"]

raw_513 [label="raw"]


// END RANK prose_420

raw_510 -> leaf_514
leaf_514  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This means the special case isn't a"]
// END RANK raw_510

prespace_511 -> leaf_515
leaf_515  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_511

literal_512 -> leaf_516
leaf_516  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_512

raw_513 -> leaf_517
leaf_517  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which I think is better.
"]
// END RANK raw_513

prose_421 -> { raw_518}
{rank=same; raw_518}

raw_518 [label="raw"]


// END RANK prose_421

raw_518 -> leaf_519
leaf_519  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Now we iterate the children
"]
// END RANK raw_518

codeblock_422 -> leaf_520
leaf_520  [color=Gray,shape=rectangle,fontname=Inconsolata,label="   for i = #t, 1 --[[0]], -1 do
      t[i].parent = t
      local cap = t[i]
      if type(cap) ~= \"table\" then
         s:complain(\"CAPTURE ISSUE\",
                    \"type of capture subgroup is \" .. type(v) .. \"\\n\")
                 -- better:
                 -- phrase {\"type of capture subgroup is\", type(v), \"\\n\"}
      end
      if cap.DROP == DROP then
         s:verb(\"drops in \" .. a.bright(t.id))
         if i == #t then
            s:verb(a.red(\"rightmost\") .. \" remaining node\")
            s:verb(\"  t.$: \" .. tostring(t.last) .. \" Δ: \"
                   .. tostring(cap.last - cap.first))
            -- <action>
            t.last = t.last - (cap.last - cap.first)
            remove(t)
            -- </action>
            s:verb(\"  new t.$: \" .. tostring(t.last))
         else
            -- Here we may be either in the middle or at the leftmost
            -- margin.  Leftmost means either we're at index 1, or that
            -- all children to the left, down to 1, are all DROPs.
            local leftmost = (i == 1)
            if leftmost then
               s:verb(a.cyan(\"  leftmost\") .. \" remaining node\")
               s:verb(\"    t.^: \" .. tostring(t.first)
                      .. \" D.$: \" .. tostring(cap.last))
               -- <action>
               t.first = cap.last
               --    <comment>
               s:verb(\"    new t.^: \" .. tostring(t.first))
               --    </comment>
               remove(t, 1)
               -- </action>
            else
               leftmost = true -- provisionally since cap.DROP
               for j = i, 1, -1 do
                 leftmost = leftmost and t[j].DROP
                 if not leftmost then break end
               end
               if leftmost then
                  s:verb(a.cyan(\"  leftmost inner\") .. \" remaining node\")
                  s:verb(\"    t.^: \" .. tostring(t.first)
                         .. \" D.$: \" .. tostring(cap.last))
                  t.first = cap.last
                  s:verb(\"    new t.^: \" .. tostring(t.first))
                  -- <action>
                  for j = i, 1, -1 do
                     -- this is quadradic but correct
                     -- and easy to understand.
                        remove(t, j)
                     break
                  end
                  -- </action>
               else
                  s:verb(a.green(\"  middle\") .. \" node dropped\")
                  remove(t, i)
               end
            end
         end
      end
   end
   -- post conditions
   assert(t.isNode, \"failed isNode: \" .. id)
   assert(t.str)
   assert(t.parent, \"no parent on \" .. t.id)
   return t
end"]
// END RANK codeblock_422

section_7 -> { header_521 prose_522 prose_523 prose_524 prose_525 prose_526 section_527 section_528}
{rank=same; header_521 prose_522 prose_523 prose_524 prose_525 prose_526 section_527 section_528}

header_521 [label="2 : define(func, g, e)"]

prose_522 [label="prose"]

prose_523 [label="prose"]

prose_524 [label="prose"]

prose_525 [label="prose"]

prose_526 [label="prose"]

section_527 [label="section: 368-430"]

section_528 [label="section: 431-451"]


// END RANK section_7

header_521 -> leaf_529
leaf_529  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** define(func, g, e)"]
// END RANK header_521

prose_522 -> { raw_530 link_531 raw_532}
{rank=same; raw_530 link_531 raw_532}

raw_530 [label="raw"]

link_531 [label="link"]

raw_532 [label="raw"]


// END RANK prose_522

raw_530 -> leaf_533
leaf_533  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is "]
// END RANK raw_530

link_531 -> { anchortext_534 url_535}
{rank=same; anchortext_534 url_535}

anchortext_534 [label="anchortext"]

url_535 [label="url"]


// END RANK link_531

anchortext_534 -> leaf_536
leaf_536  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Phillipe Janda"]
// END RANK anchortext_534

url_535 -> leaf_537
leaf_537  [color=Gray,shape=rectangle,fontname=Inconsolata,label="http://siffiejoe.github.io/lua-luaepnf/"]
// END RANK url_535

raw_532 -> leaf_538
leaf_538  [color=Gray,shape=rectangle,fontname=Inconsolata,label="'s
algorithm, with my adaptations.
"]
// END RANK raw_532

prose_523 -> { prespace_539 literal_540 raw_541 prespace_542 literal_543 raw_544}
{rank=same; prespace_539 literal_540 raw_541 prespace_542 literal_543 raw_544}

prespace_539 [label="prespace"]

literal_540 [label="literal"]

raw_541 [label="raw"]

prespace_542 [label="prespace"]

literal_543 [label="literal"]

raw_544 [label="raw"]


// END RANK prose_523

prespace_539 -> leaf_545
leaf_545  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_539

literal_540 -> leaf_546
leaf_546  [color=Gray,shape=rectangle,fontname=Inconsolata,label="e"]
// END RANK literal_540

raw_541 -> leaf_547
leaf_547  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", either is or becomes"]
// END RANK raw_541

prespace_542 -> leaf_548
leaf_548  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_542

literal_543 -> leaf_549
leaf_549  [color=Gray,shape=rectangle,fontname=Inconsolata,label="_ENV"]
// END RANK literal_543

raw_544 -> leaf_550
leaf_550  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_544

prose_524 -> { raw_551}
{rank=same; raw_551}

raw_551 [label="raw"]


// END RANK prose_524

raw_551 -> leaf_552
leaf_552  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is not needed in LuaJIT, while for Lua 5.2 and above, it is.
"]
// END RANK raw_551

prose_525 -> { prespace_553 literal_554 raw_555}
{rank=same; prespace_553 literal_554 raw_555}

prespace_553 [label="prespace"]

literal_554 [label="literal"]

raw_555 [label="raw"]


// END RANK prose_525

prespace_553 -> leaf_556
leaf_556  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_553

literal_554 -> leaf_557
leaf_557  [color=Gray,shape=rectangle,fontname=Inconsolata,label="func"]
// END RANK literal_554

raw_555 -> leaf_558
leaf_558  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the grammar definition function, pieces of which we've provided.
We'll see how the rest is put together presently.
"]
// END RANK raw_555

prose_526 -> { prespace_559 literal_560 raw_561 prespace_562 literal_563 raw_564}
{rank=same; prespace_559 literal_560 raw_561 prespace_562 literal_563 raw_564}

prespace_559 [label="prespace"]

literal_560 [label="literal"]

raw_561 [label="raw"]

prespace_562 [label="prespace"]

literal_563 [label="literal"]

raw_564 [label="raw"]


// END RANK prose_526

prespace_559 -> leaf_565
leaf_565  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_559

literal_560 -> leaf_566
leaf_566  [color=Gray,shape=rectangle,fontname=Inconsolata,label="g"]
// END RANK literal_560

raw_561 -> leaf_567
leaf_567  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is or becomes a"]
// END RANK raw_561

prespace_562 -> leaf_568
leaf_568  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_562

literal_563 -> leaf_569
leaf_569  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Grammar"]
// END RANK literal_563

raw_564 -> leaf_570
leaf_570  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".

"]
// END RANK raw_564

section_527 -> { header_571 prose_572 codeblock_573 prose_574 codeblock_575}
{rank=same; header_571 prose_572 codeblock_573 prose_574 codeblock_575}

header_571 [label="4 : localizations"]

prose_572 [label="prose"]

codeblock_573 [label="code block 372-379"]

prose_574 [label="prose"]

codeblock_575 [label="code block 384-428"]


// END RANK section_527

header_571 -> leaf_576
leaf_576  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** localizations"]
// END RANK header_571

prose_572 -> { raw_577}
{rank=same; raw_577}

raw_577 [label="raw"]


// END RANK prose_572

raw_577 -> leaf_578
leaf_578  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

We localize the patterns we use.
"]
// END RANK raw_577

codeblock_573 -> leaf_579
leaf_579  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Cp = L.Cp
local Cc = L.Cc
local Ct = L.Ct
local arg1_str = L.Carg(1)
local arg2_metas = L.Carg(2)
local arg3_offset = L.Carg(3)"]
// END RANK codeblock_573

prose_574 -> { raw_580}
{rank=same; raw_580}

raw_580 [label="raw"]


// END RANK prose_574

raw_580 -> leaf_581
leaf_581  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Setup an environment where you can easily define lpeg grammars
with lots of syntax sugar, compatible with the 5 series of Luas:
"]
// END RANK raw_580

codeblock_575 -> leaf_582
leaf_582  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function define(func, g, e)
   g = g or {}
   if e == nil then
      e = VER == \" 5.1\" and getfenv(func) or _G
   end
   local suppressed = {}
   local env = {}
   local env_index = {
      START = function(name) g[1] = name end,
      SUPPRESS = function(...)
         suppressed = {}
         for i = 1, select('#', ...) do
            suppressed[select(i, ... )] = true
         end
      end,
      V = L.V,
      P = L.P }

    setmeta(env_index, { __index = e })
    setmeta(env, {
       __index = env_index,
       __newindex = function( _, name, val )
          if suppressed[ name ] then
             g[ name ] = val
          else
             g[ name ] = (Cc(name)
                * Cp()
                * Ct(val)
                * Cp()
                * arg1_str
                * arg2_metas)
                * arg3_offset / make_ast_node
          end
       end })

   -- call passed function with custom environment (5.1- and 5.2-style)
   if VER == \" 5.1\" then
      setfenv(func, env )
   end
   func( env )
   assert( g[ 1 ] and g[ g[ 1 ] ], \"no start rule defined\" )
   return g
end"]
// END RANK codeblock_575

section_528 -> { header_583 prose_584 codeblock_585}
{rank=same; header_583 prose_584 codeblock_585}

header_583 [label="3 : refineMetas(metas)"]

prose_584 [label="prose"]

codeblock_585 [label="code block 435-449"]


// END RANK section_528

header_583 -> leaf_586
leaf_586  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** refineMetas(metas)"]
// END RANK header_583

prose_584 -> { raw_587}
{rank=same; raw_587}

raw_587 [label="raw"]


// END RANK prose_584

raw_587 -> leaf_588
leaf_588  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Takes metatables, distributing defaults and denormalizations.
"]
// END RANK raw_587

codeblock_585 -> leaf_589
leaf_589  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function refineMetas(metas)
  for id, meta in pairs(metas) do
    if type(meta) == \"table\" then
      if not meta[\"__tostring\"] then
        meta[\"__tostring\"] = Node.toString
      end
      if not meta.id then
        meta.id = id
      end
    end
  end
  return metas
end"]
// END RANK codeblock_585

section_8 -> { header_590 prose_591 codeblock_592 codeblock_593}
{rank=same; header_590 prose_591 codeblock_592 codeblock_593}

header_590 [label="2 : new"]

prose_591 [label="prose"]

codeblock_592 [label="code block 457-506"]

codeblock_593 [label="code block 508-510"]


// END RANK section_8

header_590 -> leaf_594
leaf_594  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** new"]
// END RANK header_590

prose_591 -> { raw_595 prespace_596 literal_597 raw_598}
{rank=same; raw_595 prespace_596 literal_597 raw_598}

raw_595 [label="raw"]

prespace_596 [label="prespace"]

literal_597 [label="literal"]

raw_598 [label="raw"]


// END RANK prose_591

raw_595 -> leaf_599
leaf_599  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Given a grammar_template function and a set of metatables,
yield a parsing function and the grammar as an"]
// END RANK raw_595

prespace_596 -> leaf_600
leaf_600  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_596

literal_597 -> leaf_601
leaf_601  [color=Gray,shape=rectangle,fontname=Inconsolata,label="lpeg"]
// END RANK literal_597

raw_598 -> leaf_602
leaf_602  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" pattern.
"]
// END RANK raw_598

codeblock_592 -> leaf_603
leaf_603  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(grammar_template, metas, pre, post)
   if type(grammar_template) == \"function\" then
      local metas = metas or {}
      metas = refineMetas(metas)
      local grammar = define(grammar_template, nil, metas)

      local function parse(str, offset)
         local offset = offset or 0
         --[[
         if pre then
            str = pre(str)
         end
         --]]
         local match = L.match(grammar, str, 1, str, metas, offset)
         if match == nil then
            return nil
         end
         --[[
         if post then
            error \"error in post parsing\"
           match = post(match)
         end
         --]]
         local maybeErr = match:lastLeaf()
         if maybeErr.id then
            if maybeErr.id == \"ERROR\" then
               local line, col = match:linePos(maybeErr.first)
               local msg = maybeErr.msg or \"\"
               s:complain(\"Parsing Error\", \" line: \" .. tostring(line) .. \", \"
                       .. \"col: \" .. tostring(col) .. \". \" .. msg)
               return match, match:lastLeaf()
            else
               return match
            end
         else
            local maybeNode = maybeErr.isNode and \" is \" or \" isn't \"
            s:complain(\"No id on match\" .. \"match of type, \" .. type(match)
                      .. maybeNode .. \" a Node: \" .. tostring(maybeErr))
         end
         -- This would be a bad match.
         return match
      end

      return parse, grammar
   else
      s:halt(\"no way to build grammar out of \" .. type(grammar_template))
   end
end"]
// END RANK codeblock_592

codeblock_593 -> leaf_604
leaf_604  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return new"]
// END RANK codeblock_593


}
