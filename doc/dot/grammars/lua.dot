digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 187"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-98"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 codeblock_6 section_7 section_8}
{rank=same; header_2 prose_3 prose_4 prose_5 codeblock_6 section_7 section_8}

header_2 [label="1 : A Grammar For Lua"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

codeblock_6 [label="code block 12-69"]

section_7 [label="section: 72-87"]

section_8 [label="section: 99-154"]


// END RANK section_1

header_2 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* A Grammar For Lua"]
// END RANK header_2

prose_3 -> { raw_10}
{rank=same; raw_10}

raw_10 [label="raw"]


// END RANK prose_3

raw_10 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

While the most important grammar for pegylator is pegylator itself, it's
time to make a Lua language parser.
"]
// END RANK raw_10

prose_4 -> { raw_12}
{rank=same; raw_12}

raw_12 [label="raw"]


// END RANK prose_4

raw_12 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The hard work is done on this, it's a matter of translation into the
Pegylator paradigm.
"]
// END RANK raw_12

prose_5 -> { raw_14}
{rank=same; raw_14}

raw_14 [label="raw"]


// END RANK prose_5

raw_14 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
While this a hell of a lot of work, the complete BNF of Lua is available,
and reproduced here.
"]
// END RANK raw_14

codeblock_6 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="chunk ::= {stat [`;´]} [laststat [`;´]]

   block ::= chunk

   stat ::=  varlist `=´ explist |
       functioncall |
       do block end |
       while exp do block end |
       repeat block until exp |
       if exp then block {elseif exp then block} [else block] end |
       for Name `=´ exp `,´ exp [`,´ exp] do block end |
       for namelist in explist do block end |
       function funcname funcbody |
       local function Name funcbody |
       local namelist [`=´ explist]

   laststat ::= return [explist] | break

   funcname ::= Name {`.´ Name} [`:´ Name]

   varlist ::= var {`,´ var}

   var ::=  Name | prefixexp `[´ exp `]´ | prefixexp `.´ Name

   namelist ::= Name {`,´ Name}

   explist ::= {exp `,´} exp

   exp ::=  nil | false | true | Number | String | `...´ | function |
       prefixexp | tableconstructor | exp binop exp | unop exp

   prefixexp ::= var | functioncall | `(´ exp `)´

   functioncall ::=  prefixexp args | prefixexp `:´ Name args

   args ::=  `(´ [explist] `)´ | tableconstructor | String

   function ::= function funcbody

   funcbody ::= `(´ [parlist] `)´ block end

   parlist ::= namelist [`,´ `...´] | `...´

   tableconstructor ::= `{´ [fieldlist] `}´

   fieldlist ::= field {fieldsep field} [fieldsep]

   field ::= `[´ exp `]´ `=´ exp | Name `=´ exp | exp

   fieldsep ::= `,´ | `;´

   binop ::= `+´ | `-´ | `*´ | `/´ | `^´ | `%´ | `..´ |
       `<´ | `<=´ | `>´ | `>=´ | `==´ | `~=´ |
       and | or

   unop ::= `-´ | not | `#´"]
// END RANK codeblock_6

section_7 -> { header_17 prose_18 section_19 section_20}
{rank=same; header_17 prose_18 section_19 section_20}

header_17 [label="2 : Implementation"]

prose_18 [label="prose"]

section_19 [label="section: 77-87"]

section_20 [label="section: 88-98"]


// END RANK section_7

header_17 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Implementation"]
// END RANK header_17

prose_18 -> { raw_22}
{rank=same; raw_22}

raw_22 [label="raw"]


// END RANK prose_18

raw_22 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Let's try it.

"]
// END RANK raw_22

section_19 -> { header_24 prose_25 codeblock_26}
{rank=same; header_24 prose_25 codeblock_26}

header_24 [label="3 : Imports"]

prose_25 [label="prose"]

codeblock_26 [label="code block 79-85"]


// END RANK section_19

header_24 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Imports"]
// END RANK header_24

prose_25 -> { raw_28}
{rank=same; raw_28}

raw_28 [label="raw"]


// END RANK prose_25

raw_28 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_28

codeblock_26 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Node    =  require \"espalier/node\"
local Grammar =  require \"espalier/grammar\"
local L       =  require \"espalier/elpatt\"

local P, R, E, V, S    =  L.P, L.R, L.E, L.V, L.S"]
// END RANK codeblock_26

section_20 -> { header_31 prose_32 prose_33 prose_34 prose_35}
{rank=same; header_31 prose_32 prose_33 prose_34 prose_35}

header_31 [label="3 : lua_fn"]

prose_32 [label="prose"]

prose_33 [label="prose"]

prose_34 [label="prose"]

prose_35 [label="prose"]


// END RANK section_20

header_31 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** lua_fn"]
// END RANK header_31

prose_32 -> { raw_37}
{rank=same; raw_37}

raw_37 [label="raw"]


// END RANK prose_32

raw_37 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is provided to the Grammar engine to create a Lua parser.
"]
// END RANK raw_37

prose_33 -> { raw_39}
{rank=same; raw_39}

raw_39 [label="raw"]


// END RANK prose_33

raw_39 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- #Todo this being a 5.1 grammar, need to add goto statements.
"]
// END RANK raw_39

prose_34 -> { raw_41}
{rank=same; raw_41}

raw_41 [label="raw"]


// END RANK prose_34

raw_41 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- #Todo add the whitespace
"]
// END RANK raw_41

prose_35 -> { raw_43 prespace_44 literal_45 raw_46}
{rank=same; raw_43 prespace_44 literal_45 raw_46}

raw_43 [label="raw"]

prespace_44 [label="prespace"]

literal_45 [label="literal"]

raw_46 [label="raw"]


// END RANK prose_35

raw_43 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- #Todo add precedence parsing of"]
// END RANK raw_43

prespace_44 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_44

literal_45 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="exp"]
// END RANK literal_45

raw_46 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
// END RANK raw_46

section_8 -> { header_51 prose_52 codeblock_53 section_54 section_55}
{rank=same; header_51 prose_52 codeblock_53 section_54 section_55}

header_51 [label="2 : The Grammar of the Lua Language"]

prose_52 [label="prose"]

codeblock_53 [label="code block 104-112"]

section_54 [label="section: 115-154"]

section_55 [label="section: 155-187"]


// END RANK section_8

header_51 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** The Grammar of the Lua Language"]
// END RANK header_51

prose_52 -> { raw_57 prespace_58 literal_59 raw_60}
{rank=same; raw_57 prespace_58 literal_59 raw_60}

raw_57 [label="raw"]

prespace_58 [label="prespace"]

literal_59 [label="literal"]

raw_60 [label="raw"]


// END RANK prose_52

raw_57 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A Lua program consists of one or more"]
// END RANK raw_57

prespace_58 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_58

literal_59 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="chunks"]
// END RANK literal_59

raw_60 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which are
anonymous functions.
"]
// END RANK raw_60

codeblock_53 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local _do, _end, _then = P\"do\", P\"end\", P\"then\"

local function lua_fn(ENV)
   START \"lua\"
   lua   = V\"chunk\"^1
   chunk = (V\"stat\" * P\";\"^0) * (V\"laststat\"^0 * P\";\"^0)^-1
   block = V\"chunk\""]
// END RANK codeblock_53

section_54 -> { header_66 prose_67 prose_68 codeblock_69}
{rank=same; header_66 prose_67 prose_68 codeblock_69}

header_66 [label="3 : Statement"]

prose_67 [label="prose"]

prose_68 [label="prose"]

codeblock_69 [label="code block 123-152"]


// END RANK section_54

header_66 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Statement"]
// END RANK header_66

prose_67 -> { raw_71}
{rank=same; raw_71}

raw_71 [label="raw"]


// END RANK prose_67

raw_71 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Lua is a statement-oriented language in which expressions are
a special case.
"]
// END RANK raw_71

prose_68 -> { raw_73 prespace_74 literal_75 raw_76 prespace_77 literal_78 raw_79 prespace_80 literal_81 raw_82}
{rank=same; raw_73 prespace_74 literal_75 raw_76 prespace_77 literal_78 raw_79 prespace_80 literal_81 raw_82}

raw_73 [label="raw"]

prespace_74 [label="prespace"]

literal_75 [label="literal"]

raw_76 [label="raw"]

prespace_77 [label="prespace"]

literal_78 [label="literal"]

raw_79 [label="raw"]

prespace_80 [label="prespace"]

literal_81 [label="literal"]

raw_82 [label="raw"]


// END RANK prose_68

raw_73 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Thus"]
// END RANK raw_73

prespace_74 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_74

literal_75 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="2 + 3"]
// END RANK literal_75

raw_76 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is not a valid Lua program, whereas"]
// END RANK raw_76

prespace_77 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_77

literal_78 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return 2 + 3"]
// END RANK literal_78

raw_79 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
is, and is equivalent to"]
// END RANK raw_79

prespace_80 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_80

literal_81 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="(function() return 2 + 3 end)()"]
// END RANK literal_81

raw_82 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_82

codeblock_69 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label="   stat  = V\"varlist\" * P\"=\" * V\"explist\" +
           V\"functioncall\" +
           _do * V\"block\" * _end +
           P\"while\" * V\"exp\" * _do * V\"block\" * _end +
           P\"repeat\" * V\"block\" * P\"until\" * _end +
           P\"if\" * V\"exp\" * _then * V\"block\" *
              ( P\"elseif\" V\"exp\" * _then * V\"block\" )^0 *
              ( P\"else\" * V\"block\" )^-1 * _end +
           P\"for\" * V\"Name\" * P\"=\" * V\"exp\" * P\",\" * V\"exp\" *
              ( P\",\" * V\"exp\" )^-1 * _do * V\"block\" * _end +
           P\"for\" * V\"namelist\" * P\"in\" * V\"explist\" * _do *
              V\"block\" * _end +
           P\"function\" * V\"funcname\" * V\"funcbody\" +
           P\"local\" * P\"function\" * V\"Name\" * V\"funcbody\" +
           P\"local\" * V\"namelist\" * ( P\"=\" * V\"explist\" )^-1

   laststat = P\"return\" * V\"explist\"^-1 + P\"break\"

   funcname = V\"Name\" * ( P\".\" * V\"Name\" )^0 * ( P\":\" V\"Name\" )

   varlist  = V\"var\" * ( P\",\" V\"var\")^0

   var      = V\"Name\" + V\"prefixexp\" * P\"[\" * V\"exp\" * P\"]\" +
                 V\"prefixexp\" * \".\" * V\"Name\"

   namelist = V\"Name\" * ( V\"exp\" * \",\")^0 * V\"exp\"

   explist  = (V\"exp\" *)^0 * V\"exp\""]
// END RANK codeblock_69

section_55 -> { header_94 prose_95 codeblock_96}
{rank=same; header_94 prose_95 codeblock_96}

header_94 [label="3 : Expressions"]

prose_95 [label="prose"]

codeblock_96 [label="code block 162-169"]


// END RANK section_55

header_94 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Expressions"]
// END RANK header_94

prose_95 -> { raw_98}
{rank=same; raw_98}

raw_98 [label="raw"]


// END RANK prose_95

raw_98 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Expressions are necessarily somewhat complex because of
operator precedence; Lua has fewer operators than languages
such as C, but this translation from the grammar will require
further elaboration to correctly resolve order of operations.
"]
// END RANK raw_98

codeblock_96 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label="   exp     = P\"nil\" + P\"false\" + P\"true\"
             + V\"Number\" + V\"String\" + P\"...\" + V\"function\"
             + V\"prefixexp\" + V\"tableconstructor\"
             + V\"exp\" * V\"binop\" * V\"exp\"
             + V\"unop\" * V\"exp\"
end"]
// END RANK codeblock_96


}
