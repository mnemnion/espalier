digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 231"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-98"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 codeblock_6 section_7 section_8}
{rank=same; header_2 prose_3 prose_4 prose_5 codeblock_6 section_7 section_8}

header_2 [label="1 : A Grammar For Lua"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

codeblock_6 [label="code block 12-69"]

section_7 [label="section: 72-87"]

section_8 [label="section: 99-201"]


// END RANK section_1

header_2 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* A Grammar For Lua"]
// END RANK header_2

prose_3 -> { raw_10}
{rank=same; raw_10}

raw_10 [label="raw"]


// END RANK prose_3

raw_10 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

While the most important grammar for pegylator is pegylator itself, it's
time to make a Lua language parser.
"]
// END RANK raw_10

prose_4 -> { raw_12}
{rank=same; raw_12}

raw_12 [label="raw"]


// END RANK prose_4

raw_12 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The hard work is done on this, it's a matter of translation into the
Pegylator paradigm.
"]
// END RANK raw_12

prose_5 -> { raw_14}
{rank=same; raw_14}

raw_14 [label="raw"]


// END RANK prose_5

raw_14 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
While this a hell of a lot of work, the complete BNF of Lua is available,
and reproduced here.
"]
// END RANK raw_14

codeblock_6 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="chunk ::= {stat [`;´]} [laststat [`;´]]

   block ::= chunk

   stat ::=  varlist `=´ explist |
       functioncall |
       do block end |
       while exp do block end |
       repeat block until exp |
       if exp then block {elseif exp then block} [else block] end |
       for Name `=´ exp `,´ exp [`,´ exp] do block end |
       for namelist in explist do block end |
       function funcname funcbody |
       local function Name funcbody |
       local namelist [`=´ explist]

   laststat ::= return [explist] | break

   funcname ::= Name {`.´ Name} [`:´ Name]

   varlist ::= var {`,´ var}

   var ::=  Name | prefixexp `[´ exp `]´ | prefixexp `.´ Name

   namelist ::= Name {`,´ Name}

   explist ::= {exp `,´} exp

   exp ::=  nil | false | true | Number | String | `...´ | function |
       prefixexp | tableconstructor | exp binop exp | unop exp

   prefixexp ::= var | functioncall | `(´ exp `)´

   functioncall ::=  prefixexp args | prefixexp `:´ Name args

   args ::=  `(´ [explist] `)´ | tableconstructor | String

   function ::= function funcbody

   funcbody ::= `(´ [parlist] `)´ block end

   parlist ::= namelist [`,´ `...´] | `...´

   tableconstructor ::= `{´ [fieldlist] `}´

   fieldlist ::= field {fieldsep field} [fieldsep]

   field ::= `[´ exp `]´ `=´ exp | Name `=´ exp | exp

   fieldsep ::= `,´ | `;´

   binop ::= `+´ | `-´ | `*´ | `/´ | `^´ | `%´ | `..´ |
       `<´ | `<=´ | `>´ | `>=´ | `==´ | `~=´ |
       and | or

   unop ::= `-´ | not | `#´"]
// END RANK codeblock_6

section_7 -> { header_17 prose_18 section_19 section_20}
{rank=same; header_17 prose_18 section_19 section_20}

header_17 [label="2 : Implementation"]

prose_18 [label="prose"]

section_19 [label="section: 77-87"]

section_20 [label="section: 88-98"]


// END RANK section_7

header_17 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Implementation"]
// END RANK header_17

prose_18 -> { raw_22}
{rank=same; raw_22}

raw_22 [label="raw"]


// END RANK prose_18

raw_22 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Let's try it.

"]
// END RANK raw_22

section_19 -> { header_24 prose_25 codeblock_26}
{rank=same; header_24 prose_25 codeblock_26}

header_24 [label="3 : Imports"]

prose_25 [label="prose"]

codeblock_26 [label="code block 79-85"]


// END RANK section_19

header_24 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Imports"]
// END RANK header_24

prose_25 -> { raw_28}
{rank=same; raw_28}

raw_28 [label="raw"]


// END RANK prose_25

raw_28 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_28

codeblock_26 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Node    =  require \"espalier/node\"
local Grammar =  require \"espalier/grammar\"
local L       =  require \"espalier/elpatt\"

local P, R, E, V, S    =  L.P, L.R, L.E, L.V, L.S"]
// END RANK codeblock_26

section_20 -> { header_31 prose_32 prose_33 prose_34 prose_35}
{rank=same; header_31 prose_32 prose_33 prose_34 prose_35}

header_31 [label="3 : lua_fn"]

prose_32 [label="prose"]

prose_33 [label="prose"]

prose_34 [label="prose"]

prose_35 [label="prose"]


// END RANK section_20

header_31 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** lua_fn"]
// END RANK header_31

prose_32 -> { raw_37}
{rank=same; raw_37}

raw_37 [label="raw"]


// END RANK prose_32

raw_37 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is provided to the Grammar engine to create a Lua parser.
"]
// END RANK raw_37

prose_33 -> { raw_39}
{rank=same; raw_39}

raw_39 [label="raw"]


// END RANK prose_33

raw_39 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- #Todo this being a 5.1 grammar, need to add goto statements.
"]
// END RANK raw_39

prose_34 -> { raw_41}
{rank=same; raw_41}

raw_41 [label="raw"]


// END RANK prose_34

raw_41 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- #Todo add the whitespace
"]
// END RANK raw_41

prose_35 -> { raw_43 prespace_44 literal_45 raw_46}
{rank=same; raw_43 prespace_44 literal_45 raw_46}

raw_43 [label="raw"]

prespace_44 [label="prespace"]

literal_45 [label="literal"]

raw_46 [label="raw"]


// END RANK prose_35

raw_43 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- #Todo add precedence parsing of"]
// END RANK raw_43

prespace_44 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_44

literal_45 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="exp"]
// END RANK literal_45

raw_46 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
// END RANK raw_46

section_8 -> { header_51 prose_52 codeblock_53 section_54 section_55 section_56}
{rank=same; header_51 prose_52 codeblock_53 section_54 section_55 section_56}

header_51 [label="2 : The Grammar of the Lua Language"]

prose_52 [label="prose"]

codeblock_53 [label="code block 104-112"]

section_54 [label="section: 115-154"]

section_55 [label="section: 155-201"]

section_56 [label="section: 202-231"]


// END RANK section_8

header_51 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** The Grammar of the Lua Language"]
// END RANK header_51

prose_52 -> { raw_58 prespace_59 literal_60 raw_61}
{rank=same; raw_58 prespace_59 literal_60 raw_61}

raw_58 [label="raw"]

prespace_59 [label="prespace"]

literal_60 [label="literal"]

raw_61 [label="raw"]


// END RANK prose_52

raw_58 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A Lua program consists of one or more"]
// END RANK raw_58

prespace_59 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_59

literal_60 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="chunks"]
// END RANK literal_60

raw_61 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which are
anonymous functions.
"]
// END RANK raw_61

codeblock_53 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local _do, _end, _then = P\"do\", P\"end\", P\"then\"

local function lua_fn(ENV)
   START \"lua\"
   lua   = V\"chunk\"^1
   chunk = (V\"stat\" * P\";\"^0) * (V\"laststat\"^0 * P\";\"^0)^-1
   block = V\"chunk\""]
// END RANK codeblock_53

section_54 -> { header_67 prose_68 prose_69 codeblock_70}
{rank=same; header_67 prose_68 prose_69 codeblock_70}

header_67 [label="3 : Statement"]

prose_68 [label="prose"]

prose_69 [label="prose"]

codeblock_70 [label="code block 123-152"]


// END RANK section_54

header_67 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Statement"]
// END RANK header_67

prose_68 -> { raw_72}
{rank=same; raw_72}

raw_72 [label="raw"]


// END RANK prose_68

raw_72 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Lua is a statement-oriented language in which expressions are
a special case.
"]
// END RANK raw_72

prose_69 -> { raw_74 prespace_75 literal_76 raw_77 prespace_78 literal_79 raw_80 prespace_81 literal_82 raw_83}
{rank=same; raw_74 prespace_75 literal_76 raw_77 prespace_78 literal_79 raw_80 prespace_81 literal_82 raw_83}

raw_74 [label="raw"]

prespace_75 [label="prespace"]

literal_76 [label="literal"]

raw_77 [label="raw"]

prespace_78 [label="prespace"]

literal_79 [label="literal"]

raw_80 [label="raw"]

prespace_81 [label="prespace"]

literal_82 [label="literal"]

raw_83 [label="raw"]


// END RANK prose_69

raw_74 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Thus"]
// END RANK raw_74

prespace_75 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_75

literal_76 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label="2 + 3"]
// END RANK literal_76

raw_77 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is not a valid Lua program, whereas"]
// END RANK raw_77

prespace_78 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_78

literal_79 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return 2 + 3"]
// END RANK literal_79

raw_80 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
is, and is equivalent to"]
// END RANK raw_80

prespace_81 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_81

literal_82 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label="(function() return 2 + 3 end)()"]
// END RANK literal_82

raw_83 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_83

codeblock_70 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label="   stat  = V\"varlist\" * P\"=\" * V\"explist\" +
           V\"functioncall\" +
           _do * V\"block\" * _end +
           P\"while\" * V\"exp\" * _do * V\"block\" * _end +
           P\"repeat\" * V\"block\" * P\"until\" * _end +
           P\"if\" * V\"exp\" * _then * V\"block\" *
              ( P\"elseif\" V\"exp\" * _then * V\"block\" )^0 *
              ( P\"else\" * V\"block\" )^-1 * _end +
           P\"for\" * V\"Name\" * P\"=\" * V\"exp\" * P\",\" * V\"exp\" *
              ( P\",\" * V\"exp\" )^-1 * _do * V\"block\" * _end +
           P\"for\" * V\"namelist\" * P\"in\" * V\"explist\" * _do *
              V\"block\" * _end +
           P\"function\" * V\"funcname\" * V\"funcbody\" +
           P\"local\" * P\"function\" * V\"Name\" * V\"funcbody\" +
           P\"local\" * V\"namelist\" * ( P\"=\" * V\"explist\" )^-1

   laststat = P\"return\" * V\"explist\"^-1 + P\"break\"

   funcname = V\"Name\" * ( P\".\" * V\"Name\" )^0 * ( P\":\" V\"Name\" )

   varlist  = V\"var\" * ( P\",\" V\"var\")^0

   var      = V\"Name\" + V\"prefixexp\" * P\"[\" * V\"exp\" * P\"]\" +
                 V\"prefixexp\" * \".\" * V\"Name\"

   namelist = V\"Name\" * ( V\"exp\" * \",\")^0 * V\"exp\"

   explist  = (V\"exp\" *)^0 * V\"exp\""]
// END RANK codeblock_70

section_55 -> { header_95 prose_96 codeblock_97}
{rank=same; header_95 prose_96 codeblock_97}

header_95 [label="3 : Expressions"]

prose_96 [label="prose"]

codeblock_97 [label="code block 162-199"]


// END RANK section_55

header_95 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Expressions"]
// END RANK header_95

prose_96 -> { raw_99}
{rank=same; raw_99}

raw_99 [label="raw"]


// END RANK prose_96

raw_99 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Expressions are necessarily somewhat complex because of
operator precedence; Lua has fewer operators than languages
such as C, but this translation from the grammar will require
further elaboration to correctly resolve order of operations.
"]
// END RANK raw_99

codeblock_97 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label="   exp      = P\"nil\" + P\"false\" + P\"true\"
              + V\"Number\" + V\"String\" + P\"...\" + V\"fn\"
              + V\"prefixexp\" + V\"tableconstructor\"
              + V\"exp\" * V\"binop\" * V\"exp\"
              + V\"unop\" * V\"exp\"

   prefixexp = V\"var\" + V\"functioncall\" + P\"(\" * V\"exp\" * P\")\"

   functioncall = V\"prefixexp\" * V\"args\" +
                  V\"prefixexp\" * P\":\" * V\"Name\" * V\"args\"

   args      = P\"(\" * V\"explist\"^0 * P\")\"
               + V\"tableconstructor\"
               + V\"String\"

   fn        = P\"function\" * V\"funcbody\"

   funcbody  = P\"(\" * V\"parlist\"^0 * P\")\" * V\"block\" * _end

   parlist   = V\"namelist\" ( P\",\" * P\"...\") + P\"...\"

   tableconstructor = P\"{\" * V\"fieldlist\"^0 * P\"}\"

   fieldlist = V\"field\" * ( V\"fieldsep\" * V\"field\" )^1 * V\"fieldsep\"^0

   field     = P\"[\" * V\"exp\" * P\"]\" * P\"=\" * V\"exp\"
               + V\"exp\"

   fieldsep  = P\",\" * P\";\"

   binop     = P\"+\" + P\"-\" + P\"*\" + P\"/\" + P\"^\" + P\"%\" + P\"..\"
               + P\"<\" + P\"<=\" + P\">\" + P\">=\" + P\"==\" + P\"~=\" +
               + P\"and\" + P\"or\"

   unop      = P\"-\" + P\"not\" + P\"#\"
end"]
// END RANK codeblock_97

section_56 -> { header_102 prose_103 prose_104 prose_105}
{rank=same; header_102 prose_103 prose_104 prose_105}

header_102 [label="3 : Afterword"]

prose_103 [label="prose"]

prose_104 [label="prose"]

prose_105 [label="prose"]


// END RANK section_56

header_102 -> leaf_106
leaf_106  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Afterword"]
// END RANK header_102

prose_103 -> { raw_107}
{rank=same; raw_107}

raw_107 [label="raw"]


// END RANK prose_103

raw_107 -> leaf_108
leaf_108  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

So there's a first-pass at a literal transcription of the Lua 5.1 spec into
LPEG/espalier format.
"]
// END RANK raw_107

prose_104 -> { raw_109 prespace_110 literal_111 raw_112 prespace_113 literal_114 raw_115}
{rank=same; raw_109 prespace_110 literal_111 raw_112 prespace_113 literal_114 raw_115}

raw_109 [label="raw"]

prespace_110 [label="prespace"]

literal_111 [label="literal"]

raw_112 [label="raw"]

prespace_113 [label="prespace"]

literal_114 [label="literal"]

raw_115 [label="raw"]


// END RANK prose_104

raw_109 -> leaf_116
leaf_116  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
There's bound to be some spelling errors in there, such as a"]
// END RANK raw_109

prespace_110 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_110

literal_111 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label="+"]
// END RANK literal_111

raw_112 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" where I
meant"]
// END RANK raw_112

prespace_113 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_113

literal_114 -> leaf_121
leaf_121  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*"]
// END RANK literal_114

raw_115 -> leaf_122
leaf_122  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", but in writing out the spec I'm fairly sure I won't need to
rewrite terms to compensate for direct left recursion.
"]
// END RANK raw_115

prose_105 -> { raw_123 prespace_124 literal_125 raw_126 prespace_127 literal_128 raw_129 prespace_130 literal_131 raw_132}
{rank=same; raw_123 prespace_124 literal_125 raw_126 prespace_127 literal_128 raw_129 prespace_130 literal_131 raw_132}

raw_123 [label="raw"]

prespace_124 [label="prespace"]

literal_125 [label="literal"]

raw_126 [label="raw"]

prespace_127 [label="prespace"]

literal_128 [label="literal"]

raw_129 [label="raw"]

prespace_130 [label="prespace"]

literal_131 [label="literal"]

raw_132 [label="raw"]


// END RANK prose_105

raw_123 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I do need to add whitespace,"]
// END RANK raw_123

prespace_124 -> leaf_134
leaf_134  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_124

literal_125 -> leaf_135
leaf_135  [color=Gray,shape=rectangle,fontname=Inconsolata,label="goto"]
// END RANK literal_125

raw_126 -> leaf_136
leaf_136  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" statements and labels, and get"]
// END RANK raw_126

prespace_127 -> leaf_137
leaf_137  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_127

literal_128 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label="espalier"]
// END RANK literal_128

raw_129 -> leaf_139
leaf_139  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
running in"]
// END RANK raw_129

prespace_130 -> leaf_140
leaf_140  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_130

literal_131 -> leaf_141
leaf_141  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_131

raw_132 -> leaf_142
leaf_142  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which isn't happening yet due to remaining problems with
the modules system.

















"]
// END RANK raw_132


}
