digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 82"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-65"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 codeblock_6 section_7 section_8 section_9 section_10}
{rank=same; header_2 prose_3 prose_4 prose_5 codeblock_6 section_7 section_8 section_9 section_10}

header_2 [label="1 : Phrase"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

codeblock_6 [label="code block 12-14"]

section_7 [label="section: 17-34"]

section_8 [label="section: 35-50"]

section_9 [label="section: 51-65"]

section_10 [label="section: 66-82"]


// END RANK section_1

header_2 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Phrase"]
// END RANK header_2

prose_3 -> { raw_12}
{rank=same; raw_12}

raw_12 [label="raw"]


// END RANK prose_3

raw_12 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


This is a string builder class.
"]
// END RANK raw_12

prose_4 -> { raw_14 link_15 raw_16}
{rank=same; raw_14 link_15 raw_16}

raw_14 [label="raw"]

link_15 [label="link"]

raw_16 [label="raw"]


// END RANK prose_4

raw_14 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It is "]
// END RANK raw_14

link_15 -> { anchortext_18 url_19}
{rank=same; anchortext_18 url_19}

anchortext_18 [label="anchortext"]

url_19 [label="url"]


// END RANK link_15

anchortext_18 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="heritable"]
// END RANK anchortext_18

url_19 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
// END RANK url_19

raw_16 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", may be concatenated with either a string or itself,
and will eventually implement the full string library as method calls. 
"]
// END RANK raw_16

prose_5 -> { raw_23}
{rank=same; raw_23}

raw_23 [label="raw"]


// END RANK prose_5

raw_23 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I use a definite string building paradigm for which the Phrase class is a drop-in
replacement. 
"]
// END RANK raw_23

codeblock_6 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Phrase = setmetatable({}, {__index = phrase})"]
// END RANK codeblock_6

section_7 -> { header_26 prose_27 codeblock_28}
{rank=same; header_26 prose_27 codeblock_28}

header_26 [label="2 : .."]

prose_27 [label="prose"]

codeblock_28 [label="code block 23-32"]


// END RANK section_7

header_26 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** .."]
// END RANK header_26

prose_27 -> { raw_30}
{rank=same; raw_30}

raw_30 [label="raw"]


// END RANK prose_27

raw_30 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Concatenation is the frequent operation in working with Nodes.  By default,
all a Node is in a position to do is yield a string.  Phrase allows us to
enhance that with various table-assisted superpowers. 
"]
// END RANK raw_30

codeblock_28 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function cat(phrase, tail)
  if type(tail) == 'string' then
    return tail
  end
  phrase[#phrase + 1] = tail
  return phrase
end
Phrase.__concat = cat"]
// END RANK codeblock_28

section_8 -> { header_33 prose_34 codeblock_35}
{rank=same; header_33 prose_34 codeblock_35}

header_33 [label="2 : __tostring"]

prose_34 [label="prose"]

codeblock_35 [label="code block 39-48"]


// END RANK section_8

header_33 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ostring

We wa"]
// END RANK header_33

prose_34 -> { raw_37}
{rank=same; raw_37}

raw_37 [label="raw"]


// END RANK prose_34

raw_37 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

We want to behave like a string whenever 
"]
// END RANK raw_37

codeblock_35 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function toString(phrase)
  local str = \"\"
  for i,v in ipairs(phrase) do
    str = str .. tostring(v)
  end

  return str
end"]
// END RANK codeblock_35

section_9 -> { header_40 prose_41 codeblock_42}
{rank=same; header_40 prose_41 codeblock_42}

header_40 [label="2 : Constructor"]

prose_41 [label="prose"]

codeblock_42 [label="code block 53-63"]


// END RANK section_9

header_40 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="or

#!lua
local"]
// END RANK header_40

prose_41 -> { raw_44}
{rank=same; raw_44}

raw_44 [label="raw"]


// END RANK prose_41

raw_44 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_44

codeblock_42 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(_, str)
  local phrase = setmetatable({}, Phrase)
  if str then
    phrase[1] = str
  end
  return phrase
end

Phrase.__call = new"]
// END RANK codeblock_42

section_10 -> { header_47 prose_48 codeblock_49 codeblock_50}
{rank=same; header_47 prose_48 codeblock_49 codeblock_50}

header_47 [label="2 : inherit"]

prose_48 [label="prose"]

codeblock_49 [label="code block 68-78"]

codeblock_50 [label="code block 80-82"]


// END RANK section_10

header_47 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Ph"]
// END RANK header_47

prose_48 -> { raw_52}
{rank=same; raw_52}

raw_52 [label="raw"]


// END RANK prose_48

raw_52 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_52

codeblock_49 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Phrase.inherit(phrase)
  local Meta = setmetatable({}, phrase)
  Meta.__index = Meta
  Meta.__call  = getmetatable(phrase).__call
  Meta.__concat = getmetatable(phrase).__concat
  local meta = setmetatable({}, Meta)
  meta.__index = meta
  return Meta, meta
end"]
// END RANK codeblock_49

codeblock_50 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return setmetatable({}, {__call = new})"]
// END RANK codeblock_50


}
