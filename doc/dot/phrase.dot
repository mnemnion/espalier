digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 257"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-163"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 prose_6 prose_7 prose_8 section_9 section_10 section_11 section_12 section_13 section_14}
{rank=same; header_2 prose_3 prose_4 prose_5 prose_6 prose_7 prose_8 section_9 section_10 section_11 section_12 section_13 section_14}

header_2 [label="1 : Phrase"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

prose_6 [label="prose"]

prose_7 [label="prose"]

prose_8 [label="prose"]

section_9 [label="section: 24-30"]

section_10 [label="section: 31-38"]

section_11 [label="section: 39-50"]

section_12 [label="section: 51-67"]

section_13 [label="section: 101-163"]

section_14 [label="section: 164-208"]


// END RANK section_1

header_2 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Phrase"]
// END RANK header_2

prose_3 -> { raw_16}
{rank=same; raw_16}

raw_16 [label="raw"]


// END RANK prose_3

raw_16 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


This is a string builder class.
"]
// END RANK raw_16

prose_4 -> { raw_18 link_19 raw_20}
{rank=same; raw_18 link_19 raw_20}

raw_18 [label="raw"]

link_19 [label="link"]

raw_20 [label="raw"]


// END RANK prose_4

raw_18 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It is "]
// END RANK raw_18

link_19 -> { anchortext_22 url_23}
{rank=same; anchortext_22 url_23}

anchortext_22 [label="anchortext"]

url_23 [label="url"]


// END RANK link_19

anchortext_22 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="heritable"]
// END RANK anchortext_22

url_23 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
// END RANK url_23

raw_20 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", may be concatenated with either a string or itself,
and will eventually implement the full string library as method calls.
"]
// END RANK raw_20

prose_5 -> { raw_27}
{rank=same; raw_27}

raw_27 [label="raw"]


// END RANK prose_5

raw_27 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I use a definite string building paradigm for which the Phrase class is a drop-in
replacement.
"]
// END RANK raw_27

prose_6 -> { raw_29}
{rank=same; raw_29}

raw_29 [label="raw"]


// END RANK prose_6

raw_29 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The base Phrase class is mutable.  Concatenating strings will add to the array
portion of the Phrase, while catting another Phrase will combine the two
into a new Phrase.  This means in normal use, once a Phrase is added to another
Phrase, it will stay put.
"]
// END RANK raw_29

prose_7 -> { raw_31}
{rank=same; raw_31}

raw_31 [label="raw"]


// END RANK prose_7

raw_31 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Specifically, Phrases are mutable until they are concatenated to another Phrase.
At that point they are interned, any attempt to concatenate will spill the
contents into a new Phrase.
"]
// END RANK raw_31

prose_8 -> { raw_33}
{rank=same; raw_33}

raw_33 [label="raw"]


// END RANK prose_8

raw_33 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I thought, let's call it 'spill', rather than abbreviate Copy on Concat.

"]
// END RANK raw_33

section_9 -> { header_35 prose_36 prose_37}
{rank=same; header_35 prose_36 prose_37}

header_35 [label="3 : Phrase is string-like"]

prose_36 [label="prose"]

prose_37 [label="prose"]


// END RANK section_9

header_35 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Phrase is string-like"]
// END RANK header_35

prose_36 -> { raw_39}
{rank=same; raw_39}

raw_39 [label="raw"]


// END RANK prose_36

raw_39 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

It may be concatenated with strings at any point, and the result will be a Phrase.
"]
// END RANK raw_39

prose_37 -> { raw_41 prespace_42 literal_43 raw_44}
{rank=same; raw_41 prespace_42 literal_43 raw_44}

raw_41 [label="raw"]

prespace_42 [label="prespace"]

literal_43 [label="literal"]

raw_44 [label="raw"]


// END RANK prose_37

raw_41 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It will render the same string you would expect any time"]
// END RANK raw_41

prespace_42 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_42

literal_43 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tostring"]
// END RANK literal_43

raw_44 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is triggered.

"]
// END RANK raw_44

section_10 -> { header_49 prose_50 prose_51}
{rank=same; header_49 prose_50 prose_51}

header_49 [label="3 : Phrase is not entirely string-like"]

prose_50 [label="prose"]

prose_51 [label="prose"]


// END RANK section_10

header_49 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Phrase is not entirely string-like"]
// END RANK header_49

prose_50 -> { raw_53 prespace_54 literal_55 raw_56 prespace_57 literal_58 raw_59 prespace_60 literal_61 raw_62}
{rank=same; raw_53 prespace_54 literal_55 raw_56 prespace_57 literal_58 raw_59 prespace_60 literal_61 raw_62}

raw_53 [label="raw"]

prespace_54 [label="prespace"]

literal_55 [label="literal"]

raw_56 [label="raw"]

prespace_57 [label="prespace"]

literal_58 [label="literal"]

raw_59 [label="raw"]

prespace_60 [label="prespace"]

literal_61 [label="literal"]

raw_62 [label="raw"]


// END RANK prose_50

raw_53 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

We have a field"]
// END RANK raw_53

prespace_54 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_54

literal_55 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label="phrase.len"]
// END RANK literal_55

raw_56 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" that tells you what"]
// END RANK raw_56

prespace_57 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_57

literal_58 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#tostring(phrase)"]
// END RANK literal_58

raw_59 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" would be."]
// END RANK raw_59

prespace_60 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_60

literal_61 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#phrase"]
// END RANK literal_61

raw_62 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is the number of fragments in the array portion of the phrase.
"]
// END RANK raw_62

prose_51 -> { raw_73 prespace_74 literal_75 raw_76}
{rank=same; raw_73 prespace_74 literal_75 raw_76}

raw_73 [label="raw"]

prespace_74 [label="prespace"]

literal_75 [label="literal"]

raw_76 [label="raw"]


// END RANK prose_51

raw_73 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We use"]
// END RANK raw_73

prespace_74 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_74

literal_75 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#Phrase"]
// END RANK literal_75

raw_76 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" all the time for iteration, so we don't want to block it.

"]
// END RANK raw_76

section_11 -> { header_81 prose_82 prose_83 prose_84}
{rank=same; header_81 prose_82 prose_83 prose_84}

header_81 [label="2 : Phrase is contagious"]

prose_82 [label="prose"]

prose_83 [label="prose"]

prose_84 [label="prose"]


// END RANK section_11

header_81 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Phrase is contagious"]
// END RANK header_81

prose_82 -> { raw_86}
{rank=same; raw_86}

raw_86 [label="raw"]


// END RANK prose_82

raw_86 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Phrases, by design, subsume strings any time they are concatenated. This
will tend to cause failure when handed to things like the string library.
"]
// END RANK raw_86

prose_83 -> { raw_88 prespace_89 literal_90 raw_91}
{rank=same; raw_88 prespace_89 literal_90 raw_91}

raw_88 [label="raw"]

prespace_89 [label="prespace"]

literal_90 [label="literal"]

raw_91 [label="raw"]


// END RANK prose_83

raw_88 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Better to write a Phrase-native substitute unless it's an endpoint like"]
// END RANK raw_88

prespace_89 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_89

literal_90 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label="write"]
// END RANK literal_90

raw_91 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  The combination of interned immutable strings and pervasing tabling
over concatenation is powerful and fast in Lua.
"]
// END RANK raw_91

prose_84 -> { raw_96 prespace_97 literal_98 raw_99}
{rank=same; raw_96 prespace_97 literal_98 raw_99}

raw_96 [label="raw"]

prespace_97 [label="prespace"]

literal_98 [label="literal"]

raw_99 [label="raw"]


// END RANK prose_84

raw_96 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's ok to just call"]
// END RANK raw_96

prespace_97 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_97

literal_98 -> leaf_102
leaf_102  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tostring"]
// END RANK literal_98

raw_99 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and be done.

"]
// END RANK raw_99

section_12 -> { header_104 prose_105 prose_106 prose_107 prose_108 section_109}
{rank=same; header_104 prose_105 prose_106 prose_107 prose_108 section_109}

header_104 [label="2 : Phrase is (relatively) primitive"]

prose_105 [label="prose"]

prose_106 [label="prose"]

prose_107 [label="prose"]

prose_108 [label="prose"]

section_109 [label="section: 68-100"]


// END RANK section_12

header_104 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Phrase is (relatively) primitive"]
// END RANK header_104

prose_105 -> { raw_111 prespace_112 literal_113 raw_114 prespace_115 literal_116 raw_117 prespace_118 literal_119 raw_120 prespace_121 literal_122 raw_123 prespace_124 literal_125 raw_126}
{rank=same; raw_111 prespace_112 literal_113 raw_114 prespace_115 literal_116 raw_117 prespace_118 literal_119 raw_120 prespace_121 literal_122 raw_123 prespace_124 literal_125 raw_126}

raw_111 [label="raw"]

prespace_112 [label="prespace"]

literal_113 [label="literal"]

raw_114 [label="raw"]

prespace_115 [label="prespace"]

literal_116 [label="literal"]

raw_117 [label="raw"]

prespace_118 [label="prespace"]

literal_119 [label="literal"]

raw_120 [label="raw"]

prespace_121 [label="prespace"]

literal_122 [label="literal"]

raw_123 [label="raw"]

prespace_124 [label="prespace"]

literal_125 [label="literal"]

raw_126 [label="raw"]


// END RANK prose_105

raw_111 -> leaf_127
leaf_127  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

It provides concatenation,"]
// END RANK raw_111

prespace_112 -> leaf_128
leaf_128  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_112

literal_113 -> leaf_129
leaf_129  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tostring"]
// END RANK literal_113

raw_114 -> leaf_130
leaf_130  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and a length field"]
// END RANK raw_114

prespace_115 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_115

literal_116 -> leaf_132
leaf_132  [color=Gray,shape=rectangle,fontname=Inconsolata,label="len"]
// END RANK literal_116

raw_117 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" separate
from"]
// END RANK raw_117

prespace_118 -> leaf_134
leaf_134  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_118

literal_119 -> leaf_135
leaf_135  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#"]
// END RANK literal_119

raw_120 -> leaf_136
leaf_136  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  It has"]
// END RANK raw_120

prespace_121 -> leaf_137
leaf_137  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_121

literal_122 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label="it"]
// END RANK literal_122

raw_123 -> leaf_139
leaf_139  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_123

prespace_124 -> leaf_140
leaf_140  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_124

literal_125 -> leaf_141
leaf_141  [color=Gray,shape=rectangle,fontname=Inconsolata,label="idEst"]
// END RANK literal_125

raw_126 -> leaf_142
leaf_142  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", the latter particularly useful to
avoid repetitive importing of the class.
"]
// END RANK raw_126

prose_106 -> { raw_143}
{rank=same; raw_143}

raw_143 [label="raw"]


// END RANK prose_106

raw_143 -> leaf_144
leaf_144  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In particular, and on purpose, Phrase makes no effort to balance its binary
structure.  This way, sensible, ordinary use of Phrase will preserve the
tree structure of the DAG being transduced.
"]
// END RANK raw_143

prose_107 -> { raw_145 prespace_146 literal_147 raw_148}
{rank=same; raw_145 prespace_146 literal_147 raw_148}

raw_145 [label="raw"]

prespace_146 [label="prespace"]

literal_147 [label="literal"]

raw_148 [label="raw"]


// END RANK prose_107

raw_145 -> leaf_149
leaf_149  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The typical grammar is of the form"]
// END RANK raw_145

prespace_146 -> leaf_150
leaf_150  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_146

literal_147 -> leaf_151
leaf_151  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" a : b* EOF / Err, b: c c*"]
// END RANK literal_147

raw_148 -> leaf_152
leaf_152  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", which will
naturally take a head-weighted form.
"]
// END RANK raw_148

prose_108 -> { raw_153}
{rank=same; raw_153}

raw_153 [label="raw"]


// END RANK prose_108

raw_153 -> leaf_154
leaf_154  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It is a trivial log-log operation to bring a Phrase into balance if that
is desireable.

"]
// END RANK raw_153

section_109 -> { header_155 prose_156 prose_157 prose_158 prose_159 prose_160 prose_161 codeblock_162}
{rank=same; header_155 prose_156 prose_157 prose_158 prose_159 prose_160 prose_161 codeblock_162}

header_155 [label="3 : Roadmap"]

prose_156 [label="prose"]

prose_157 [label="prose"]

prose_158 [label="prose"]

prose_159 [label="prose"]

prose_160 [label="prose"]

prose_161 [label="prose"]

codeblock_162 [label="code block 92-98"]


// END RANK section_109

header_155 -> leaf_163
leaf_163  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Roadmap"]
// END RANK header_155

prose_156 -> { raw_164 prespace_165 literal_166 raw_167 prespace_168 literal_169 raw_170}
{rank=same; raw_164 prespace_165 literal_166 raw_167 prespace_168 literal_169 raw_170}

raw_164 [label="raw"]

prespace_165 [label="prespace"]

literal_166 [label="literal"]

raw_167 [label="raw"]

prespace_168 [label="prespace"]

literal_169 [label="literal"]

raw_170 [label="raw"]


// END RANK prose_156

raw_164 -> leaf_171
leaf_171  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

I would like to add"]
// END RANK raw_164

prespace_165 -> leaf_172
leaf_172  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_165

literal_166 -> leaf_173
leaf_173  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Phrase:ffind(str)"]
// END RANK literal_166

raw_167 -> leaf_174
leaf_174  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", for fast find.  This only works if
the"]
// END RANK raw_167

prespace_168 -> leaf_175
leaf_175  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_168

literal_169 -> leaf_176
leaf_176  [color=Gray,shape=rectangle,fontname=Inconsolata,label="str"]
// END RANK literal_169

raw_170 -> leaf_177
leaf_177  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is a literal fragment somewhere in the phrase.
"]
// END RANK raw_170

prose_157 -> { raw_178}
{rank=same; raw_178}

raw_178 [label="raw"]


// END RANK prose_157

raw_178 -> leaf_179
leaf_179  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
More enhancements of that nature should be in an extended class. Think gsub
with the full power of lpeg instead of the quirky pattern syntax I can never
remember.
"]
// END RANK raw_178

prose_158 -> { raw_180}
{rank=same; raw_180}

raw_180 [label="raw"]


// END RANK prose_158

raw_180 -> leaf_181
leaf_181  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Also, one premise of Phrase is that it's encoding-unaware. I'd like to add
to it by calculating the codepoints and adding a \"ulen\" field, but don't
want to pay the cost for the base class, since Node in particular counts on
grammars to be correct about the bytes they want to consume.
"]
// END RANK raw_180

prose_159 -> { raw_182}
{rank=same; raw_182}

raw_182 [label="raw"]


// END RANK prose_159

raw_182 -> leaf_183
leaf_183  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The language interface of lpeg emphasises text, as it should, but Lua strings
are eight-bit clean and commonly enough used to intern userdata and query it.
"]
// END RANK raw_182

prose_160 -> { raw_184 prespace_185 literal_186 raw_187}
{rank=same; raw_184 prespace_185 literal_186 raw_187}

raw_184 [label="raw"]

prespace_185 [label="prespace"]

literal_186 [label="literal"]

raw_187 [label="raw"]


// END RANK prose_160

raw_184 -> leaf_188
leaf_188  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Phrase can actually be used as-is to build up rope-like binary data, if that
ever comes in handy.  I'd want a different"]
// END RANK raw_184

prespace_185 -> leaf_189
leaf_189  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_185

literal_186 -> leaf_190
leaf_190  [color=Gray,shape=rectangle,fontname=Inconsolata,label="idEst"]
// END RANK literal_186

raw_187 -> leaf_191
leaf_191  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" to not puke all over
my terminal by accident.
"]
// END RANK raw_187

prose_161 -> { raw_192}
{rank=same; raw_192}

raw_192 [label="raw"]


// END RANK prose_161

raw_192 -> leaf_193
leaf_193  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Speaking of rope-like, Phrase will have better performance in environments
where it is more 'bushy'.
"]
// END RANK raw_192

codeblock_162 -> leaf_194
leaf_194  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local init, new
local s = require \"core/status\" ()
s.angry = false
local Phrase = {}
Phrase.it = require \"core/check\""]
// END RANK codeblock_162

section_13 -> { header_195 prose_196 prose_197 prose_198 prose_199 codeblock_200}
{rank=same; header_195 prose_196 prose_197 prose_198 prose_199 codeblock_200}

header_195 [label="2 : __concat"]

prose_196 [label="prose"]

prose_197 [label="prose"]

prose_198 [label="prose"]

prose_199 [label="prose"]

codeblock_200 [label="code block 118-161"]


// END RANK section_13

header_195 -> leaf_201
leaf_201  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** __concat"]
// END RANK header_195

prose_196 -> { raw_202}
{rank=same; raw_202}

raw_202 [label="raw"]


// END RANK prose_196

raw_202 -> leaf_203
leaf_203  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Concatenation is the frequent operation in working with Nodes.  By default,
all a Node is in a position to do is yield a string.  Phrase allows us to
enhance that with various table-assisted superpowers.
"]
// END RANK raw_202

prose_197 -> { raw_204}
{rank=same; raw_204}

raw_204 [label="raw"]


// END RANK prose_197

raw_204 -> leaf_205
leaf_205  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Also, Lua strings are very cheap once created. Concatenating them together in
a recursively larger pattern is really expensive by comparison, and that's
the entire paradigm of all these tools right now.
"]
// END RANK raw_204

prose_198 -> { raw_206}
{rank=same; raw_206}

raw_206 [label="raw"]


// END RANK prose_198

raw_206 -> leaf_207
leaf_207  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This and retaining the Docs in-memory will get the spring back in our step.
"]
// END RANK raw_206

prose_199 -> { raw_208}
{rank=same; raw_208}

raw_208 [label="raw"]


// END RANK prose_199

raw_208 -> leaf_209
leaf_209  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- parameters
  -  head_phrase:  This may be either a primitive string or a Phrase.
  -  tail_phrase:  This may be either primitive or a Phrase.  If head_phrase
                   is a string, tail_phrase is not, or we'd be in the VM.
"]
// END RANK raw_208

codeblock_200 -> leaf_210
leaf_210  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function spill(phrase)
   local new_phrase = init()
   for k, v in pairs(phrase) do
      new_phrase[k] = v
   end
   new_phrase.intern = nil

   return new_phrase
end


local function __concat(head_phrase, tail_phrase)
   if type(head_phrase) == 'string' then
      -- bump the tail phrase accordingly
      if tail_phrase.intern then
         tail_phrase = spill(tail_phrase)
      end

      table.insert(tail_phrase, 1, head_phrase)
      tail_phrase.len = tail_phrase.len + #head_phrase
      return tail_phrase
   end
   local typica = type(tail_phrase)
   if typica == \"string\" then
      if head_phrase.intern then
         head_phrase = spill(head_phrase)
      end
      head_phrase[#head_phrase + 1] = tail_phrase
      head_phrase.len = head_phrase.len + #tail_phrase
      return head_phrase
      elseif typica == \"table\" and tail_phrase.idEst == new then
      local new_phrase = init()
      head_phrase.intern = true -- head_phrase is now in the middle of a string
      tail_phrase.intern = true -- tail_phrase shouldn't be bump-catted
      new_phrase[1] = head_phrase
      new_phrase[2] = tail_phrase
      new_phrase.len = head_phrase.len + tail_phrase.len
      return new_phrase
   end

   return nil, \"tail phrase was unsuitable for concatenation\"
end"]
// END RANK codeblock_200

section_14 -> { header_211 prose_212 codeblock_213 codeblock_214 codeblock_215 section_216}
{rank=same; header_211 prose_212 codeblock_213 codeblock_214 codeblock_215 section_216}

header_211 [label="2 : __tostring"]

prose_212 [label="prose"]

codeblock_213 [label="code block 168-177"]

codeblock_214 [label="code block 179-183"]

codeblock_215 [label="code block 185-206"]

section_216 [label="section: 209-257"]


// END RANK section_14

header_211 -> leaf_217
leaf_217  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** __tostring"]
// END RANK header_211

prose_212 -> { raw_218}
{rank=same; raw_218}

raw_218 [label="raw"]


// END RANK prose_212

raw_218 -> leaf_219
leaf_219  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Treating Phrase as a string at any point should render it into one.
"]
// END RANK raw_218

codeblock_213 -> leaf_220
leaf_220  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function __tostring(phrase)
  local str = \"\"
  for i,v in ipairs(phrase) do
    str = str .. tostring(v)
  end

  return str
end"]
// END RANK codeblock_213

codeblock_214 -> leaf_221
leaf_221  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local PhraseMeta = {__index = Phrase,
                  __concat = __concat,
                  __tostring = __tostring}"]
// END RANK codeblock_214

codeblock_215 -> leaf_222
leaf_222  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
init = function()
   return setmetatable ({}, PhraseMeta)
end

new = function(phrase_seed)
   phrase_seed = phrase_seed or \"\"
   local phrase = init()
   local typica = type(phrase_seed)
   if typica == \"string\" then
      phrase[1] = phrase_seed
      phrase.len = #phrase_seed
   else
      s:complain(\"Error in Phrase\", \"cannot accept phrase seed of type\" .. typica,
                 phrase_seed)
   end
   return phrase
end

Phrase.idEst = new"]
// END RANK codeblock_215

section_216 -> { header_223 prose_224 codeblock_225 codeblock_226}
{rank=same; header_223 prose_224 codeblock_225 codeblock_226}

header_223 [label="3 : spec"]

prose_224 [label="prose"]

codeblock_225 [label="code block 213-230"]

codeblock_226 [label="code block 233-235"]


// END RANK section_216

header_223 -> leaf_227
leaf_227  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ec

Stick"]
// END RANK header_223

prose_224 -> { raw_228}
{rank=same; raw_228}

raw_228 [label="raw"]


// END RANK prose_224

raw_228 -> leaf_229
leaf_229  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Stick this somewhere better
"]
// END RANK raw_228

codeblock_225 -> leaf_230
leaf_230  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function spec()
   local a = new \"Sphinx of \" .. \"black quartz \"
   a: it \"phrase-a\"
      : passedTo(tostring)
      : gives \"Sphinx of black quartz \"
      : fin()

   local b = a .. \"judge my \" .. \"vow.\"
   b: it \"phrase-b\"
      : passedTo(tostring)
      : gives \"Sphinx of black quartz judge my vow.\"
      : fin()

end

spec()"]
// END RANK codeblock_225

codeblock_226 -> leaf_231
leaf_231  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return new"]
// END RANK codeblock_226


}
