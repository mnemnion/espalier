digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 104"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-87"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 codeblock_6 section_7 section_8 section_9 section_10}
{rank=same; header_2 prose_3 prose_4 prose_5 codeblock_6 section_7 section_8 section_9 section_10}

header_2 [label="1 : Phrase"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

codeblock_6 [label="code block 12-15"]

section_7 [label="section: 18-56"]

section_8 [label="section: 57-72"]

section_9 [label="section: 73-87"]

section_10 [label="section: 88-104"]


// END RANK section_1

header_2 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Phrase"]
// END RANK header_2

prose_3 -> { raw_12}
{rank=same; raw_12}

raw_12 [label="raw"]


// END RANK prose_3

raw_12 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


This is a string builder class.
"]
// END RANK raw_12

prose_4 -> { raw_14 link_15 raw_16}
{rank=same; raw_14 link_15 raw_16}

raw_14 [label="raw"]

link_15 [label="link"]

raw_16 [label="raw"]


// END RANK prose_4

raw_14 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It is "]
// END RANK raw_14

link_15 -> { anchortext_18 url_19}
{rank=same; anchortext_18 url_19}

anchortext_18 [label="anchortext"]

url_19 [label="url"]


// END RANK link_15

anchortext_18 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="heritable"]
// END RANK anchortext_18

url_19 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
// END RANK url_19

raw_16 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", may be concatenated with either a string or itself,
and will eventually implement the full string library as method calls. 
"]
// END RANK raw_16

prose_5 -> { raw_23}
{rank=same; raw_23}

raw_23 [label="raw"]


// END RANK prose_5

raw_23 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I use a definite string building paradigm for which the Phrase class is a drop-in
replacement. 
"]
// END RANK raw_23

codeblock_6 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Phrase = setmetatable({}, {__index = phrase})
Phrase.isPhrase = Phrase"]
// END RANK codeblock_6

section_7 -> { header_26 prose_27 prose_28 prose_29 codeblock_30}
{rank=same; header_26 prose_27 prose_28 prose_29 codeblock_30}

header_26 [label="2 : .."]

prose_27 [label="prose"]

prose_28 [label="prose"]

prose_29 [label="prose"]

codeblock_30 [label="code block 31-54"]


// END RANK section_7

header_26 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** .."]
// END RANK header_26

prose_27 -> { raw_32}
{rank=same; raw_32}

raw_32 [label="raw"]


// END RANK prose_27

raw_32 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Concatenation is the frequent operation in working with Nodes.  By default,
all a Node is in a position to do is yield a string.  Phrase allows us to
enhance that with various table-assisted superpowers. 
"]
// END RANK raw_32

prose_28 -> { raw_34}
{rank=same; raw_34}

raw_34 [label="raw"]


// END RANK prose_28

raw_34 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- [ ] #todo #fixme
"]
// END RANK raw_34

prose_29 -> { raw_36}
{rank=same; raw_36}

raw_36 [label="raw"]


// END RANK prose_29

raw_36 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
    -  The \"return only the tail\" thing works in Clu, and I can't explain
       that.  I either need to document why it's correct or more likely write
       something that works in all cases.  It smells like code that works
       because it's broken twice. 
"]
// END RANK raw_36

codeblock_30 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function cat(phrase, tail)
  if type(tail) == 'string' then
    return tail
  end
  --[[
  if type(tail) == 'string' then
    if type(phrase) == 'string' then
      return phrase .. tail
    else
      phrase[#phrase + 1] = tail
    end
  elseif type(phrase) == \"string\" then
    if type(tail) == \"table\" then
      return phrase .. tostring(tail)
    end
  else
  --]]
  phrase[#phrase + 1] = tail

  return phrase
end
Phrase.__concat = cat"]
// END RANK codeblock_30

section_8 -> { header_39 prose_40 codeblock_41}
{rank=same; header_39 prose_40 codeblock_41}

header_39 [label="2 : __tostring"]

prose_40 [label="prose"]

codeblock_41 [label="code block 61-70"]


// END RANK section_8

header_39 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ve like a stri"]
// END RANK header_39

prose_40 -> { raw_43}
{rank=same; raw_43}

raw_43 [label="raw"]


// END RANK prose_40

raw_43 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

We want to behave like a string whenever 
"]
// END RANK raw_43

codeblock_41 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function toString(phrase)
  local str = \"\"
  for i,v in ipairs(phrase) do
    str = str .. tostring(v)
  end

  return str
end"]
// END RANK codeblock_41

section_9 -> { header_46 prose_47 codeblock_48}
{rank=same; header_46 prose_47 codeblock_48}

header_46 [label="2 : Constructor"]

prose_47 [label="prose"]

codeblock_48 [label="code block 75-85"]


// END RANK section_9

header_46 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" new(_, str)
	l"]
// END RANK header_46

prose_47 -> { raw_50}
{rank=same; raw_50}

raw_50 [label="raw"]


// END RANK prose_47

raw_50 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_50

codeblock_48 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(_, str)
  local phrase = setmetatable({}, Phrase)
  if str then
    phrase[1] = str
  end
  return phrase
end

Phrase.__call = new"]
// END RANK codeblock_48

section_10 -> { header_53 prose_54 codeblock_55 codeblock_56}
{rank=same; header_53 prose_54 codeblock_55 codeblock_56}

header_53 [label="2 : inherit"]

prose_54 [label="prose"]

codeblock_55 [label="code block 90-100"]

codeblock_56 [label="code block 102-104"]


// END RANK section_10

header_53 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label="phrase)
  l"]
// END RANK header_53

prose_54 -> { raw_58}
{rank=same; raw_58}

raw_58 [label="raw"]


// END RANK prose_54

raw_58 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_58

codeblock_55 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Phrase.inherit(phrase)
  local Meta = setmetatable({}, phrase)
  Meta.__index = Meta
  Meta.__call  = getmetatable(phrase).__call
  Meta.__concat = getmetatable(phrase).__concat
  local meta = setmetatable({}, Meta)
  meta.__index = meta
  return Meta, meta
end"]
// END RANK codeblock_55

codeblock_56 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return setmetatable({}, {__call = new})"]
// END RANK codeblock_56


}
