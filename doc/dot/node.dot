digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 379"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-284"]


section_1 -> { header_2 prose_3 section_4 section_5 section_6 section_7 section_8}
{rank=same; header_2 prose_3 section_4 section_5 section_6 section_7 section_8}

header_2 [label="1 : Node"]

prose_3 [label="prose"]

section_4 [label="section: 6-12"]

section_5 [label="section: 13-27"]

section_6 [label="section: 28-44"]

section_7 [label="section: 45-263"]

section_8 [label="section: 285-344"]


header_2 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Node"]
prose_3 -> { raw_10}
{rank=same; raw_10}

raw_10 [label="raw"]


raw_10 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


  Time to stabilize this class once and for all. 
"]
section_4 -> { header_12 prose_13 codeblock_14}
{rank=same; header_12 prose_13 codeblock_14}

header_12 [label="3 : includes"]

prose_13 [label="prose"]

codeblock_14 [label="code block 8-11"]


header_12 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** includes"]
prose_13 -> { raw_16}
{rank=same; raw_16}

raw_16 [label="raw"]


raw_16 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
codeblock_14 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local s = require \"status\"
local dot = require \"node/dot\""]
section_5 -> { header_19 prose_20 codeblock_21}
{rank=same; header_19 prose_20 codeblock_21}

header_19 [label="2 : Node metatable"]

prose_20 [label="prose"]

codeblock_21 [label="code block 19-24"]


header_19 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Node metatable"]
prose_20 -> { raw_23 literal_24 raw_25}
{rank=same; raw_23 literal_24 raw_25}

raw_23 [label="raw"]

literal_24 [label="literal"]

raw_25 [label="raw"]


raw_23 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The Node metatable is the root table for any Node.  I'm planning to make
an intermediate class/table called Root that is in common for any instance
Node.  All Root absolutely has to contain is "]
literal_24 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="str"]
raw_25 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". 
"]
codeblock_21 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
local Node = {}
Node.__index = Node
Node.isNode = true"]
section_6 -> { header_30 prose_31 prose_32 codeblock_33 prose_34}
{rank=same; header_30 prose_31 prose_32 codeblock_33 prose_34}

header_30 [label="2 : Fields"]

prose_31 [label="prose"]

prose_32 [label="prose"]

codeblock_33 [label="code block 37-40"]

prose_34 [label="prose"]


header_30 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Fields"]
prose_31 -> { raw_36}
{rank=same; raw_36}

raw_36 [label="raw"]


raw_36 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

   - id :  A string naming the Node. 
           This is identical to the name of the pattern that recognizes
           or captures it.
"]
prose_32 -> { raw_38}
{rank=same; raw_38}

raw_38 [label="raw"]


raw_38 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
   - line_first :  Always -1. #deprecated
   - line_last  :  Always -1. #deprecated
"]
codeblock_33 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Node.line_first = -1
Node.line_last  = -1"]
prose_34 -> { raw_41 link_42 raw_43}
{rank=same; raw_41 link_42 raw_43}

raw_41 [label="raw"]

link_42 [label="link"]

raw_43 [label="raw"]


raw_41 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It occurs to me we could lazily calculate these using the "]
link_42 -> { anchortext_45 url_46}
{rank=same; anchortext_45 url_46}

anchortext_45 [label="anchortext"]

url_46 [label="url"]


anchortext_45 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="line iterator"]
url_46 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
raw_43 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".

"]
section_7 -> { header_50 prose_51 section_52 section_53 section_54 section_55}
{rank=same; header_50 prose_51 section_52 section_53 section_54 section_55}

header_50 [label="2 : Methods"]

prose_51 [label="prose"]

section_52 [label="section: 47-55"]

section_53 [label="section: 56-221"]

section_54 [label="section: 246-263"]

section_55 [label="section: 264-266"]


header_50 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Methods"]
prose_51 -> { raw_57}
{rank=same; raw_57}

raw_57 [label="raw"]


raw_57 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
section_52 -> { header_59 prose_60 codeblock_61}
{rank=same; header_59 prose_60 codeblock_61}

header_59 [label="3 : Scaffolding "]

prose_60 [label="prose"]

codeblock_61 [label="code block 49-53"]


header_59 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Scaffolding "]
prose_60 -> { raw_63}
{rank=same; raw_63}

raw_63 [label="raw"]


raw_63 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
codeblock_61 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Node.toLua(node)
  s:halt(\"No toLua method for \" .. node.id)
end"]
section_53 -> { header_66 prose_67 prose_68 codeblock_69 codeblock_70 codeblock_71 section_72 section_73 section_74 section_75 section_76}
{rank=same; header_66 prose_67 prose_68 codeblock_69 codeblock_70 codeblock_71 section_72 section_73 section_74 section_75 section_76}

header_66 [label="3 : Visualizers"]

prose_67 [label="prose"]

prose_68 [label="prose"]

codeblock_69 [label="code block 63-81"]

codeblock_70 [label="code block 83-87"]

codeblock_71 [label="code block 89-117"]

section_72 [label="section: 119-139"]

section_73 [label="section: 140-162"]

section_74 [label="section: 163-202"]

section_75 [label="section: 203-221"]

section_76 [label="section: 222-245"]


header_66 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Visualizers"]
prose_67 -> { raw_78}
{rank=same; raw_78}

raw_78 [label="raw"]


raw_78 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This gives us a nice, tree-shaped printout of an entire Node.
"]
prose_68 -> { raw_80}
{rank=same; raw_80}

raw_80 [label="raw"]


raw_80 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We're less disciplined than we should be about up-assigning this to
inherited Node classes. 
"]
codeblock_69 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Node.toString(node, depth)
   local depth = depth or 0
   local phrase = \"\"
   phrase = (\"  \"):rep(depth) .. \"id: \" .. node.id .. \",  \"
      .. \"first: \" .. node.first .. \", last: \" .. node.last
   if node[1] then
      phrase = phrase .. \"\\n\"
      for _,v in ipairs(node) do
         if (v.isNode) then
            phrase = phrase .. Node.toString(v, depth + 1)
         end
      end
   else
      phrase = phrase .. \",  val: \" .. node.str:sub(node.first, node.last) .. \"\\n\"
   end
   return phrase
end"]
codeblock_70 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Node.span(node)
   return node.str:sub(node.first, node.last)
end"]
codeblock_71 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Node.dotLabel(node)
  return node.id
end

function Node.toMarkdown(node)
  if not node[1] then
    return string.sub(node.str, node.first, node.last)
  else
    s:halt(\"no toMarkdown for \" .. node.id)
  end
end

function Node.dot(node)
  return dot.dot(node)
end

function Node.toValue(node)
  if node.__VALUE then
    return node.__VALUE
  end
  if node.str then
    return node.str:sub(node.first,node.last)
  else
    s:halt(\"no str on node \" .. node.id)
  end
end
"]
section_72 -> { header_85 prose_86 codeblock_87}
{rank=same; header_85 prose_86 codeblock_87}

header_85 [label="4 : Node.walkPost"]

prose_86 [label="prose"]

codeblock_87 [label="code block 123-138"]


header_85 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Node.walkPost"]
prose_86 -> { raw_89}
{rank=same; raw_89}

raw_89 [label="raw"]


raw_89 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Depth-first iterator, postfix 
"]
codeblock_87 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Node.walkPost(node)
    local function traverse(ast)
        if not ast.isNode then return nil end

        for _, v in ipairs(ast) do
            if type(v) == 'table' and v.isNode then
              traverse(v)
            end
        end
        coroutine.yield(ast)
    end

    return coroutine.wrap(function() traverse(node) end)
end"]
section_73 -> { header_92 prose_93 codeblock_94}
{rank=same; header_92 prose_93 codeblock_94}

header_92 [label="4 : Node.walk"]

prose_93 [label="prose"]

codeblock_94 [label="code block 144-160"]


header_92 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Node.walk"]
prose_93 -> { raw_96}
{rank=same; raw_96}

raw_96 [label="raw"]


raw_96 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Presearch iterator.  This is the default. 
"]
codeblock_94 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Node.walk(node)
  local function traverse(ast)
    if not ast.isNode then return nil end

    coroutine.yield(ast)
    for _, v in ipairs(ast) do
      if type(v) == 'table' and v.isNode then
        traverse(v)
      end
    end
  end

  return coroutine.wrap(function() traverse(node) end)
end
"]
section_74 -> { header_99 prose_100 codeblock_101}
{rank=same; header_99 prose_100 codeblock_101}

header_99 [label="4 : Node.select(node, pred)"]

prose_100 [label="prose"]

codeblock_101 [label="code block 169-200"]


header_99 -> leaf_102
leaf_102  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Node.select(node, pred)"]
prose_100 -> { raw_103 literal_104 raw_105 literal_106 raw_107}
{rank=same; raw_103 literal_104 raw_105 literal_106 raw_107}

raw_103 [label="raw"]

literal_104 [label="literal"]

raw_105 [label="raw"]

literal_106 [label="literal"]

raw_107 [label="raw"]


raw_103 -> leaf_108
leaf_108  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Takes the Node and walks it, yielding the Nodes which match the predicate."]
literal_104 -> leaf_109
leaf_109  [color=Gray,shape=rectangle,fontname=Inconsolata,label="pred"]
raw_105 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is either a string, which matches to "]
literal_106 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label="id"]
raw_107 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", or a function, which takes
a Node and returns true or false on some premise. 
"]
codeblock_101 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Node.select(node, pred)
   local function qualifies(node, pred)
      if type(pred) == 'string' then
         if type(node) == 'table' 
          and node.id and node.id == pred then
            return true
         else
            return false
         end
      elseif type(pred) == 'function' then
         return pred(node)
      else
         s:halt(\"cannot select on predicate of type \" .. type(pred))
      end
   end

   local function traverse(ast)
      -- breadth first
      if qualifies(ast, pred) then
         coroutine.yield(ast)
      end
      if ast.isNode then
         for _, v in ipairs(ast) do
            traverse(v)
         end
      end
   end

   return coroutine.wrap(function() traverse(node) end)
end"]
section_75 -> { header_114 prose_115 codeblock_116}
{rank=same; header_114 prose_115 codeblock_116}

header_114 [label="4 : Node.tokens(node)"]

prose_115 [label="prose"]

codeblock_116 [label="code block 207-219"]


header_114 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Node.tokens(node)"]
prose_115 -> { raw_118}
{rank=same; raw_118}

raw_118 [label="raw"]


raw_118 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Iterator returning all captured values as strings.
"]
codeblock_116 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Node.tokens(node)
  local function traverse(ast)
    for node in N.walk(ast) do
      if not node[1] then
        coroutine.yield(node:toValue())
      end
    end
  end

  return coroutine.wrap(function() traverse(node) end)
end  "]
section_76 -> { header_121 prose_122 prose_123 prose_124 codeblock_125}
{rank=same; header_121 prose_122 prose_123 prose_124 codeblock_125}

header_121 [label="4 : Node.unroll(node)"]

prose_122 [label="prose"]

prose_123 [label="prose"]

prose_124 [label="prose"]

codeblock_125 [label="code block 236-243"]


header_121 -> leaf_126
leaf_126  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Node.unroll(node)"]
prose_122 -> { raw_127 literal_128 raw_129 literal_130 raw_131}
{rank=same; raw_127 literal_128 raw_129 literal_130 raw_131}

raw_127 [label="raw"]

literal_128 [label="literal"]

raw_129 [label="raw"]

literal_130 [label="literal"]

raw_131 [label="raw"]


raw_127 -> leaf_132
leaf_132  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  This iterator returns all Nodes, in prefix order, while interpolating
strings.  Specifically: When a Node has a "]
literal_128 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label="first"]
raw_129 -> leaf_134
leaf_134  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" that is less than the"]
literal_130 -> leaf_135
leaf_135  [color=Gray,shape=rectangle,fontname=Inconsolata,label="first"]
raw_131 -> leaf_136
leaf_136  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" if its first child, it makes a slice of the string corresponding to
that gap, and so on between each child, and once more at the end.
"]
prose_123 -> { raw_137}
{rank=same; raw_137}

raw_137 [label="raw"]


raw_137 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The effect is that any sections of the string which were dropped are now
interpolated into the unrolled Node.
"]
prose_124 -> { raw_139 literal_140 raw_141 literal_142 raw_143 literal_144 raw_145}
{rank=same; raw_139 literal_140 raw_141 literal_142 raw_143 literal_144 raw_145}

raw_139 [label="raw"]

literal_140 [label="literal"]

raw_141 [label="raw"]

literal_142 [label="literal"]

raw_143 [label="raw"]

literal_144 [label="literal"]

raw_145 [label="raw"]


raw_139 -> leaf_146
leaf_146  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The premise is that by calling "]
literal_140 -> leaf_147
leaf_147  [color=Gray,shape=rectangle,fontname=Inconsolata,label="toValue()"]
raw_141 -> leaf_148
leaf_148  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" or "]
literal_142 -> leaf_149
leaf_149  [color=Gray,shape=rectangle,fontname=Inconsolata,label="span()"]
raw_143 -> leaf_150
leaf_150  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" on leaf nodes, and
grafting these to the interpolated strings in order, you will produce the
original "]
literal_144 -> leaf_151
leaf_151  [color=Gray,shape=rectangle,fontname=Inconsolata,label="node.str"]
raw_145 -> leaf_152
leaf_152  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". 
"]
codeblock_125 -> leaf_153
leaf_153  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Node.unroll(node)
  local function traverse(ast)
  end

  return coroutine.wrap(function() traverse(node) end)
end"]
section_54 -> { header_154 prose_155 prose_156 codeblock_157}
{rank=same; header_154 prose_155 prose_156 codeblock_157}

header_154 [label="3 : Collectors"]

prose_155 [label="prose"]

prose_156 [label="prose"]

codeblock_157 [label="code block 253-262"]


header_154 -> leaf_158
leaf_158  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Collectors"]
prose_155 -> { raw_159}
{rank=same; raw_159}

raw_159 [label="raw"]


raw_159 -> leaf_160
leaf_160  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

These return an array of all results. 
"]
prose_156 -> { raw_161}
{rank=same; raw_161}

raw_161 [label="raw"]


raw_161 -> leaf_162
leaf_162  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- [ ] #todo  Add a Forest class to provide the iterator interface for
             the return arrays of this class.
"]
codeblock_157 -> leaf_163
leaf_163  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Node.gather(node, pred)
  local gathered = {}
  for ast in node:select(pred) do
    gathered[#gathered + 1] = ast
  end
  
  return gathered
end"]
section_55 -> { header_164 prose_165 section_166}
{rank=same; header_164 prose_165 section_166}

header_164 [label="3 : Subclassing and construction"]

prose_165 [label="prose"]

section_166 [label="section: 267-284"]


header_164 -> leaf_167
leaf_167  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Subclassing and construction"]
prose_165 -> { raw_168}
{rank=same; raw_168}

raw_168 [label="raw"]


raw_168 -> leaf_169
leaf_169  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
section_166 -> { header_170 prose_171 codeblock_172}
{rank=same; header_170 prose_171 codeblock_172}

header_170 [label="4 : N.inherit(node)"]

prose_171 [label="prose"]

codeblock_172 [label="code block 269-283"]


header_170 -> leaf_173
leaf_173  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** N.inherit(node)"]
prose_171 -> { raw_174}
{rank=same; raw_174}

raw_174 [label="raw"]


raw_174 -> leaf_175
leaf_175  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
codeblock_172 -> leaf_176
leaf_176  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Node.inherit(node)
  Meta = setmetatable({}, node)
  Meta.__index = Meta
  local meta = setmetatable({}, Meta)
  meta.__index = meta
  return Meta, meta
end

function Node.export(_, mod, constructor)
  mod.__call = constructor
  return setmetatable({}, mod)
end
"]
section_8 -> { header_177 prose_178 prose_179 prose_180 prose_181 prose_182 section_183 section_184}
{rank=same; header_177 prose_178 prose_179 prose_180 prose_181 prose_182 section_183 section_184}

header_177 [label="2 : Node Instances"]

prose_178 [label="prose"]

prose_179 [label="prose"]

prose_180 [label="prose"]

prose_181 [label="prose"]

prose_182 [label="prose"]

section_183 [label="section: 309-331"]

section_184 [label="section: 345-379"]


header_177 -> leaf_185
leaf_185  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Node Instances"]
prose_178 -> { raw_186}
{rank=same; raw_186}

raw_186 [label="raw"]


raw_186 -> leaf_187
leaf_187  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  To be a Node, currently, indexed elements of the Array portion must also be 
Nodes. 
"]
prose_179 -> { raw_188}
{rank=same; raw_188}

raw_188 [label="raw"]


raw_188 -> leaf_189
leaf_189  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'm mostly convinced that indexed elements can also be strings, and that 
this is the form leaf nodes should take.  Currently, they have a 'val' field
and no children, which we should replace with a child string at [1].
"]
prose_180 -> { raw_190 literal_191 raw_192 literal_193 raw_194}
{rank=same; raw_190 literal_191 raw_192 literal_193 raw_194}

raw_190 [label="raw"]

literal_191 [label="literal"]

raw_192 [label="raw"]

literal_193 [label="literal"]

raw_194 [label="raw"]


raw_190 -> leaf_195
leaf_195  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This gives us a lighter way to handle the circumstance where we have, say,
a list, "]
literal_191 -> leaf_196
leaf_196  [color=Gray,shape=rectangle,fontname=Inconsolata,label="(foo bar baz)"]
raw_192 -> leaf_197
leaf_197  [color=Gray,shape=rectangle,fontname=Inconsolata,label=". We currently either need a \"left-per\" or \"pal\"
Node class to hold the "]
literal_193 -> leaf_198
leaf_198  [color=Gray,shape=rectangle,fontname=Inconsolata,label="("]
raw_194 -> leaf_199
leaf_199  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", or we would have to skip it entirely.
"]
prose_181 -> { raw_200 italic_201 raw_202}
{rank=same; raw_200 italic_201 raw_202}

raw_200 [label="raw"]

italic_201 [label="italic"]

raw_202 [label="raw"]


raw_200 -> leaf_203
leaf_203  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Quipu can't lose any information from the string, so they have to include
whitespace.  We're not limited in the same way and can reconstruct less 
semantically crucial parts of a document using the span and the original 
string, since we're not "]
italic_201 -> leaf_204
leaf_204  [color=Gray,shape=rectangle,fontname=Inconsolata,label="currently"]
raw_202 -> leaf_205
leaf_205  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" editing our strings once they're
entered in.
"]
prose_182 -> { raw_206}
{rank=same; raw_206}

raw_206 [label="raw"]


raw_206 -> leaf_207
leaf_207  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Nodes are meant to be broadly compatible with everything we intend to
do with abstract syntax trees.  The more I think about this the better
it strikes me as an approach. 

"]
section_183 -> { header_208 prose_209 prose_210 prose_211 prose_212 prose_213 section_214}
{rank=same; header_208 prose_209 prose_210 prose_211 prose_212 prose_213 section_214}

header_208 [label="3 : Fields"]

prose_209 [label="prose"]

prose_210 [label="prose"]

prose_211 [label="prose"]

prose_212 [label="prose"]

prose_213 [label="prose"]

section_214 [label="section: 332-344"]


header_208 -> leaf_215
leaf_215  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Fields"]
prose_209 -> { raw_216 literal_217 raw_218 literal_219 raw_220}
{rank=same; raw_216 literal_217 raw_218 literal_219 raw_220}

raw_216 [label="raw"]

literal_217 [label="literal"]

raw_218 [label="raw"]

literal_219 [label="literal"]

raw_220 [label="raw"]


raw_216 -> leaf_221
leaf_221  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  There are invariant fields a Node is also expected to have, they are:
 
  - first :  Index into "]
literal_217 -> leaf_222
leaf_222  [color=Gray,shape=rectangle,fontname=Inconsolata,label="str"]
raw_218 -> leaf_223
leaf_223  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" which begins the span.
  - last  :  Index into "]
literal_219 -> leaf_224
leaf_224  [color=Gray,shape=rectangle,fontname=Inconsolata,label="str"]
raw_220 -> leaf_225
leaf_225  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" which ends the span.
"]
prose_210 -> { raw_226 literal_227 raw_228}
{rank=same; raw_226 literal_227 raw_228}

raw_226 [label="raw"]

literal_227 [label="literal"]

raw_228 [label="raw"]


raw_226 -> leaf_229
leaf_229  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In principle, we want the Node to be localized. We could include a 
reference to the whole "]
literal_227 -> leaf_230
leaf_230  [color=Gray,shape=rectangle,fontname=Inconsolata,label="str"]
raw_228 -> leaf_231
leaf_231  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and derive substrings lazily.
"]
prose_211 -> { raw_232}
{rank=same; raw_232}

raw_232 [label="raw"]


raw_232 -> leaf_233
leaf_233  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If we included the full span as a substring on each Node, we'd end up
with a lot of spans, and wouldn't use most of them. Even slicing a piece
out is costly if we're not going to use it. 
"]
prose_212 -> { raw_234}
{rank=same; raw_234}

raw_234 [label="raw"]


raw_234 -> leaf_235
leaf_235  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
So our constructor for a Node class takes (Constructor, node, str) as 
the standard interface.  If a module needs a non-standard constructor,
as our Section and Block modules currently take an array of lines, that
will need to be provided as the second return from the module. 
"]
prose_213 -> { raw_236}
{rank=same; raw_236}

raw_236 [label="raw"]


raw_236 -> leaf_237
leaf_237  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This will allow for the kind of multi-pass recursive-descent that I'm
aiming for. 

"]
section_214 -> { header_238 prose_239 prose_240 prose_241 prose_242}
{rank=same; header_238 prose_239 prose_240 prose_241 prose_242}

header_238 [label="4 : line tracking (optional)"]

prose_239 [label="prose"]

prose_240 [label="prose"]

prose_241 [label="prose"]

prose_242 [label="prose"]


header_238 -> leaf_243
leaf_243  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** line tracking (optional)"]
prose_239 -> { raw_244}
{rank=same; raw_244}

raw_244 [label="raw"]


raw_244 -> leaf_245
leaf_245  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

It may be wise to always track lines, in which case we will include:
"]
prose_240 -> { raw_246}
{rank=same; raw_246}

raw_246 [label="raw"]


raw_246 -> leaf_247
leaf_247  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - line_first :  The line at which the match begins
  - line_last  :  The line at which the match ends
"]
prose_241 -> { raw_248}
{rank=same; raw_248}

raw_248 [label="raw"]


raw_248 -> leaf_249
leaf_249  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is, at least, a frequent enough pattern that the metatable should return
a negative number if these aren't assigned. 
"]
prose_242 -> { raw_250}
{rank=same; raw_250}

raw_250 [label="raw"]


raw_250 -> leaf_251
leaf_251  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- [ ] #todo decide if line tracking is in fact optional

"]
section_184 -> { header_252 prose_253 prose_254 prose_255 prose_256 prose_257 prose_258 prose_259 prose_260 codeblock_261}
{rank=same; header_252 prose_253 prose_254 prose_255 prose_256 prose_257 prose_258 prose_259 prose_260 codeblock_261}

header_252 [label="3 : Other fields"]

prose_253 [label="prose"]

prose_254 [label="prose"]

prose_255 [label="prose"]

prose_256 [label="prose"]

prose_257 [label="prose"]

prose_258 [label="prose"]

prose_259 [label="prose"]

prose_260 [label="prose"]

codeblock_261 [label="code block 374-376"]


header_252 -> leaf_262
leaf_262  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Other fields"]
prose_253 -> { raw_263 literal_264 raw_265}
{rank=same; raw_263 literal_264 raw_265}

raw_263 [label="raw"]

literal_264 [label="literal"]

raw_265 [label="raw"]


raw_263 -> leaf_266
leaf_266  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The way the Grammar class will work: each "]
literal_264 -> leaf_267
leaf_267  [color=Gray,shape=rectangle,fontname=Inconsolata,label="V\"patt\""]
raw_265 -> leaf_268
leaf_268  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" can have a metatable.
These are passed in as the second parameter during construction, with the key
the same name as the rule. 
"]
prose_254 -> { raw_269}
{rank=same; raw_269}

raw_269 [label="raw"]


raw_269 -> leaf_270
leaf_270  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If a pattern doesn't have a metatable, it's given a Node class and consists of
only the above fields, plus an array representing any subrules. 
"]
prose_255 -> { raw_271 literal_272 raw_273}
{rank=same; raw_271 literal_272 raw_273}

raw_271 [label="raw"]

literal_272 [label="literal"]

raw_273 [label="raw"]


raw_271 -> leaf_274
leaf_274  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If it does, the metatable will have a "]
literal_272 -> leaf_275
leaf_275  [color=Gray,shape=rectangle,fontname=Inconsolata,label="__call"]
raw_273 -> leaf_276
leaf_276  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" method, which expects two
parameters, itself, and the node, which will include the span. 
"]
prose_256 -> { raw_277 literal_278 raw_279}
{rank=same; raw_277 literal_278 raw_279}

raw_277 [label="raw"]

literal_278 [label="literal"]

raw_279 [label="raw"]


raw_277 -> leaf_280
leaf_280  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This will require reattunement of basically every class in the "]
literal_278 -> leaf_281
leaf_281  [color=Gray,shape=rectangle,fontname=Inconsolata,label="/grym"]
raw_279 -> leaf_282
leaf_282  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" folder,
but let's build the Prose parse first.  I do want the whole shebang in a single
grammar eventually.
"]
prose_257 -> { raw_283}
{rank=same; raw_283}

raw_283 [label="raw"]


raw_283 -> leaf_284
leaf_284  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The intention is to allow multiple grammars to coexist peacefully. Currently
the parser is handrolled and we have special case values for everything.
The idea is to stabilize this, so that multi-pass parsing works but in a
standard way where the Node constructor is a consistent interface. 
"]
prose_258 -> { raw_285}
{rank=same; raw_285}

raw_285 [label="raw"]


raw_285 -> leaf_286
leaf_286  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In the meantime we have things like
"]
prose_259 -> { raw_287 literal_288 raw_289}
{rank=same; raw_287 literal_288 raw_289}

raw_287 [label="raw"]

literal_288 [label="literal"]

raw_289 [label="raw"]


raw_287 -> leaf_290
leaf_290  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- lines :  If this exists, there's a collection of lines which need to be
           joined with "]
literal_288 -> leaf_291
leaf_291  [color=Gray,shape=rectangle,fontname=Inconsolata,label="\\n"]
raw_289 -> leaf_292
leaf_292  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" to reconstruct the actual span.
"]
prose_260 -> { raw_293}
{rank=same; raw_293}

raw_293 [label="raw"]


raw_293 -> leaf_294
leaf_294  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
           We want to do this the other way, and use the span itself for the
           inner parse. 
"]
codeblock_261 -> leaf_295
leaf_295  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return Node"]

}
