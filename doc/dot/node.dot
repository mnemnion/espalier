digraph hierarchy {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 317"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-222"]


section_1 -> { header_2 prose_3 section_4 section_5 section_6 section_7 section_8}
{rank=same; header_2 prose_3 section_4 section_5 section_6 section_7 section_8}

header_2 [label="1 : Node"]

prose_3 [label="prose"]

section_4 [label="section: 6-12"]

section_5 [label="section: 13-27"]

section_6 [label="section: 28-44"]

section_7 [label="section: 45-204"]

section_8 [label="section: 223-282"]


header_2 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Node"]
prose_3 -> { raw_10}
{rank=same; raw_10}

raw_10 [label="raw"]


raw_10 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


  Time to stabilize this class once and for all. 
"]
section_4 -> { header_12 prose_13 codeblock_14}
{rank=same; header_12 prose_13 codeblock_14}

header_12 [label="3 : includes"]

prose_13 [label="prose"]

codeblock_14 [label="code block 8-11"]


header_12 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** includes"]
prose_13 -> { raw_16}
{rank=same; raw_16}

raw_16 [label="raw"]


raw_16 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
codeblock_14 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local s = require \"status\"
local dot = require \"node/dot\""]
section_5 -> { header_19 prose_20 codeblock_21}
{rank=same; header_19 prose_20 codeblock_21}

header_19 [label="2 : Node metatable"]

prose_20 [label="prose"]

codeblock_21 [label="code block 19-24"]


header_19 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Node metatable"]
prose_20 -> { raw_23}
{rank=same; raw_23}

raw_23 [label="raw"]


raw_23 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The Node metatable is the root table for any Node.  I'm planning to make
an intermediate class/table called Root that is in common for any instance
Node.  All Root absolutely has to contain is =str=. 
"]
codeblock_21 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
local N = {}
N.__index = N
N.isNode = true"]
section_6 -> { header_26 prose_27 prose_28 codeblock_29 prose_30}
{rank=same; header_26 prose_27 prose_28 codeblock_29 prose_30}

header_26 [label="2 : Fields"]

prose_27 [label="prose"]

prose_28 [label="prose"]

codeblock_29 [label="code block 37-40"]

prose_30 [label="prose"]


header_26 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Fields"]
prose_27 -> { raw_32}
{rank=same; raw_32}

raw_32 [label="raw"]


raw_32 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

   - id :  A string naming the Node. 
           This is identical to the name of the pattern that recognizes
           or captures it.
"]
prose_28 -> { raw_34}
{rank=same; raw_34}

raw_34 [label="raw"]


raw_34 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
   - line_first :  Always -1.
   - line_last  :  Always -1. 
"]
codeblock_29 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="N.line_first = -1
N.line_last  = -1"]
prose_30 -> { raw_37 link_38 raw_39}
{rank=same; raw_37 link_38 raw_39}

raw_37 [label="raw"]

link_38 [label="link: line iterator"]

raw_39 [label="raw"]


raw_37 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It occurs to me we could lazily calculate these using the "]
link_38 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label="[[line iterator][httk://]]"]
raw_39 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".

"]
section_7 -> { header_43 prose_44 section_45 section_46}
{rank=same; header_43 prose_44 section_45 section_46}

header_43 [label="2 : Methods"]

prose_44 [label="prose"]

section_45 [label="section: 48-185"]

section_46 [label="section: 205-222"]


header_43 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Methods"]
prose_44 -> { raw_48}
{rank=same; raw_48}

raw_48 [label="raw"]


raw_48 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
section_45 -> { header_50 prose_51 prose_52 codeblock_53 codeblock_54 section_55 section_56 section_57 section_58}
{rank=same; header_50 prose_51 prose_52 codeblock_53 codeblock_54 section_55 section_56 section_57 section_58}

header_50 [label="3 : Visualizers"]

prose_51 [label="prose"]

prose_52 [label="prose"]

codeblock_53 [label="code block 55-70"]

codeblock_54 [label="code block 72-100"]

section_55 [label="section: 102-122"]

section_56 [label="section: 123-145"]

section_57 [label="section: 146-185"]

section_58 [label="section: 186-204"]


header_50 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Visualizers"]
prose_51 -> { raw_60}
{rank=same; raw_60}

raw_60 [label="raw"]


raw_60 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This gives us a nice, tree-shaped printout of an entire Node.
"]
prose_52 -> { raw_62}
{rank=same; raw_62}

raw_62 [label="raw"]


raw_62 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
We're less disciplined than we should be about up-assigning this to
inherited Node classes. 
"]
codeblock_53 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function N.toString(node, depth)
   local depth = depth or 0
   local phrase = \"\"
   phrase = (\"  \"):rep(depth) .. \"id: \" .. node.id .. \",  \"
      .. \"first: \" .. node.first .. \", last: \" .. node.last .. \"\\n\"
   if node[1] then
    for _,v in ipairs(node) do
      if(v.isNode) then
        phrase = phrase .. N.toString(v, depth + 1)
      end
    end
  end 
   return phrase
end"]
codeblock_54 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function N.dotLabel(node)
  return node.id
end

function N.toMarkdown(node)
  if not node[1] then
    return string.sub(node.str, node.first, node.last)
  else
    s:halt(\"no toMarkdown for \" .. node.id)
  end
end

function N.dot(node)
  return dot.dot(node)
end

function N.toValue(node)
  if node.__VALUE then
    return node.__VALUE
  end
  if node.str then
    return node.str:sub(node.first,node.last)
  else
    s:halt(\"no str on node \" .. node.id)
  end
end
"]
section_55 -> { header_66 prose_67 codeblock_68}
{rank=same; header_66 prose_67 codeblock_68}

header_66 [label="4 : N.walkDeep"]

prose_67 [label="prose"]

codeblock_68 [label="code block 106-121"]


header_66 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** N.walkDeep"]
prose_67 -> { raw_70}
{rank=same; raw_70}

raw_70 [label="raw"]


raw_70 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Depth-first iterator. 
"]
codeblock_68 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function N.walkDeep(node)
    local function traverse(ast)
        if not ast.isNode then return nil end

        for _, v in ipairs(ast) do
            if type(v) == 'table' and v.isNode then
              traverse(v)
            end
        end
        coroutine.yield(ast)
    end

    return coroutine.wrap(function() traverse(node) end)
end"]
section_56 -> { header_73 prose_74 codeblock_75}
{rank=same; header_73 prose_74 codeblock_75}

header_73 [label="4 : N.walk"]

prose_74 [label="prose"]

codeblock_75 [label="code block 127-143"]


header_73 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** N.walk"]
prose_74 -> { raw_77}
{rank=same; raw_77}

raw_77 [label="raw"]


raw_77 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Breadth-first iterator.  This is the default. 
"]
codeblock_75 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function N.walk(node)
  local function traverse(ast)
    if not ast.isNode then return nil end

    coroutine.yield(ast)
    for _, v in ipairs(ast) do
      if type(v) == 'table' and v.isNode then
        traverse(v)
      end
    end
  end

  return coroutine.wrap(function() traverse(node) end)
end
"]
section_57 -> { header_80 prose_81 codeblock_82}
{rank=same; header_80 prose_81 codeblock_82}

header_80 [label="4 : N.select(node, pred)"]

prose_81 [label="prose"]

codeblock_82 [label="code block 152-183"]


header_80 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** N.select(node, pred)"]
prose_81 -> { raw_84}
{rank=same; raw_84}

raw_84 [label="raw"]


raw_84 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Takes the Node and walks it, yielding the Nodes which match the predicate.
=pred= is either a string, which matches to =id=, or a function, which takes
a Node and returns true or false on some premise. 
"]
codeblock_82 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function N.select(node, pred)
   local function qualifies(node, pred)
      if type(pred) == 'string' then
         if type(node) == 'table' 
          and node.id and node.id == pred then
            return true
         else
            return false
         end
      elseif type(pred) == 'function' then
         return pred(node)
      else
         s:halt(\"cannot select on predicate of type \" .. type(pred))
      end
   end

   local function traverse(ast)
      -- depth first
      if qualifies(ast, pred) then
         coroutine.yield(ast)
      end
      if ast.isNode then
         for _, v in ipairs(ast) do
            traverse(v)
         end
      end
   end

   return coroutine.wrap(function() traverse(node) end)
end"]
section_58 -> { header_87 prose_88 codeblock_89}
{rank=same; header_87 prose_88 codeblock_89}

header_87 [label="4 : N.tokens(node)"]

prose_88 [label="prose"]

codeblock_89 [label="code block 190-202"]


header_87 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** N.tokens(node)"]
prose_88 -> { raw_91}
{rank=same; raw_91}

raw_91 [label="raw"]


raw_91 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Iterator returning all 'captured' values as strings.
"]
codeblock_89 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function N.tokens(node)
  local function traverse(ast)
    for node in N.walk(ast) do
      if not node[1] then
        coroutine.yield(node:toValue())
      end
    end
  end

  return coroutine.wrap(function() traverse(node) end)
end  "]
section_46 -> { header_94 prose_95 prose_96 codeblock_97}
{rank=same; header_94 prose_95 prose_96 codeblock_97}

header_94 [label="3 : Collectors"]

prose_95 [label="prose"]

prose_96 [label="prose"]

codeblock_97 [label="code block 212-221"]


header_94 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Collectors"]
prose_95 -> { raw_99}
{rank=same; raw_99}

raw_99 [label="raw"]


raw_99 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

These return an array of all results. 
"]
prose_96 -> { raw_101}
{rank=same; raw_101}

raw_101 [label="raw"]


raw_101 -> leaf_102
leaf_102  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- [ ] #todo  Add a Forest class to provide the iterator interface for
             the return arrays of this class.
"]
codeblock_97 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function N.gather(node, pred)
  local gathered = {}
  for ast in node:select(pred) do
    gathered[#gathered + 1] = ast
  end
  
  return gathered
end"]
section_8 -> { header_104 prose_105 prose_106 prose_107 prose_108 prose_109 section_110 section_111}
{rank=same; header_104 prose_105 prose_106 prose_107 prose_108 prose_109 section_110 section_111}

header_104 [label="2 : Node Instances"]

prose_105 [label="prose"]

prose_106 [label="prose"]

prose_107 [label="prose"]

prose_108 [label="prose"]

prose_109 [label="prose"]

section_110 [label="section: 247-269"]

section_111 [label="section: 283-317"]


header_104 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Node Instances"]
prose_105 -> { raw_113}
{rank=same; raw_113}

raw_113 [label="raw"]


raw_113 -> leaf_114
leaf_114  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  To be a Node, currently, indexed elements of the Array portion must also be 
Nodes. 
"]
prose_106 -> { raw_115}
{rank=same; raw_115}

raw_115 [label="raw"]


raw_115 -> leaf_116
leaf_116  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
I'm mostly convinced that indexed elements can also be strings, and that 
this is the form leaf nodes should take.  Currently, they have a 'val' field
and no children, which we should replace with a child string at [1].
"]
prose_107 -> { raw_117}
{rank=same; raw_117}

raw_117 [label="raw"]


raw_117 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This gives us a lighter way to handle the circumstance where we have, say,
a list, =(foo bar baz)=. We currently either need a \"left-per\" or \"pal\"
Node class to hold the =(=, or we would have to skip it entirely.
"]
prose_108 -> { raw_119}
{rank=same; raw_119}

raw_119 [label="raw"]


raw_119 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Quipu can't lose any information from the string, so they have to include
whitespace.  We're not limited in the same way and can reconstruct less 
semantically crucial parts of a document using the span and the original 
string, since we're not /currently/ editing our strings once they're
entered in.
"]
prose_109 -> { raw_121}
{rank=same; raw_121}

raw_121 [label="raw"]


raw_121 -> leaf_122
leaf_122  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Nodes are meant to be broadly compatible with everything we intend to
do with abstract syntax trees.  The more I think about this the better
it strikes me as an approach. 

"]
section_110 -> { header_123 prose_124 prose_125 prose_126 prose_127 prose_128 section_129}
{rank=same; header_123 prose_124 prose_125 prose_126 prose_127 prose_128 section_129}

header_123 [label="3 : Fields"]

prose_124 [label="prose"]

prose_125 [label="prose"]

prose_126 [label="prose"]

prose_127 [label="prose"]

prose_128 [label="prose"]

section_129 [label="section: 270-282"]


header_123 -> leaf_130
leaf_130  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Fields"]
prose_124 -> { raw_131}
{rank=same; raw_131}

raw_131 [label="raw"]


raw_131 -> leaf_132
leaf_132  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  There are invariant fields a Node is also expected to have, they are:
 
  - first :  Index into =str= which begins the span.
  - last  :  Index into =str= which ends the span.
"]
prose_125 -> { raw_133}
{rank=same; raw_133}

raw_133 [label="raw"]


raw_133 -> leaf_134
leaf_134  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In principle, we want the Node to be localized. We could include a 
reference to the whole =str= and derive substrings lazily.
"]
prose_126 -> { raw_135}
{rank=same; raw_135}

raw_135 [label="raw"]


raw_135 -> leaf_136
leaf_136  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If we included the full span as a substring on each Node, we'd end up
with a lot of spans, and wouldn't use most of them. Even slicing a piece
out is costly if we're not going to use it. 
"]
prose_127 -> { raw_137}
{rank=same; raw_137}

raw_137 [label="raw"]


raw_137 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
So our constructor for a Node class takes (Constructor, node, str) as 
the standard interface.  If a module needs a non-standard constructor,
as our Section and Block modules currently take an array of lines, that
will need to be provided as the second return from the module. 
"]
prose_128 -> { raw_139}
{rank=same; raw_139}

raw_139 [label="raw"]


raw_139 -> leaf_140
leaf_140  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This will allow for the kind of multi-pass recursive-descent that I'm
aiming for. 

"]
section_129 -> { header_141 prose_142 prose_143 prose_144 prose_145}
{rank=same; header_141 prose_142 prose_143 prose_144 prose_145}

header_141 [label="4 : line tracking (optional)"]

prose_142 [label="prose"]

prose_143 [label="prose"]

prose_144 [label="prose"]

prose_145 [label="prose"]


header_141 -> leaf_146
leaf_146  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** line tracking (optional)"]
prose_142 -> { raw_147}
{rank=same; raw_147}

raw_147 [label="raw"]


raw_147 -> leaf_148
leaf_148  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

It may be wise to always track lines, in which case we will include:
"]
prose_143 -> { raw_149}
{rank=same; raw_149}

raw_149 [label="raw"]


raw_149 -> leaf_150
leaf_150  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - line_first :  The line at which the match begins
  - line_last  :  The line at which the match ends
"]
prose_144 -> { raw_151}
{rank=same; raw_151}

raw_151 [label="raw"]


raw_151 -> leaf_152
leaf_152  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is, at least, a frequent enough pattern that the metatable should return
a negative number if these aren't assigned. 
"]
prose_145 -> { raw_153}
{rank=same; raw_153}

raw_153 [label="raw"]


raw_153 -> leaf_154
leaf_154  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- [ ] #todo decide if line tracking is in fact optional

"]
section_111 -> { header_155 prose_156 prose_157 prose_158 prose_159 prose_160 prose_161 prose_162 prose_163 codeblock_164}
{rank=same; header_155 prose_156 prose_157 prose_158 prose_159 prose_160 prose_161 prose_162 prose_163 codeblock_164}

header_155 [label="3 : Other fields"]

prose_156 [label="prose"]

prose_157 [label="prose"]

prose_158 [label="prose"]

prose_159 [label="prose"]

prose_160 [label="prose"]

prose_161 [label="prose"]

prose_162 [label="prose"]

prose_163 [label="prose"]

codeblock_164 [label="code block 312-314"]


header_155 -> leaf_165
leaf_165  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Other fields"]
prose_156 -> { raw_166}
{rank=same; raw_166}

raw_166 [label="raw"]


raw_166 -> leaf_167
leaf_167  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  The way the Grammar class will work: each =V\"patt\"= can have a metatable.
These are passed in as the second parameter during construction, with the key
the same name as the rule. 
"]
prose_157 -> { raw_168}
{rank=same; raw_168}

raw_168 [label="raw"]


raw_168 -> leaf_169
leaf_169  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If a pattern doesn't have a metatable, it's given a Node class and consists of
only the above fields, plus an array representing any subrules. 
"]
prose_158 -> { raw_170}
{rank=same; raw_170}

raw_170 [label="raw"]


raw_170 -> leaf_171
leaf_171  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If it does, the metatable will have a =__call= method, which expects two
parameters, itself, and the node, which will include the span. 
"]
prose_159 -> { raw_172}
{rank=same; raw_172}

raw_172 [label="raw"]


raw_172 -> leaf_173
leaf_173  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This will require reattunement of basically every class in the =/grym= folder,
but let's build the Prose parse first.  I do want the whole shebang in a single
grammar eventually.
"]
prose_160 -> { raw_174}
{rank=same; raw_174}

raw_174 [label="raw"]


raw_174 -> leaf_175
leaf_175  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The intention is to allow multiple grammars to coexist peacefully. Currently
the parser is handrolled and we have special case values for everything.
The idea is to stabilize this, so that multi-pass parsing works but in a
standard way where the Node constructor is a consistent interface. 
"]
prose_161 -> { raw_176}
{rank=same; raw_176}

raw_176 [label="raw"]


raw_176 -> leaf_177
leaf_177  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
In the meantime we have things like
"]
prose_162 -> { raw_178}
{rank=same; raw_178}

raw_178 [label="raw"]


raw_178 -> leaf_179
leaf_179  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- lines :  If this exists, there's a collection of lines which need to be
           joined with =\\n= to reconstruct the actual span.
"]
prose_163 -> { raw_180}
{rank=same; raw_180}

raw_180 [label="raw"]


raw_180 -> leaf_181
leaf_181  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
           We want to do this the other way, and use the span itself for the
           inner parse. 
"]
codeblock_164 -> leaf_182
leaf_182  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return N"]

}
